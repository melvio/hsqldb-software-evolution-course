
****************************************
******** Type 1 clone detection ********
****************************************
*****************************
** Clone percentage
** 4.642615749%
*****************************
** Number of clone classes:
** 78
*****************************
** Number of clones:
** 185
*****************************
** Size (SLOC) of largest clone: 
** 19
*****************************
** The largest clones:
** {|project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(2976,966,<85,8>,<107,48>),|project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(4893,966,<128,8>,<150,48>)}
** The largest clones in code:
** 
** largest clone number: 1
** assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
**

** largest clone number: 2
** assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
**

*****************************
** The largest clone classes in SLOC:
** 45
*****************************
** The largest clone classes (loc):
** {[|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(3944,131,<116,2>,<120,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(4631,131,<144,2>,<148,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5307,131,<171,2>,<175,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5976,131,<199,2>,<203,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6655,131,<227,2>,<231,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(7341,131,<255,2>,<259,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(8000,131,<281,2>,<285,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(8580,131,<304,2>,<308,18>),|project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(20995,131,<789,2>,<793,18>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**
init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 1             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java|(1346,312,<45,8>,<48,79>)
```
 st.execute("alter table "+table+" add b varchar(4) primary key");
        ResultSet rs = st.executeQuery("Select * From " + table);
        assertRSMetaData( rs, new String[]{"a", "b"},  new int[]{Types.VARCHAR, Types.VARCHAR} );
        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestAlterTable2.java|(2694,312,<75,8>,<78,79>)
```
 st.execute("alter table "+table+" add b varchar(4) primary key");
        ResultSet rs = st.executeQuery("Select * From " + table);
        assertRSMetaData( rs, new String[]{"a", "b"},  new int[]{Types.VARCHAR, Types.VARCHAR} );
        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(4881,112,<167,2>,<172,3>)
```
 if(num.scale < scale){
			num.setScale(scale);
		}else
		if(num.scale > scale){
			setScale(num.scale);
		}
```
Location: |project://smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(6715,112,<235,2>,<240,3>)
```
 if(num.scale < scale){
			num.setScale(scale);
		}else
		if(num.scale > scale){
			setScale(num.scale);
		}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(1577,435,<46,3>,<53,99>)
```
 con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
			assertRowCount( 0, "Select * from Scrollable");

			con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
			assertRowCount( 1, "Select * from Scrollable");
			assertRowCount( 0, "Select * from Scrollable Where 1=0");

			Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(3032,444,<79,3>,<86,108>)
```
 con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
			assertRowCount( 0, "Select * from Scrollable");

			con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
			assertRowCount( 1, "Select * from Scrollable");
			assertRowCount( 0, "Select * from Scrollable Where 1=0");

            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(4450,444,<111,3>,<118,108>)
```
 con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
			assertRowCount( 0, "Select * from Scrollable");

			con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
			assertRowCount( 1, "Select * from Scrollable");
			assertRowCount( 0, "Select * from Scrollable Where 1=0");

            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestScrollable.java|(6059,444,<147,3>,<154,108>)
```
 con.createStatement().execute("Create Table Scrollable (i counter, v varchar(20))");
			assertRowCount( 0, "Select * from Scrollable");

			con.createStatement().execute("Insert Into Scrollable(v) Values('qwert')");
			assertRowCount( 1, "Select * from Scrollable");
			assertRowCount( 0, "Select * from Scrollable Where 1=0");

            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestJoins.java|(7178,239,<159,8>,<164,49>)
```
 Connection con = AllTests.getConnection();
        Statement st = con.createStatement();
        ResultSet rs;

        rs = st.executeQuery("Select * from " + table + " where 1 = 0");
        assertFalse( "To many rows", rs.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(6860,239,<150,8>,<155,49>)
```
 Connection con = AllTests.getConnection();
        Statement st = con.createStatement();
        ResultSet rs;

        rs = st.executeQuery("Select * from " + table + " where 1 = 0");
        assertFalse( "To many rows", rs.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13100,81,<363,8>,<364,41>)
```
 page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13521,81,<377,8>,<378,41>)
```
 page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(4917,271,<119,12>,<124,23>)
```
 rs.next();
            int count = rs.getInt(1);
            if (count != rowCount)
                System.out.println( "  Failed: Only " + count + " rows were inserted.");
            else System.out.println( "  Test time: " + time + " ms");
            st.close();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7150,272,<178,12>,<183,23>)
```
 rs.next();
            int count = rs.getInt(1);
            if (count != rowCount)
                 System.out.println( "  Failed: Only " + count + " rows were inserted.");
            else System.out.println( "  Test time: " + time + " ms");
            st.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(26779,249,<629,12>,<634,26>)
```
 pr.close();
            time += System.currentTimeMillis();
            System.out.println( "  Test time: " + time + " ms");
            fis.close();
            java.io.File file = new java.io.File(tableName+".bin");
            file.delete();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(28455,249,<670,12>,<675,26>)
```
 pr.close();
            time += System.currentTimeMillis();
            System.out.println( "  Test time: " + time + " ms");
            fis.close();
            java.io.File file = new java.io.File(tableName+".bin");
            file.delete();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(2976,966,<85,8>,<107,48>)
```
 assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(4893,966,<128,8>,<150,48>)
```
 assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        assertFalse("next", rs.next() );
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        
        assertTrue("first", rs.first() );
        assertEquals("getRow", 1, rs.getRow() );
        
        assertFalse("previous", rs.previous() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        
        assertTrue("last", rs.last() );
        assertEquals("getRow", 1, rs.getRow() );
        assertTrue("isLast", rs.isLast() );
        
        rs.afterLast();
        assertFalse("isBeforeFirst", rs.isBeforeFirst() );
        assertTrue("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(8130,302,<182,8>,<182,310>)
```
 String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "NUM_PREC_RADIX", "NULLABLE", "REMARKS", "COLUMN_DEF", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "CHAR_OCTET_LENGTH", "ORDINAL_POSITION", "IS_NULLABLE"};
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(16365,302,<753,3>,<753,305>)
```
 String[] colNames = {"TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "TYPE_NAME", "COLUMN_SIZE", "BUFFER_LENGTH", "DECIMAL_DIGITS", "NUM_PREC_RADIX", "NULLABLE", "REMARKS", "COLUMN_DEF", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "CHAR_OCTET_LENGTH", "ORDINAL_POSITION", "IS_NULLABLE"};
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(13975,129,<520,2>,<524,16>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Long oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(14637,129,<546,2>,<550,16>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Long oldValue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(11286,231,<234,8>,<234,239>)
```
 String[] colNames = {"PKTABLE_CAT", "PKTABLE_SCHEM", "PKTABLE_NAME", "PKCOLUMN_NAME", "FKTABLE_CAT", "FKTABLE_SCHEM", "FKTABLE_NAME", "FKCOLUMN_NAME", "KEY_SEQ", "UPDATE_RULE", "DELETE_RULE", "FK_NAME", "PK_NAME", "DEFERRABILITY"};
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(19973,231,<821,3>,<821,234>)
```
 String[] colNames = {"PKTABLE_CAT", "PKTABLE_SCHEM", "PKTABLE_NAME", "PKCOLUMN_NAME", "FKTABLE_CAT", "FKTABLE_SCHEM", "FKTABLE_NAME", "FKCOLUMN_NAME", "KEY_SEQ", "UPDATE_RULE", "DELETE_RULE", "FK_NAME", "PK_NAME", "DEFERRABILITY"};
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(10251,261,<261,8>,<265,29>)
```
 rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(10681,261,<269,8>,<273,29>)
```
 rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11407,261,<284,8>,<288,29>)
```
 rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(12145,261,<299,8>,<303,29>)
```
 rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(7385,230,<199,8>,<202,74>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(7881,230,<209,8>,<212,74>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(8531,230,<222,8>,<225,74>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9193,230,<235,8>,<238,74>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(7185,323,<158,8>,<162,49>)
```
 assertTrue( "To few rows", rs.next() );
        assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
        assertTrue( "To few rows", rs.next() );
        assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
        assertFalse( "To many rows", rs.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(7606,323,<165,8>,<169,49>)
```
 assertTrue( "To few rows", rs.next() );
        assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
        assertTrue( "To few rows", rs.next() );
        assertEqualsObject( "Values not equals", rs.getObject(1), rs.getObject(2), false);
        assertFalse( "To many rows", rs.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15096,389,<410,3>,<417,28>)
```
 con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con1.setAutoCommit(false);
			con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");

			ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
			assertTrue( rs2.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15876,389,<432,3>,<439,28>)
```
 con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con1.setAutoCommit(false);
			con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");

			ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
			assertTrue( rs2.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(7881,261,<209,8>,<213,29>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(8531,261,<222,8>,<226,29>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9193,261,<235,8>,<239,29>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(8720,242,<184,2>,<188,50>)
```
 assertRSMetaData( rs, colNames, colTypes);		
		assertTrue( "No row", rs.next() );
		assertEquals( "a", rs.getObject("COLUMN_NAME") ); 
		assertEquals( "INT", rs.getObject("TYPE_NAME") ); 
		assertEquals( "5", rs.getObject("COLUMN_Def") );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(9122,242,<193,2>,<197,50>)
```
 assertRSMetaData( rs, colNames, colTypes);		
		assertTrue( "No row", rs.next() );
		assertEquals( "a", rs.getObject("COLUMN_NAME") ); 
		assertEquals( "INT", rs.getObject("TYPE_NAME") ); 
		assertEquals( "5", rs.getObject("COLUMN_Def") );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexDescription.java|(6136,299,<186,9>,<194,9>)
```
 catch(Throwable e){
            if(raFile != null)
                try{
                    raFile.close();
                }catch(Exception e2){
                    DriverManager.println(e2.toString());
                }
            throw SmallSQLException.createFromException(e);
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/TableView.java|(3908,209,<105,3>,<113,3>)
```
 catch(Throwable e){
			if(raFile != null)
				try{
					raFile.close();
				}catch(Exception e2){
					DriverManager.println(e2.toString());
				}
			throw SmallSQLException.createFromException(e);
		}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7028,171,<176,12>,<179,37>)
```
 time += System.currentTimeMillis();
            rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
            rs.next();
            int count = rs.getInt(1);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(11532,171,<281,12>,<284,37>)
```
 time += System.currentTimeMillis();
            rs = st.executeQuery( "SELECT count(*) FROM " + tableName);
            rs.next();
            int count = rs.getInt(1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(9446,379,<338,2>,<351,36>)
```
 assertTrue( rs.next() );
		
		oldValue = (Integer)rs.getObject("i");
		assertNull(oldValue);
		assertTrue( rs.next() );
		oldValue = (Integer)rs.getObject("i");
		
		int count = 1;
		while(rs.next()){
			assertTrue( oldValue.compareTo( (Integer)rs.getObject("i") ) < 0 );
			oldValue = (Integer)rs.getObject("i");
			count++;
		}
		assertEquals( valueCount, count );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(11549,379,<423,2>,<436,36>)
```
 assertTrue( rs.next() );
		
		oldValue = (Integer)rs.getObject("i");
		assertNull(oldValue);
		assertTrue( rs.next() );
		oldValue = (Integer)rs.getObject("i");
		
		int count = 1;
		while(rs.next()){
			assertTrue( oldValue.compareTo( (Integer)rs.getObject("i") ) < 0 );
			oldValue = (Integer)rs.getObject("i");
			count++;
		}
		assertEquals( valueCount, count );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(4843,169,<152,2>,<159,16>)
```
 assertTrue( rs.next() );
		
		oldValue = rs.getString("v");
		assertNull(oldValue);
		assertTrue( rs.next() );
		oldValue = rs.getString("v");
		
		int count = 1;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5523,169,<179,2>,<186,16>)
```
 assertTrue( rs.next() );
		
		oldValue = rs.getString("v");
		assertNull(oldValue);
		assertTrue( rs.next() );
		oldValue = rs.getString("v");
		
		int count = 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4378,244,<117,51>,<125,5>)
```
 {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4979,244,<135,55>,<143,5>)
```
 {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(4599,199,<130,16>,<134,54>)
```
 int k=tmp.length-1;
                for(; k>= 0; k--) if(tmp[k] != 0) break;
                k++;
                byte[] tmp2 = new byte[k];
                System.arraycopy( tmp, 0, tmp2, 0, k);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(5050,151,<143,4>,<147,42>)
```
 int k=tmp.length-1;
				for(; k>= 0; k--) if(tmp[k] != 0) break;
				k++;
				byte[] tmp2 = new byte[k];
				System.arraycopy( tmp, 0, tmp2, 0, k);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(10261,245,<221,2>,<227,13>)
```
 pr.setObject( 1, testValue.small);
		pr.setObject( 2, testValue.large);
		rs = pr.executeQuery();
		assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
		assertFalse( "To many rows", rs.next() );
		pr.close();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(11056,243,<242,2>,<248,13>)
```
 pr.setObject( 1, testValue.small);
		pr.setObject( 2, testValue.large);
		rs = pr.executeQuery();
		assertTrue( "To few rows", rs.next());
		assertTrue( "To few rows", rs.next());
		assertFalse( "To many rows", rs.next() );
		pr.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(9744,422,<209,8>,<218,13>)
```
 pr.setObject( 1, testValue.small);
        pr.setObject( 2, testValue.large);
        rs = pr.executeQuery();
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertFalse( "To many rows", rs.next() );
		pr.close();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(10589,380,<230,2>,<239,13>)
```
 pr.setObject( 1, testValue.small);
		pr.setObject( 2, testValue.large);
		rs = pr.executeQuery();
		assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
		assertFalse( "To many rows", rs.next() );
		pr.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(9409,376,<331,4>,<341,50>)
```
 //there are more entries in this node
				result |= (((long)nextEntry) << shift);
				if(listEnum.stack>=3){
					listEnum.offsetStack[listEnum.stack] = offset;
					return result;
				}
				listEnum.offsetStack[listEnum.stack] = offset+pointerSize;
				offset = getPointer();
				shift -= 16;
				listEnum.stack++;
				listEnum.resultStack[listEnum.stack] = result;
```
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(10726,377,<376,4>,<386,50>)
```
 // there are more entries in this node
				result |= (((long)nextEntry) << shift);
				if(listEnum.stack>=3){
					listEnum.offsetStack[listEnum.stack] = offset;
					return result;
				}
				listEnum.offsetStack[listEnum.stack] = offset+pointerSize;
				offset = getPointer();
				shift -= 16;
				listEnum.stack++;
				listEnum.resultStack[listEnum.stack] = result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(9651,272,<274,3>,<280,76>)
```
 assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");

			con.rollback( savepoint );
			
			con.commit();
			assertEqualsRsValue("qwert2", "Select * from transactions");
			assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(12211,303,<325,12>,<331,85>)
```
 assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");

            con.rollback(savepoint);

            con.commit();
            assertEqualsRsValue("qwert2", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(8907,817,<262,3>,<274,76>)
```
 assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert1'") );
			assertEqualsRsValue("qwert1", "Select * from transactions");
			assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
			
            assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert2'") );
            assertEqualsRsValue("qwert2", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
            
			Savepoint savepoint = con.setSavepoint();
			
			assertEquals( 1, con.createStatement().executeUpdate("Update transactions set v='qwert 3'") );
			assertEqualsRsValue("qwert 3", "Select * from transactions");
			assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(10897,847,<305,12>,<317,85>)
```
 assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert1'"));
            assertEqualsRsValue("qwert1", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");

            assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert2'"));
            assertEqualsRsValue("qwert2", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");

            Savepoint savepoint = con.setSavepoint();

            assertEquals(1, con.createStatement().executeUpdate("Update transactions set v='qwert 3'"));
            assertEqualsRsValue("qwert 3", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(3576,237,<102,48>,<109,2>)
```
 {
		StringBuffer buf = new StringBuffer(bytes.length << 1);
		for(int i=0; i<bytes.length; i++){
			buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
			buf.append( digits[ (bytes[i]     ) & 0x0F ] );
		}
		return buf.toString();
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Utils.java|(6369,282,<205,43>,<212,5>)
```
 {
        StringBuffer buf = new StringBuffer(bytes.length << 1);
        for(int i=0; i<bytes.length; i++){
            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
            buf.append( digits[ (bytes[i]     ) & 0x0F ] );
        }
        return buf.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(8376,191,<249,4>,<253,32>)
```
 if(failed == null){
					failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
					failed.initCause(ex);
				}
				failed.setNextException(ex);
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSStatement.java|(7052,245,<271,16>,<275,44>)
```
 if(failed == null){
                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
                    failed.initCause(ex);
                }
                failed.setNextException(ex);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(3897,118,<114,4>,<115,81>)
```
 IndexNode node = status.nodes[idx];
				nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );
```
Location: |project://smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(4756,118,<143,4>,<144,81>)
```
 IndexNode node = status.nodes[idx];
				nodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(8233,314,<208,16>,<214,17>)
```
 // There are not the correct count of rows.
                if (count == 0){
                    createTestDataWithClassicInsert( con );
                    rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
                    rs.next();
                    count = rs.getInt(1);
                }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(13168,314,<322,16>,<328,17>)
```
 // There are not the correct count of rows.
                if (count == 0){
                    createTestDataWithClassicInsert( con );
                    rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
                    rs.next();
                    count = rs.getInt(1);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(17470,585,<422,13>,<433,37>)
```
 pr.setDouble(  8 , 23.45 );
	            pr.setDouble(  9 , 567.45 );
	            pr.setFloat (  10 , (float)78.89 );
	            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
	            pr.setShort (  12, (short)23456 );
	            pr.setFloat (  13, (float)34.56 );
	            pr.setString(  14, "sysname (30) NULL" );
	            pr.setString(  15 , "text NULL" );
	            pr.setByte  (  16, (byte)28 );
	            pr.setBytes (  17, byteArray );
	            pr.setString(  18, "varchar (255) NULL" );
	            pr.setInt   (  19 , i );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(22756,629,<530,17>,<541,41>)
```
 pr.setDouble(  8 , 23.45 );
	                pr.setDouble(  9 , 567.45 );
	                pr.setFloat (  10 , (float)78.89 );
	                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
	                pr.setShort (  12, (short)23456 );
	                pr.setFloat (  13, (float)34.56 );
	                pr.setString(  14, "sysname (30) NULL" );
	                pr.setString(  15 , "text NULL" );
	                pr.setByte  (  16, (byte)28 );
	                pr.setBytes (  17, byteArray );
	                pr.setString(  18, "varchar (255) NULL" );
	                pr.setInt   (  19 , i );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(6657,225,<169,12>,<171,52>)
```
 Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
            ResultSet rs = st.executeQuery("SELECT * FROM "+tableName);
            long time = -System.currentTimeMillis();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(10123,227,<256,12>,<258,52>)
```
 Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
            ResultSet rs = st.executeQuery("SELECT * FROM " + tableName);
            long time = -System.currentTimeMillis();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(13388,134,<382,3>,<384,20>)
```
 // the first digit include 0-null; 1-empty; 2 another value
			char digit = (i<0) ? (length == 0 ? (char)1 : 2)
							  : (key[i]);
```
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(13999,134,<407,3>,<409,20>)
```
 // the first digit include 0-null; 1-empty; 2 another value
			char digit = (i<0) ? (length == 0 ? (char)1 : 2)
							  : (key[i]);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(9233,132,<330,2>,<334,19>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Integer oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(11332,132,<415,2>,<419,19>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Integer oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(11996,132,<441,2>,<445,19>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Integer oldValue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(5932,171,<155,8>,<157,21>)
```
 Connection con = AllTests.getConnection();
        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(18508,159,<700,2>,<702,15>)
```
 Connection con = AllTests.getConnection();
		Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		ResultSet rs;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(19316,159,<731,2>,<733,15>)
```
 Connection con = AllTests.getConnection();
		Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		ResultSet rs;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(18762,470,<707,2>,<725,36>)
```
 //jetzt irgendwo in die Mitte scrollen
		rs.next();
		rs.next();
		rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen
		
		rs.last();
		count = 0;
		while(rs.previous()) count++;		
		assertEquals( valueCount, count );

		rs.beforeFirst();
		count = -1;
		while(rs.next()) count++;		
		assertEquals( valueCount, count );

		rs.beforeFirst();
		count = -1;
		while(rs.next()) count++;		
		assertEquals( valueCount, count );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(19578,470,<738,2>,<756,36>)
```
 //jetzt irgendwo in die Mitte scrollen
		rs.next();
		rs.next();
		rs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen
		
		rs.last();
		count = 0;
		while(rs.previous()) count++;		
		assertEquals( valueCount, count );

		rs.beforeFirst();
		count = -1;
		while(rs.next()) count++;		
		assertEquals( valueCount, count );

		rs.beforeFirst();
		count = -1;
		while(rs.next()) count++;		
		assertEquals( valueCount, count );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(18497,184,<699,2>,<703,12>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		ResultSet rs;
		int count;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(19305,184,<730,2>,<734,12>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
		ResultSet rs;
		int count;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionRound.java|(1636,311,<46,2>,<60,3>)
```
 if(isNull()) return 0;
		final int places = param2.getInt();
		double value = param1.getDouble();
		long factor = 1;
		if(places > 0){
			for(int i=0; i<places; i++){
				factor *= 10;
			}
			value *= factor;
		}else{
			for(int i=0; i>places; i--){
				factor *= 10;
			}
			value /= factor;
		}
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTruncate.java|(1645,311,<46,2>,<60,3>)
```
 if(isNull()) return 0;
		final int places = param2.getInt();
		double value = param1.getDouble();
		long factor = 1;
		if(places > 0){
			for(int i=0; i<places; i++){
				factor *= 10;
			}
			value *= factor;
		}else{
			for(int i=0; i>places; i--){
				factor *= 10;
			}
			value /= factor;
		}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(3944,131,<116,2>,<120,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(4631,131,<144,2>,<148,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5307,131,<171,2>,<175,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5976,131,<199,2>,<203,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6655,131,<227,2>,<231,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(7341,131,<255,2>,<259,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(8000,131,<281,2>,<285,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(8580,131,<304,2>,<308,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(20995,131,<789,2>,<793,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		String oldValue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(9682,325,<210,8>,<210,333>)
```
 String[] colNames = {"TYPE_NAME", "DATA_TYPE", "PRECISION", "LITERAL_PREFIX", "LITERAL_SUFFIX", "CREATE_PARAMS", "NULLABLE", "CASE_SENSITIVE", "SEARCHABLE", "UNSIGNED_ATTRIBUTE", "FIXED_PREC_SCALE", "AUTO_INCREMENT", "LOCAL_TYPE_NAME", "MINIMUM_SCALE", "MAXIMUM_SCALE", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "NUM_PREC_RADIX"};
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(20549,353,<831,2>,<831,355>)
```
 String[] colNames = {		"TYPE_NAME", 				"DATA_TYPE", 																	"PRECISION", 	"LITERAL_PREFIX", "LITERAL_SUFFIX", 		"CREATE_PARAMS", "NULLABLE", 	 "CASE_SENSITIVE", "SEARCHABLE", "UNSIGNED_ATTRIBUTE", "FIXED_PREC_SCALE", "AUTO_INCREMENT", "LOCAL_TYPE_NAME", "MINIMUM_SCALE", "MAXIMUM_SCALE", "SQL_DATA_TYPE", "SQL_DATETIME_SUB", "NUM_PREC_RADIX"};
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11049,208,<276,8>,<280,29>)
```
 pr.execute();
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11782,208,<291,8>,<295,29>)
```
 pr.execute();
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(8516,381,<255,3>,<260,76>)
```
 con.createStatement().execute("Create Table transactions ( v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			assertEquals( 1, con.createStatement().executeUpdate("Insert Into transactions(v) Values('qwert')") );
			assertEqualsRsValue("qwert", "Select * from transactions");
			assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(10358,414,<296,12>,<301,85>)
```
 con.createStatement().execute("Create Table transactions ( v varchar(20))");
            assertRowCount(0, "Select * from transactions");

            assertEquals(1, con.createStatement().executeUpdate("Insert Into transactions(v) Values('qwert')"));
            assertEqualsRsValue("qwert", "Select * from transactions");
            assertEqualsRsValue(new Integer(1), "Select count(*) from transactions");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(3733,462,<113,3>,<121,52>)
```
 con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
			assertRowCount( 1, "Select * from transactions");

			con.setAutoCommit(false);
			con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
			assertRowCount( 2, "Select * from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(5779,462,<172,3>,<180,52>)
```
 con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
			assertRowCount( 1, "Select * from transactions");

			con.setAutoCommit(false);
			con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
			assertRowCount( 2, "Select * from transactions");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(9825,179,<344,4>,<348,50>)
```
 //no more entries in this node
				shift += 16;
				listEnum.stack--;
				if(listEnum.stack<0) return -1; // no more entries
				result = listEnum.resultStack[listEnum.stack];
```
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(11152,179,<389,4>,<393,50>)
```
 //no more entries in this node
				shift += 16;
				listEnum.stack--;
				if(listEnum.stack<0) return -1; // no more entries
				result = listEnum.resultStack[listEnum.stack];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(19401,172,<581,8>,<584,48>)
```
 String catalog;
        String tableName = catalog = nextIdentifier();
        tableName = nextIdentiferPart(tableName);
        if(tableName == catalog) catalog = null;
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(31206,172,<883,8>,<886,48>)
```
 String catalog;
        String tableName = catalog = nextIdentifier();
        tableName = nextIdentiferPart(tableName);
        if(tableName == catalog) catalog = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(1889,79,<63,2>,<64,37>)
```
 puffer[ offset++ ] = (byte)(value >> 8);
		puffer[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(2125,79,<71,2>,<72,37>)
```
 puffer[ offset++ ] = (byte)(value >> 8);
		puffer[ offset++ ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(12418,210,<358,26>,<364,7>)
```
 {
							Iterator values = locks.values().iterator();
							while(values.hasNext()){
								TableStorePage lock = (TableStorePage)values.next();
								if(lock.con != con) return null;
							}
						}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(12930,210,<370,41>,<376,7>)
```
 {
							Iterator values = locks.values().iterator();
							while(values.hasNext()){
								TableStorePage lock = (TableStorePage)values.next();
								if(lock.con != con) return null;
							}
						}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(13637,315,<388,55>,<394,21>)
```
 {
                        Iterator values = locks.values().iterator();
                        while(values.hasNext()){
                            TableStorePage lock = (TableStorePage)values.next();
                            if(lock.con != con) return null;
                        }
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(2134,171,<79,8>,<82,45>)
```
 ArrayList threadList = new ArrayList();
        throwable = null;
        final Connection con = AllTests.getConnection();
        Statement st = con.createStatement();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(4003,165,<131,8>,<134,45>)
```
 ArrayList threadList = new ArrayList();
        throwable = null;
        Connection con = AllTests.getConnection();
        Statement st = con.createStatement();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(1525,308,<59,8>,<68,9>)
```
 // wait until all threads are finish
        for(int i = 0; i < threadList.size(); i++){
            Thread thread = (Thread)threadList.get(i);
            thread.join(5000);
        }

        // throw the exception if one occur
        if(throwable != null){
            throw throwable;
        }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(3208,340,<106,12>,<115,13>)
```
 // wait until all threads are finish
            for(int i = 0; i < threadList.size(); i++){
                Thread thread = (Thread)threadList.get(i);
                thread.join(5000);
            }

            // throw the exception if one occur
            if(throwable != null){
                throw throwable;
            }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(5191,340,<160,12>,<169,13>)
```
 // wait until all threads are finish
            for(int i = 0; i < threadList.size(); i++){
                Thread thread = (Thread)threadList.get(i);
                thread.join(5000);
            }

            // throw the exception if one occur
            if(throwable != null){
                throw throwable;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(16080,183,<448,6>,<451,52>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
			IndexDescriptions indexes = ((Table)tab).indexes;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(17481,183,<484,6>,<487,52>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
			IndexDescriptions indexes = ((Table)tab).indexes;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(18590,183,<516,6>,<519,52>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
			IndexDescriptions indexes = ((Table)tab).indexes;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionConvert.java|(4154,146,<142,29>,<146,5>)
```
 {
					byte[] buffer = new byte[length];
					System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );
					return buffer;
				}
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionConvert.java|(4476,146,<153,30>,<157,5>)
```
 {
					byte[] buffer = new byte[length];
					System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );
					return buffer;
				}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(3062,385,<89,5>,<99,6>)
```
 if(status.nodeValue != null){
						if(status.nodeValue instanceof IndexNode){
							level++;
							nodeStack.push(
								new IndexNodeScrollStatus( 	(IndexNode)status.nodeValue, 
														(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), 
														scroll, level));
							continue;
						}else
							return getReturnValue(status.nodeValue);
					}
```
Location: |project://smallsql0.21_src/src/smallsql/database/IndexScrollStatus.java|(4100,428,<120,5>,<131,41>)
```
 if(status.nodeValue != null){
						if(status.nodeValue instanceof IndexNode){
							level++;
							nodeStack.push(
								new IndexNodeScrollStatus( 	(IndexNode)status.nodeValue, 
														(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), 
														scroll, level));
							continue;
						}else
							return getReturnValue(status.nodeValue);
					}
					//There is no RowOffset in this node
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(26188,386,<618,12>,<625,52>)
```
 java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+".bin");
            byte bytes[] = new byte[1024];
            for(int i=0; i<rowCount; i++){
                fos.write(bytes);
            }
            fos.close();
            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+".bin");
            long time = -System.currentTimeMillis();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(27620,386,<655,12>,<662,52>)
```
 java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+".bin");
            byte bytes[] = new byte[1024];
            for(int i=0; i<rowCount; i++){
                fos.write(bytes);
            }
            fos.close();
            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+".bin");
            long time = -System.currentTimeMillis();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(17112,904,<415,13>,<432,55>)
```
 pr.setBytes (  1, byteArray );
	            pr.setString(  2 , "Test" );
	            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );
	            pr.setFloat (  4, (float)1234.56789 );
	            pr.setFloat (  5 , (float)9876.54321 );
	            pr.setBytes (  6, largeByteArray );
	            pr.setInt   (  7 , i );
	            pr.setDouble(  8 , 23.45 );
	            pr.setDouble(  9 , 567.45 );
	            pr.setFloat (  10 , (float)78.89 );
	            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
	            pr.setShort (  12, (short)23456 );
	            pr.setFloat (  13, (float)34.56 );
	            pr.setString(  14, "sysname (30) NULL" );
	            pr.setString(  15 , "text NULL" );
	            pr.setByte  (  16, (byte)28 );
	            pr.setBytes (  17, byteArray );
	            pr.setString(  18, "varchar (255) NULL" );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(19913,904,<469,13>,<486,55>)
```
 pr.setBytes (  1, byteArray );
	            pr.setString(  2 , "Test" );
	            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );
	            pr.setFloat (  4, (float)1234.56789 );
	            pr.setFloat (  5 , (float)9876.54321 );
	            pr.setBytes (  6, largeByteArray );
	            pr.setInt   (  7 , i );
	            pr.setDouble(  8 , 23.45 );
	            pr.setDouble(  9 , 567.45 );
	            pr.setFloat (  10 , (float)78.89 );
	            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );
	            pr.setShort (  12, (short)23456 );
	            pr.setFloat (  13, (float)34.56 );
	            pr.setString(  14, "sysname (30) NULL" );
	            pr.setString(  15 , "text NULL" );
	            pr.setByte  (  16, (byte)28 );
	            pr.setBytes (  17, byteArray );
	            pr.setString(  18, "varchar (255) NULL" );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexDescription.java|(5498,269,<173,12>,<178,42>)
```
 raFile = Utils.openRaFile( file, database.isReadOnly() );
            ByteBuffer buffer = ByteBuffer.allocate(8);
            raFile.read(buffer);
            buffer.position(0);
            int magic   = buffer.getInt();
            int version = buffer.getInt();
```
Location: |project://smallsql0.21_src/src/smallsql/database/TableView.java|(3030,224,<85,3>,<90,33>)
```
 raFile = Utils.openRaFile( file, database.isReadOnly() );
			ByteBuffer buffer = ByteBuffer.allocate(8);
			raFile.read(buffer);
			buffer.position(0);
			int magic   = buffer.getInt();
			int version = buffer.getInt();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(7993,185,<203,12>,<206,37>)
```
 Statement st1 = con.createStatement();
            ResultSet rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
            rs.next();
            int count = rs.getInt(1);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BenchTest.java|(12928,185,<317,12>,<320,37>)
```
 Statement st1 = con.createStatement();
            ResultSet rs = st1.executeQuery( "SELECT count(*) FROM " + tableName);
            rs.next();
            int count = rs.getInt(1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(2641,270,<78,8>,<83,45>)
```
 rs.beforeFirst();
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("next", rs.next() );
        assertTrue("isFirst", rs.isFirst() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(4557,270,<121,8>,<126,45>)
```
 rs.beforeFirst();
        assertTrue("isBeforeFirst", rs.isBeforeFirst() );
        assertFalse("isAfterLast", rs.isAfterLast() );
        assertEquals("getRow", 0, rs.getRow() );
        assertTrue("next", rs.next() );
        assertTrue("isFirst", rs.isFirst() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(7986,244,<203,8>,<208,60>)
```
 assertNotSame("getObject", value, rs.getObject("c"));
        
        //method next
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(8570,244,<217,8>,<222,60>)
```
 assertNotSame("getObject", value, rs.getObject("c"));
        
        //method last
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(8864,247,<224,8>,<229,60>)
```
 assertNotSame("getObject", value, rs.getObject("c"));
        
        //method refresh
        assertTrue("start", rs.first());
        rs.updateObject("c", value, Types.VARCHAR );
        assertEquals("getObject", value, rs.getObject("c"));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(3757,189,<101,12>,<106,50>)
```
 if(page == null)
                return null;
            if(i + 1 == count)
                return page.getValue();
            else
                page = (IndexNode)page.getValue();
```
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(4784,189,<128,12>,<133,50>)
```
 if(page == null)
                return null;
            if(i + 1 == count)
                return page.getValue();
            else
                page = (IndexNode)page.getValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6193,386,<207,2>,<222,36>)
```
 assertTrue( rs.next() );
		oldValue = rs.getString("v");
		
		int count = 1;
		while(oldValue != null && rs.next()){
			String newValue = rs.getString("v");
			if(newValue != null){
				assertTrue( oldValue.compareTo( newValue ) > 0 );
				count++;
			}
			oldValue = newValue;
		}
		assertNull(oldValue);
		assertFalse( rs.next() );

		assertEquals( valueCount, count );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(6879,386,<235,2>,<250,36>)
```
 assertTrue( rs.next() );
		oldValue = rs.getString("v");
		
		int count = 1;
		while(oldValue != null && rs.next()){
			String newValue = rs.getString("v");
			if(newValue != null){
				assertTrue( oldValue.compareTo( newValue ) > 0 );
				count++;
			}
			oldValue = newValue;
		}
		assertNull(oldValue);
		assertFalse( rs.next() );

		assertEquals( valueCount, count );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(5696,155,<187,2>,<192,3>)
```
 while(rs.next()){
			String newValue = rs.getString("v");
			assertTrue( oldValue.compareTo( newValue ) < 0 );
			oldValue = newValue;
			count++;
		}
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(21626,155,<811,2>,<816,3>)
```
 while(rs.next()){
			String newValue = rs.getString("v");
			assertTrue( oldValue.compareTo( newValue ) < 0 );
			oldValue = newValue;
			count++;
		}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(3598,140,<109,4>,<110,71>)
```
 DateTime.Details details2 = new DateTime.Details(param2.getLong());
				DateTime.Details details1 = new DateTime.Details(param1.getLong());
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(3881,140,<114,4>,<115,71>)
```
 DateTime.Details details2 = new DateTime.Details(param2.getLong());
				DateTime.Details details1 = new DateTime.Details(param1.getLong());
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4167,140,<119,4>,<120,71>)
```
 DateTime.Details details2 = new DateTime.Details(param2.getLong());
				DateTime.Details details1 = new DateTime.Details(param1.getLong());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(12642,148,<315,4>,<316,60>)
```
 String message = "Check DisplaySize: " + expectedLen + "!=" + Integer.MAX_VALUE + ")";
				assertTrue( message, expectedLen == Integer.MAX_VALUE );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(12990,148,<323,4>,<324,60>)
```
 String message = "Check DisplaySize: " + expectedLen + "!=" + Integer.MAX_VALUE + ")";
				assertTrue( message, expectedLen == Integer.MAX_VALUE );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(8477,237,<182,8>,<186,49>)
```
 assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertFalse( "To many rows", rs.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(9914,237,<213,8>,<217,49>)
```
 assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertFalse( "To many rows", rs.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(10735,219,<234,2>,<238,43>)
```
 assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
		assertFalse( "To many rows", rs.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexNode.java|(10409,110,<349,2>,<351,36>)
```
 int mid = start + (end - start)/2;
		char nodeDigit = nodes[mid].digit;
		if(nodeDigit == digit) return mid;
```
Location: |project://smallsql0.21_src/src/smallsql/database/IndexNode.java|(10916,110,<368,2>,<370,36>)
```
 int mid = start + (end - start)/2;
		char nodeDigit = nodes[mid].digit;
		if(nodeDigit == digit) return mid;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(2798,336,<84,3>,<90,52>)
```
 assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
			assertRowCount( 1, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
			assertRowCount( 2, "Select * from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(4837,336,<143,3>,<149,52>)
```
 assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
			assertRowCount( 1, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
			assertRowCount( 2, "Select * from transactions");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(10636,306,<268,8>,<273,29>)
```
 assertEquals(1,pr.executeUpdate());
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11362,306,<283,8>,<288,29>)
```
 assertEquals(1,pr.executeUpdate());
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(12100,306,<298,8>,<303,29>)
```
 assertEquals(1,pr.executeUpdate());
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(6757,395,<199,3>,<205,62>)
```
 con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");

			ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)
								.executeQuery("Select * from transactions Where 1=0");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(13058,395,<349,3>,<355,62>)
```
 con.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");

			ResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)
								.executeQuery("Select * from transactions Where 1=0");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(12014,232,<352,5>,<357,6>)
```
 try{
						int maxRows = Integer.parseInt(token.getName(sql));
						selCmd.setMaxRows(maxRows);
					}catch(NumberFormatException e){
						throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));
					}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(74449,256,<1932,8>,<1937,9>)
```
 try{
            int maxRows = Integer.parseInt(token.getName(sql));
            selCmd.setMaxRows(maxRows);
        }catch(NumberFormatException e){
            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(6409,261,<191,47>,<196,5>)
```
 {
        try{
            return Double.parseDouble( val ) != 0;
        }catch(NumberFormatException e){/*ignore it if it not a number*/}
        return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/Utils.java|(11192,261,<317,46>,<322,5>)
```
 {
        try{
            return Double.parseDouble( val ) != 0;
        }catch(NumberFormatException e){/*ignore it if it not a number*/}
        return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(12895,376,<370,6>,<379,74>)
```
 if(serializeConnections.size() > 0){
							Iterator values = locks.values().iterator();
							while(values.hasNext()){
								TableStorePage lock = (TableStorePage)values.next();
								if(lock.con != con) return null;
							}
						}
						tabLockConnection = con;
						tabLockCount++;
						TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);
```
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(13602,523,<388,20>,<397,88>)
```
 if(serializeConnections.size() > 0){
                        Iterator values = locks.values().iterator();
                        while(values.hasNext()){
                            TableStorePage lock = (TableStorePage)values.next();
                            if(lock.con != con) return null;
                        }
                    }
                    tabLockConnection = con;
                    tabLockCount++;
                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(3208,431,<106,12>,<117,87>)
```
 // wait until all threads are finish
            for(int i = 0; i < threadList.size(); i++){
                Thread thread = (Thread)threadList.get(i);
                thread.join(5000);
            }

            // throw the exception if one occur
            if(throwable != null){
                throw throwable;
            }

            assertEqualsRsValue(new Integer(200), "SELECT value FROM ConcurrentWrite");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestThreads.java|(5191,431,<160,12>,<171,87>)
```
 // wait until all threads are finish
            for(int i = 0; i < threadList.size(); i++){
                Thread thread = (Thread)threadList.get(i);
                thread.join(5000);
            }

            // throw the exception if one occur
            if(throwable != null){
                throw throwable;
            }

            assertEqualsRsValue(new Integer(200), "SELECT value FROM ConcurrentWrite");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(12968,123,<665,2>,<666,85>)
```
 Object[][] data   = new Object[0][];
		return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(13465,123,<672,2>,<673,85>)
```
 Object[][] data   = new Object[0][];
		return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(15526,123,<732,2>,<733,85>)
```
 Object[][] data   = new Object[0][];
		return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(34739,123,<952,2>,<953,85>)
```
 Object[][] data   = new Object[0][];
		return new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionLeft.java|(1700,173,<53,2>,<58,30>)
```
 if(isNull()) return null;
		byte[] bytes = param1.getBytes();
		int length = param2.getInt();
		if(bytes.length <= length) return bytes;

		byte[] b = new byte[length];
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionRight.java|(1703,173,<53,2>,<58,30>)
```
 if(isNull()) return null;
		byte[] bytes = param1.getBytes();
		int length = param2.getInt();
		if(bytes.length <= length) return bytes;

		byte[] b = new byte[length];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestFunctions.java|(22546,279,<374,26>,<383,5>)
```
 {
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(3075,279,<68,26>,<77,5>)
```
 {
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5171,279,<95,26>,<104,5>)
```
 {
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java|(1809,279,<53,26>,<62,5>)
```
 {
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(14353,129,<405,6>,<407,40>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(16080,129,<448,6>,<450,40>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(17481,129,<484,6>,<486,40>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(18590,129,<516,6>,<518,40>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
```


****************************************
******** Type 2 clone detection ********
****************************************
*****************************
** Clone percentage
** 3.861101724%
*****************************
** Number of clone classes:
** 68
*****************************
** Number of clones:
** 155
*****************************
** Size (SLOC) of largest clone: 
** 23
*****************************
** The largest clones:
** {|project://smallsql0.21_src/src/smallsql/junit/TestJoins.java|(6284,837,<128,69>,<156,5>)}
** The largest clones in code:
** 
** largest clone number: 1
** {
            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, null);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, null);
            pr.execute();
    }
**

*****************************
** The largest clone classes in SLOC:
** 44
*****************************
** The largest clone classes (loc):
** {[|project://smallsql0.21_src/src/smallsql/junit/TestJoins.java|(6284,837,<128,69>,<156,5>),|project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5879,815,<115,12>,<141,25>)],[|project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionMinute.java|(0,1729,<1,0>,<54,3>),|project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionYear.java|(0,1722,<1,0>,<54,3>),|project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionHour.java|(0,1721,<1,0>,<54,3>),|project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionDayOfMonth.java|(0,1738,<1,0>,<54,3>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** {
            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, null);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, null);
            pr.execute();
    }
**
pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, null);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, null);
            pr.execute();
**

** largest clone class number: 2
** /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionMinute.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.MINUTE;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.minute;
	}

}

**
/* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionMonth.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 17.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionYear extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.YEAR;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.year;
	}

}

**
/* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionHour.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionHour extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.HOUR;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.hour;
	}

}

**
/* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionDayOfMonth.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.DAYOFMONTH;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.day;
	}

}

**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 2             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(3402,367,<100,8>,<106,48>)
```
 theSuite.addTestSuite( TestAlterTable.class );
        theSuite.addTestSuite( TestAlterTable2.class );
        theSuite.addTest    ( TestDataTypes.suite() );
        theSuite.addTestSuite(TestDBMetaData.class);
		theSuite.addTestSuite(TestExceptionMethods.class);
		theSuite.addTest     (TestExceptions.suite());
		theSuite.addTestSuite(TestDeleteUpdate.class);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(3823,333,<108,2>,<114,43>)
```
 theSuite.addTestSuite(TestGroupBy.class);
		theSuite.addTestSuite(TestIdentifer.class);
		theSuite.addTest     (TestJoins.suite());
        theSuite.addTestSuite(TestLanguage.class);
		theSuite.addTestSuite(TestMoneyRounding.class );
		theSuite.addTest     (TestOperatoren.suite() );
		theSuite.addTestSuite(TestOrderBy.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(25293,379,<845,3>,<845,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionMonth.java|(0,1727,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionMonth.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 17.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.MONTH;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.month+1;
	}

}

```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionDayOfYear.java|(0,1743,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionDayOfYear.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.DAYOFYEAR;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.dayofyear+1;
	}

}

```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(34427,250,<925,2>,<932,29>)
```
 if(dataTypeIdx >= NVARCHAR_IDX)
			return SQLTokenizer.DOUBLE;
		if(dataTypeIdx >= INT_IDX)
			return SQLTokenizer.INT;
		if(dataTypeIdx >= BIGINT_IDX)
			return SQLTokenizer.BIGINT;
		if(dataTypeIdx >= MONEY_IDX)
			return SQLTokenizer.MONEY;
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionArithmetic.java|(34494,250,<927,2>,<934,31>)
```
 if(dataTypeIdx >= INT_IDX)
			return SQLTokenizer.INT;
		if(dataTypeIdx >= BIGINT_IDX)
			return SQLTokenizer.BIGINT;
		if(dataTypeIdx >= MONEY_IDX)
			return SQLTokenizer.MONEY;
		if(dataTypeIdx >= DECIMAL_IDX)
			return SQLTokenizer.DECIMAL;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionSubstring.java|(1877,205,<58,2>,<61,84>)
```
 int start  = Math.min( Math.max( 0, param2.getInt() - 1), byteLen);
		int length = param3.getInt();
		if(length < 0) 
			throw SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionSubstring.java|(2547,204,<79,2>,<82,84>)
```
 int start  = Math.min( Math.max( 0, param2.getInt() - 1), strLen);
		int length = param3.getInt();
		if(length < 0) 
			throw SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6231,322,<173,4>,<182,5>)
```
 public Time getTime(int i) throws SQLException {
        try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(6153,342,<180,4>,<189,5>)
```
 public Time getTime(int columnIndex) throws SQLException {
        try{
			Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5903,322,<163,4>,<172,5>)
```
 public Date getDate(int i) throws SQLException {
        try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(5793,342,<168,4>,<177,5>)
```
 public Date getDate(int columnIndex) throws SQLException {
        try{
			Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(3478,96,<124,1>,<126,2>)
```
 int readShort(){
		return ((puffer[ offset++ ] & 0xFF) << 8) | (puffer[ offset++ ] & 0xFF);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(16812,165,<588,1>,<593,2>)
```
 /**
	 * Read a short value from the index.
	 */
	final private int getUnsignedShort(){
		return ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);
	}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(12683,131,<468,2>,<472,18>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Double oldValue;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOrderBy.java|(13334,130,<494,2>,<498,17>)
```
 init();
		Connection con = AllTests.getConnection();
		Statement st = con.createStatement();
		ResultSet rs;
		Float oldValue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/View.java|(4310,265,<137,1>,<144,2>)
```
 @Override
    void writeMagic(FileChannel raFile) throws Exception{
        ByteBuffer buffer = ByteBuffer.allocate(8);
        buffer.putInt(MAGIC_VIEW);
        buffer.putInt(TABLE_VIEW_VERSION);
        buffer.position(0);
        raFile.write(buffer);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/IndexDescription.java|(6808,245,<213,1>,<219,2>)
```
 private final void writeMagic(FileChannel raFile) throws Exception{
	    ByteBuffer buffer = ByteBuffer.allocate(8);
	    buffer.putInt(MAGIC_INDEX);
	    buffer.putInt(INDEX_VERSION);
	    buffer.position(0);
	    raFile.write(buffer);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Table.java|(7421,266,<220,1>,<227,2>)
```
 @Override
    void writeMagic(FileChannel raFile) throws Exception{
        ByteBuffer buffer = ByteBuffer.allocate(8);
        buffer.putInt(MAGIC_TABLE);
        buffer.putInt(TABLE_VIEW_VERSION);
        buffer.position(0);
        raFile.write(buffer);
	}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(12843,364,<358,3>,<372,4>)
```
 node = node.addNode(digit);
			if(node.isEmpty()){
				if(isLastValue){
					node.addRemainderKey( rowOffset, key, i );
					return null;
				}
				return node.addRootValue( key, i);
			}else
			if(equals(node.getRemainderValue(), key, i)){
				if(isLastValue){
					node.saveValue( rowOffset);
					return null;
				}
				return node.addRoot();
			}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Index.java|(14283,354,<417,3>,<431,4>)
```
 node = node.addNode(digit);
			if(node.isEmpty()){
				if(isLast){
					node.addRemainderKey( rowOffset, key, i );
					return null;
				}
				return node.addRootValue( key, i );
			}else
			if(equals(node.getRemainderValue(), key, i)){
				if(isLast){
					node.saveValue(rowOffset);
					return null;
				}
				return node.addRoot();
			}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4845,175,<104,8>,<104,183>)
```
 int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(14141,198,<281,8>,<281,206>)
```
 int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(8442,320,<183,8>,<184,44>)
```
 int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};
		assertRSMetaData( rs, colNames, colTypes);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(10017,331,<211,8>,<212,49>)
```
 int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };
        assertRSMetaData(rs, colNames, colTypes);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexNode.java|(6480,873,<229,1>,<244,2>)
```
 /**
	 * Add a value on a tree node end without roll out the completly tree.
	 * This reduce the size of the tree if there are large enties with a high significance.
	 * for example: 
	 * If you have large strings which are different on the on the first 3 charchters. 
	 * Then you need only a tree size of 3. 
	 * @param digit 	 The digit must be in the range 0 between 255.
	 * @param rowOffset  The result value. This is the value that is saved in the tree.
	 * @param value 	 The key value.
	 * @param digitCount The count of digits from value that need to indexing in the tree. 
	 * 					 The range is from 1 to 3;  
	 */
	final void addRemainderKey(long rowOffset, long remainderValue, int charCount) throws SQLException{
		saveRemainderValue(remainderValue, charCount);
		value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/IndexNode.java|(7362,230,<247,1>,<250,2>)
```
 final void addRemainderKey(long rowOffset, char[] remainderValue, int offset) throws SQLException{
		saveRemainderValue(remainderValue, offset);
		value = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);
	}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23847,348,<841,3>,<841,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(31480,341,<862,3>,<862,344>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     		  Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(31827,342,<863,3>,<863,345>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     	  Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28658,351,<854,3>,<854,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27925,370,<852,3>,<852,373>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Utils.java|(5534,319,<179,8>,<186,34>)
```
 result[0] = (byte)(value >> 56);
        result[1] = (byte)(value >> 48);
        result[2] = (byte)(value >> 40);
        result[3] = (byte)(value >> 32);
        result[4] = (byte)(value >> 24);
        result[5] = (byte)(value >> 16);
        result[6] = (byte)(value >> 8);
        result[7] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/Identity.java|(2300,277,<71,2>,<78,28>)
```
 page[ 0 ] = (byte)(value >> 56);
		page[ 1 ] = (byte)(value >> 48);
		page[ 2 ] = (byte)(value >> 40);
		page[ 3 ] = (byte)(value >> 32);
		page[ 4 ] = (byte)(value >> 24);
		page[ 5 ] = (byte)(value >> 16);
		page[ 6 ] = (byte)(value >> 8);
		page[ 7 ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestResultSet.java|(10767,339,<273,8>,<280,46>)
```
 rs.setFetchDirection(ResultSet.FETCH_FORWARD);
        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_FORWARD);

        rs.setFetchDirection(ResultSet.FETCH_REVERSE);
        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_REVERSE);
        
        rs.setFetchSize(123);
        assertEquals( rs.getFetchSize(), 123);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(6328,339,<172,8>,<179,46>)
```
 st.setFetchDirection(ResultSet.FETCH_FORWARD);
        assertEquals( st.getFetchDirection(), ResultSet.FETCH_FORWARD);

        st.setFetchDirection(ResultSet.FETCH_REVERSE);
        assertEquals( st.getFetchDirection(), ResultSet.FETCH_REVERSE);
        
        st.setFetchSize(123);
        assertEquals( st.getFetchSize(), 123);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(77660,504,<1969,28>,<1969,532>)
```
 MISSING_SQL_DATATYPE = { SQLTokenizer.SQL_BIGINT , SQLTokenizer.SQL_BINARY , SQLTokenizer.SQL_BIT , SQLTokenizer.SQL_CHAR , SQLTokenizer.SQL_DATE , SQLTokenizer.SQL_DECIMAL , SQLTokenizer.SQL_DOUBLE , SQLTokenizer.SQL_FLOAT , SQLTokenizer.SQL_INTEGER , SQLTokenizer.SQL_LONGVARBINARY , SQLTokenizer.SQL_LONGVARCHAR , SQLTokenizer.SQL_REAL , SQLTokenizer.SQL_SMALLINT , SQLTokenizer.SQL_TIME , SQLTokenizer.SQL_TIMESTAMP , SQLTokenizer.SQL_TINYINT , SQLTokenizer.SQL_VARBINARY , SQLTokenizer.SQL_VARCHAR }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(8448,267,<183,14>,<183,281>)
```
 colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR}
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(10023,273,<211,14>,<211,287>)
```
 colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestJoins.java|(6284,837,<128,69>,<156,5>)
```
 {
            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, null);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, null);
            pr.execute();
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5879,815,<115,12>,<141,25>)
```
 pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.large);
            pr.execute();

            pr.setObject( 1, testValue.large);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, testValue.small);
            pr.execute();

            pr.setObject( 1, testValue.small);
            pr.setObject( 2, null);
            pr.execute();

            pr.setObject( 1, null);
            pr.setObject( 2, null);
            pr.execute();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(4339,162,<157,1>,<162,2>)
```
 byte[] readBytes(int length){
		byte[] bytes = new byte[length];
		System.arraycopy(puffer, offset, bytes, 0, length);
		offset += length;
		return bytes;
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(17929,188,<523,4>,<528,5>)
```
 byte[] readBytes(int length){
        byte[] daten = new byte[length];
        System.arraycopy( page, offset, daten, 0, length);
        offset += length;
        return daten;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4628,294,<126,4>,<134,5>)
```
 public float getFloat(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(4436,314,<131,4>,<139,5>)
```
 public float getFloat(int columnIndex) throws SQLException {
        try{
            Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexDescription.java|(5387,380,<171,12>,<178,42>)
```
 if(!file.exists())
                throw SmallSQLException.create(Language.INDEX_MISSING, name);
            raFile = Utils.openRaFile( file, database.isReadOnly() );
            ByteBuffer buffer = ByteBuffer.allocate(8);
            raFile.read(buffer);
            buffer.position(0);
            int magic   = buffer.getInt();
            int version = buffer.getInt();
```
Location: |project://smallsql0.21_src/src/smallsql/database/TableView.java|(2932,322,<83,3>,<90,33>)
```
 if(!file.exists())
				throw SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);
			raFile = Utils.openRaFile( file, database.isReadOnly() );
			ByteBuffer buffer = ByteBuffer.allocate(8);
			raFile.read(buffer);
			buffer.position(0);
			int magic   = buffer.getInt();
			int version = buffer.getInt();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5610,287,<154,4>,<162,5>)
```
 public byte[] getBytes(int i) throws SQLException {
        try{
            byte[] obj = getValue(i).getBytes();
            wasNull = obj == null;
            return obj;
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(5480,307,<159,4>,<167,5>)
```
 public byte[] getBytes(int columnIndex) throws SQLException {
        try{
            byte[] obj = getValue(columnIndex).getBytes();
            wasNull = obj == null;
            return obj;
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(7224,359,<202,4>,<211,5>)
```
 public BigDecimal getBigDecimal(int i) throws SQLException {
        try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(11116,379,<319,4>,<328,5>)
```
 public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
        try{
            MutableNumeric obj = getValue(columnIndex).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Language/Language.java|(12108,343,<292,33>,<306,2>)
```
 {
		Set inserted = new HashSet(); // for duplicates checking
		
		for (int i = 0; i < entries.length; i++) {
			String key = entries[i][0];
			
			if (! inserted.add(key)) {
				throw new IllegalArgumentException("Duplicate key: " + key);
			}
			else {
				String value = entries[i][1];
				messages.put(key, value);
			}
		}
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Language/Language.java|(12780,353,<318,35>,<332,2>)
```
 {
		Set inserted = new HashSet(); // for duplicates checking
		
		for (int i = 0; i < SQL_STATES.length; i++) {
			String key = SQL_STATES[i][0];
			
			if (! inserted.add(key)) {
				throw new IllegalArgumentException("Duplicate key: " + key);
			}
			else {
				String value = SQL_STATES[i][1];
				sqlStates.put(key, value);
			}
		}
	}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(12776,243,<409,4>,<414,54>)
```
 TableView table = result.getTableView();
				Columns tableColumns = table.columns;
				int count = tableColumns.size();
				
				// order the new Values after it position in the table
				Expression[] updateValues = new Expression[count];
```
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(14343,236,<453,3>,<458,53>)
```
 TableView table = result.getTableView();
			Columns tabColumns = table.columns;
			int count = tabColumns.size();
					
			// order the new Values after it position in the table
			Expression[] updateValues = new Expression[count];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(14039,166,<445,2>,<448,59>)
```
 if(tables.size() > 1)
			throw SmallSQLException.create(Language.JOIN_INSERT);
		if(tables.size() == 0)
			throw SmallSQLException.create(Language.INSERT_WO_FROM);
```
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(15620,169,<489,3>,<492,60>)
```
 if(tables.size() > 1)
				throw SmallSQLException.create(Language.JOIN_DELETE);
			if(tables.size() == 0)
				throw SmallSQLException.create(Language.DELETE_WO_FROM);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15019,466,<409,3>,<417,28>)
```
 con2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );
			con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con1.setAutoCommit(false);
			con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");

			ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
			assertTrue( rs2.next() );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15801,464,<431,3>,<439,28>)
```
 con2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );
			con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con1.setAutoCommit(false);
			con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");

			ResultSet rs2 = con2.createStatement().executeQuery("Select count(*) from transactions");
			assertTrue( rs2.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4208,115,<94,8>,<94,123>)
```
 int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(12939,138,<264,8>,<264,146>)
```
 int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(3529,284,<102,1>,<109,2>)
```
 private static String bytes2hex( byte[] bytes ){
		StringBuffer buf = new StringBuffer(bytes.length << 1);
		for(int i=0; i<bytes.length; i++){
			buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
			buf.append( digits[ (bytes[i]     ) & 0x0F ] );
		}
		return buf.toString();
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/Utils.java|(6330,321,<205,4>,<212,5>)
```
 static String bytes2hex( byte[] bytes ){
        StringBuffer buf = new StringBuffer(bytes.length << 1);
        for(int i=0; i<bytes.length; i++){
            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );
            buf.append( digits[ (bytes[i]     ) & 0x0F ] );
        }
        return buf.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(6282,388,<188,4>,<196,5>)
```
 /**
     * Identical to the Implementation from Utils.string2boolean
     */
    private boolean string2boolean( String val){
        try{
            return Double.parseDouble( val ) != 0;
        }catch(NumberFormatException e){/*ignore it if it not a number*/}
        return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/Utils.java|(11150,303,<317,4>,<322,5>)
```
 static boolean string2boolean( String val){
        try{
            return Double.parseDouble( val ) != 0;
        }catch(NumberFormatException e){/*ignore it if it not a number*/}
        return "true".equalsIgnoreCase( val ) || "yes".equalsIgnoreCase( val ) || "t".equalsIgnoreCase( val );
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(3723,337,<106,2>,<112,50>)
```
 theSuite.addTestSuite(TestDeleteUpdate.class);
		theSuite.addTest     (TestFunctions.suite() );
		theSuite.addTestSuite(TestGroupBy.class);
		theSuite.addTestSuite(TestIdentifer.class);
		theSuite.addTest     (TestJoins.suite());
        theSuite.addTestSuite(TestLanguage.class);
		theSuite.addTestSuite(TestMoneyRounding.class );
```
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(3868,331,<109,2>,<115,41>)
```
 theSuite.addTestSuite(TestIdentifer.class);
		theSuite.addTest     (TestJoins.suite());
        theSuite.addTestSuite(TestLanguage.class);
		theSuite.addTestSuite(TestMoneyRounding.class );
		theSuite.addTest     (TestOperatoren.suite() );
		theSuite.addTestSuite(TestOrderBy.class);
		theSuite.addTestSuite(TestOther.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3537,300,<93,4>,<101,5>)
```
 public boolean getBoolean(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(3244,320,<98,4>,<106,5>)
```
 public boolean getBoolean(int columnIndex) throws SQLException {
        try{
            Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6559,364,<183,4>,<192,5>)
```
 public Timestamp getTimestamp(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(6501,357,<190,4>,<199,5>)
```
 public Timestamp getTimestamp(int columnIndex) throws SQLException {
        try{
			Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13042,139,<361,8>,<364,41>)
```
 if(newSize > page.length) resizePage(newSize);

        page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(18576,153,<539,8>,<542,48>)
```
 if(newSize > page.length) resizePage(newSize);

        page[ offset++ ] = (byte)(lengthColumn >> 8);
        page[ offset++ ] = (byte)(lengthColumn);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(5508,205,<162,4>,<165,5>)
```
 public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        checkStatement();
		cmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARCHAR, length);
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(6060,208,<175,4>,<178,5>)
```
 public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        checkStatement();
		cmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARBINARY, length);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(7741,116,<193,5>,<195,20>)
```
 byte[] newPage = new byte[newSize];
    	System.arraycopy( page, 0, newPage, 0, page.length);
    	page = newPage;
```
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(17540,100,<615,2>,<617,14>)
```
 byte[] temp = new byte[newsize];
		System.arraycopy(data, 0, temp, 0, data.length);
		data = temp;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSConnection.java|(11684,249,<373,4>,<377,5>)
```
 public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        SSPreparedStatement pr = new SSPreparedStatement( this, sql);
        pr.setNeedGeneratedKeys(autoGeneratedKeys);
        return pr;
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSConnection.java|(11951,243,<380,4>,<384,5>)
```
 public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        SSPreparedStatement pr = new SSPreparedStatement( this, sql);
        pr.setNeedGeneratedKeys(columnIndexes);
        return pr;
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSConnection.java|(12212,242,<387,4>,<391,5>)
```
 public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        SSPreparedStatement pr = new SSPreparedStatement( this, sql);
        pr.setNeedGeneratedKeys(columnNames);
        return pr;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(4875,188,<144,4>,<147,5>)
```
 public void setDate(int parameterIndex, Date x) throws SQLException {
        checkStatement();
        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.DATE);
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(5081,188,<150,4>,<153,5>)
```
 public void setTime(int parameterIndex, Time x) throws SQLException {
        checkStatement();
        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIME);
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(5287,203,<156,4>,<159,5>)
```
 public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        checkStatement();
        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(4356,498,<125,8>,<137,9>)
```
 if(needTrim && obj1 != null){
            // trim for CHAR and BINARY
            if(obj1 instanceof String) obj1 = ((String)obj1).trim();
            if(obj1 instanceof byte[]){
                byte[] tmp = (byte[])obj1;
                int k=tmp.length-1;
                for(; k>= 0; k--) if(tmp[k] != 0) break;
                k++;
                byte[] tmp2 = new byte[k];
                System.arraycopy( tmp, 0, tmp2, 0, k);
                obj1 = tmp2;
            }
        }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/BasicTestCase.java|(4858,372,<138,2>,<150,3>)
```
 if(needTrim && obj2 != null){
			// trim for CHAR and BINARY
			if(obj2 instanceof String) obj2 = ((String)obj2).trim();
			if(obj2 instanceof byte[]){
				byte[] tmp = (byte[])obj2;
				int k=tmp.length-1;
				for(; k>= 0; k--) if(tmp[k] != 0) break;
				k++;
				byte[] tmp2 = new byte[k];
				System.arraycopy( tmp, 0, tmp2, 0, k);
				obj2 = tmp2;
			}
		}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(2721,164,<86,36>,<90,4>)
```
 {
				DateTime.Details details2 = new DateTime.Details(param2.getLong());
				details2.month += param1.getLong();
				return DateTime.calcMillis(details2);
			}
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3128,163,<96,34>,<100,4>)
```
 {
				DateTime.Details details2 = new DateTime.Details(param2.getLong());
				details2.year += param1.getLong();
				return DateTime.calcMillis(details2);
			}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/DateTime.java|(20686,206,<673,8>,<679,9>)
```
 int t = (int)(datetime % 86400000);
        int d = (int)(datetime / 86400000);
        if(t<0){
            //Time before 1970 and not a full day
            t += 86400000;
            d--;
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/DateTime.java|(22184,162,<738,3>,<744,4>)
```
 int t = (int)(time % 86400000);
			int d = (int)(time / 86400000);
			if(t<0){
			    //Time before 1970 and not a full day
				t += 86400000;
				d--;
			}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(13273,132,<335,4>,<337,5>)
```
 public static void main(String[] argv) {
        junit.swingui.TestRunner.main(new String[]{TestDataTypes.class.getName()});
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(11600,133,<261,4>,<263,5>)
```
 public static void main(String[] argv) {
        junit.swingui.TestRunner.main(new String[]{TestOperatoren.class.getName()});
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(6976,292,<189,8>,<196,54>)
```
 try{
            st.getGeneratedKeys();
            fail("NO_GENERATED_KEYS");
        }catch(SQLException ex){
            assertSQLException("01000", 0, ex);
        }
        assertEquals("UpdateCount", 1, st.getUpdateCount());
        assertNull("getResultSet", st.getResultSet());
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(9783,292,<249,8>,<256,54>)
```
 try{
            pr.getGeneratedKeys();
            fail("NO_GENERATED_KEYS");
        }catch(SQLException ex){
            assertSQLException("01000", 0, ex);
        }
        assertEquals("UpdateCount", 1, pr.getUpdateCount());
        assertNull("getResultSet", pr.getResultSet());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4331,291,<117,4>,<125,5>)
```
 public long getLong(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4928,295,<135,4>,<143,5>)
```
 public double getDouble(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(4119,311,<122,4>,<130,5>)
```
 public long getLong(int columnIndex) throws SQLException {
        try{
            Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(29003,207,<813,5>,<818,6>)
```
 token = nextToken( MISSING_EXPRESSION );
					try{
						displaySize = Integer.parseInt(token.getName(sql) );
					}catch(Exception e){
						throw createSyntaxError(token, MISSING_NUMBERVALUE );
					}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(30111,248,<847,6>,<853,7>)
```
 // read the scale of the data type
						token = nextToken( MISSING_EXPRESSION );
						try{
							value = Integer.parseInt(token.getName(sql) );
						}catch(Exception e){
							throw createSyntaxError(token, MISSING_NUMBERVALUE );
						}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(19401,276,<581,8>,<585,102>)
```
 String catalog;
        String tableName = catalog = nextIdentifier();
        tableName = nextIdentiferPart(tableName);
        if(tableName == catalog) catalog = null;
        CommandTable cmdCreate = new CommandTable( con.log, catalog, tableName, SQLTokenizer.CREATE );
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(31206,269,<883,8>,<887,95>)
```
 String catalog;
        String tableName = catalog = nextIdentifier();
        tableName = nextIdentiferPart(tableName);
        if(tableName == catalog) catalog = null;
        CommandTable cmd = new CommandTable( con.log, catalog, tableName, SQLTokenizer.INDEX );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/LongTreeList.java|(17139,80,<600,41>,<603,2>)
```
 {
		data[offset++] = (byte)(value >> 8);
		data[offset++] = (byte)(value);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(12223,89,<449,12>,<450,47>)
```
 complement[offset++] = (byte)(val >> 8);
            complement[offset++] = (byte)(val);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(18634,95,<541,8>,<542,48>)
```
 page[ offset++ ] = (byte)(lengthColumn >> 8);
        page[ offset++ ] = (byte)(lengthColumn);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(75710,196,<1957,31>,<1957,227>)
```
 COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(79791,201,<1988,31>,<1988,232>)
```
 MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R}
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4214,108,<94,14>,<94,122>)
```
 colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(12945,131,<264,14>,<264,145>)
```
 colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/View.java|(1794,154,<55,2>,<56,89>)
```
 StorePage storePage = new StorePage( null, -1, raFile, offset);
		StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);
```
Location: |project://smallsql0.21_src/src/smallsql/database/FileIndexNode.java|(2070,166,<66,8>,<67,99>)
```
 StorePage storePage = new StorePage( null, -1, file, fileOffset);
        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);
```
Location: |project://smallsql0.21_src/src/smallsql/database/FileIndexNode.java|(2559,162,<82,8>,<83,99>)
```
 StorePage storePage = new StorePage( null, -1, file, offset);
        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);
```
Location: |project://smallsql0.21_src/src/smallsql/database/FileIndexNode.java|(3059,158,<92,8>,<93,95>)
```
 StorePage storePage = new StorePage( null, -1, file, offset);
        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5229,375,<144,4>,<153,5>)
```
 public BigDecimal getBigDecimal(int i, int scale) throws SQLException {
        try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal(scale);
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(5079,395,<149,4>,<158,5>)
```
 public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
        try{
            MutableNumeric obj = getValue(columnIndex).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal(scale);
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4037,288,<108,4>,<116,5>)
```
 public int getInt(int i) throws SQLException {
        try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSResultSet.java|(3805,308,<113,4>,<121,5>)
```
 public int getInt(int columnIndex) throws SQLException {
        try{
            Expression expr = getValue(columnIndex);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/IndexDescription.java|(4929,299,<159,2>,<164,20>)
```
 boolean ok = file.createNewFile();
		if(!ok) throw SmallSQLException.create(Language.INDEX_EXISTS, name);
		FileChannel randomFile = Utils.openRaFile( file, database.isReadOnly() );
        con.add(new CreateFile(file, randomFile, con, database));
		writeMagic(randomFile);
		return randomFile;
```
Location: |project://smallsql0.21_src/src/smallsql/database/TableView.java|(4972,279,<141,2>,<146,16>)
```
 boolean ok = file.createNewFile();
		if(!ok) throw SmallSQLException.create(Language.TABLE_EXISTENT, name);
		FileChannel raFile = Utils.openRaFile( file, database.isReadOnly() );
		con.add(new CreateFile(file, raFile, con, database));
		writeMagic(raFile);
		return raFile;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(2035,169,<69,2>,<72,37>)
```
 puffer[ offset++ ] = (byte)(value >> 24);
		puffer[ offset++ ] = (byte)(value >> 16);
		puffer[ offset++ ] = (byte)(value >> 8);
		puffer[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/MutableNumeric.java|(12113,199,<447,12>,<450,47>)
```
 complement[offset++] = (byte)(val >> 24);
            complement[offset++] = (byte)(val >> 16);
            complement[offset++] = (byte)(val >> 8);
            complement[offset++] = (byte)(val);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13423,179,<375,8>,<378,41>)
```
 page[ offset++ ] = (byte)(value >> 24);
        page[ offset++ ] = (byte)(value >> 16);
        page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(13257,209,<419,6>,<422,47>)
```
 Expression col = columnExpressions.get(i);
						if(!col.isDefinitelyWritable())
							throw SmallSQLException.create(Language.COL_READONLY, new Integer(i));
						ExpressionName exp = (ExpressionName)col;
```
Location: |project://smallsql0.21_src/src/smallsql/database/CommandSelect.java|(14811,251,<463,6>,<466,52>)
```
 Expression rsColumn = columnExpressions.get(i); // Column of the ResultSet
						if(!rsColumn.isDefinitelyWritable())
							throw SmallSQLException.create(Language.COL_READONLY, new Integer(i));
						ExpressionName exp = (ExpressionName)rsColumn;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionMinute.java|(0,1729,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionMinute.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.MINUTE;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.minute;
	}

}

```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionYear.java|(0,1722,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionMonth.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 17.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionYear extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.YEAR;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.year;
	}

}

```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionHour.java|(0,1721,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionHour.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionHour extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.HOUR;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.hour;
	}

}

```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionDayOfMonth.java|(0,1738,<1,0>,<54,3>)
```
 /* =============================================================
 * SmallSQL : a free Java DBMS library for the Java(tm) platform
 * =============================================================
 *
 * (C) Copyright 2004-2006, by Volker Berlin.
 *
 * Project Info:  http://www.smallsql.de/
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ExpressionFunctionDayOfMonth.java
 * ---------------
 * Author: Volker Berlin
 * 
 * Created on 16.02.2006
 */
package smallsql.database;


/**
 * @author Volker Berlin
 */
final class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {

	
	final int getFunction() {
		return SQLTokenizer.DAYOFMONTH;
	}
	

	final int getInt() throws Exception {
		if(param1.isNull()) return 0;
		DateTime.Details details = new DateTime.Details(param1.getLong());
		return details.day;
	}

}

```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(2273,349,<77,2>,<84,37>)
```
 puffer[ offset++ ] = (byte)(value >> 56);
		puffer[ offset++ ] = (byte)(value >> 48);
		puffer[ offset++ ] = (byte)(value >> 40);
		puffer[ offset++ ] = (byte)(value >> 32);
		puffer[ offset++ ] = (byte)(value >> 24);
		puffer[ offset++ ] = (byte)(value >> 16);
		puffer[ offset++ ] = (byte)(value >> 8);
		puffer[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/Money.java|(3400,325,<119,2>,<126,34>)
```
 bytes[offset++] = (byte)(value >> 56);
		bytes[offset++] = (byte)(value >> 48);
		bytes[offset++] = (byte)(value >> 40);
		bytes[offset++] = (byte)(value >> 32);
		bytes[offset++] = (byte)(value >> 24);
		bytes[offset++] = (byte)(value >> 16);
		bytes[offset++] = (byte)(value >> 8);
		bytes[offset++] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13972,375,<392,8>,<399,41>)
```
 page[ offset++ ] = (byte)(value >> 56);
        page[ offset++ ] = (byte)(value >> 48);
        page[ offset++ ] = (byte)(value >> 40);
        page[ offset++ ] = (byte)(value >> 32);
        page[ offset++ ] = (byte)(value >> 24);
        page[ offset++ ] = (byte)(value >> 16);
        page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(8048,93,<183,12>,<184,53>)
```
 String q = (val == null) ? "" : quote;
            String e1 = (val == null) ? "" : escape1;
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(8100,96,<184,12>,<185,53>)
```
 String e1 = (val == null) ? "" : escape1;
            String e2 = (val == null) ? "" : escape2;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunction.java|(3083,433,<101,4>,<111,5>)
```
 /**
     * Create a SQLException that the current function does not support the specific data type.
     * @param dataType A data type const from SQLTokenizer.
     */
	SQLException createUnspportedDataType( int dataType ){
		Object[] params = {
				SQLTokenizer.getKeyWord(dataType),
				SQLTokenizer.getKeyWord(getFunction())
		};
        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC, params);
    }
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunction.java|(3524,451,<113,4>,<123,5>)
```
 /**
     * Create a SQLException that the current function can not convert the specific data type.
     * @param dataType A data type const from SQLTokenizer.
     */
    SQLException createUnspportedConversion( int dataType ){
    	Object[] params = {
    			SQLTokenizer.getKeyWord(dataType),
    			SQLTokenizer.getKeyWord(getFunction())
    	};
        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC, params);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(4115,342,<114,2>,<120,51>)
```
 theSuite.addTestSuite(TestOrderBy.class);
		theSuite.addTestSuite(TestOther.class);
        theSuite.addTestSuite(TestResultSet.class);
		theSuite.addTestSuite(TestScrollable.class);
        theSuite.addTestSuite(TestStatement.class);
        theSuite.addTestSuite(TestThreads.class);
        theSuite.addTestSuite(TestTokenizer.class);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/AllTests.java|(4160,353,<115,2>,<121,54>)
```
 theSuite.addTestSuite(TestOther.class);
        theSuite.addTestSuite(TestResultSet.class);
		theSuite.addTestSuite(TestScrollable.class);
        theSuite.addTestSuite(TestStatement.class);
        theSuite.addTestSuite(TestThreads.class);
        theSuite.addTestSuite(TestTokenizer.class);
        theSuite.addTestSuite(TestTransactions.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSPreparedStatement.java|(8312,261,<247,5>,<254,4>)
```
 catch (SQLException ex) {
				result[b] = EXECUTE_FAILED;
				if(failed == null){
					failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
					failed.initCause(ex);
				}
				failed.setNextException(ex);
			}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSStatement.java|(6966,346,<269,13>,<276,13>)
```
 catch(SQLException ex){
                result[i] = EXECUTE_FAILED;
                if(failed == null){
                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);
                    failed.initCause(ex);
                }
                failed.setNextException(ex);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24554,348,<843,3>,<843,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(31137,337,<861,3>,<861,340>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   		 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   		  Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(29015,369,<855,3>,<855,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestFunctions.java|(22524,301,<374,4>,<383,5>)
```
 public void tearDown(){
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDataTypes.java|(3053,301,<68,4>,<77,5>)
```
 public void tearDown(){
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(5149,301,<95,4>,<104,5>)
```
 public void tearDown(){
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestMoneyRounding.java|(1787,301,<53,4>,<62,5>)
```
 public void tearDown(){
        try{
            Connection con = AllTests.getConnection();
            Statement st = con.createStatement();
            st.execute("drop table " + table);
            st.close();
        }catch(Throwable e){
            //e.printStackTrace();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/DateTime.java|(4245,138,<143,1>,<146,2>)
```
 static DateTime valueOf(java.sql.Date date){
		if(date == null) return null;
		return new DateTime( parse(date), SQLTokenizer.DATE);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/DateTime.java|(4392,138,<149,1>,<152,2>)
```
 static DateTime valueOf(java.sql.Time date){
		if(date == null) return null;
		return new DateTime( parse(date), SQLTokenizer.TIME);
	}
```
Location: |project://smallsql0.21_src/src/smallsql/database/DateTime.java|(4539,148,<155,1>,<158,2>)
```
 static DateTime valueOf(java.sql.Timestamp date){
		if(date == null) return null;
		return new DateTime( parse(date), SQLTokenizer.TIMESTAMP);
	}
```


****************************************
******** Type 3 clone detection ********
****************************************
*****************************
** Clone percentage
** 2.010814464%
*****************************
** Number of clone classes:
** 30
*****************************
** Number of clones:
** 116
*****************************
** Size (SLOC) of largest clone: 
** 8
*****************************
** The largest clones:
** {|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5310,287,<145,8>,<152,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(7294,282,<203,8>,<210,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)}
** The largest clones in code:
** 
** largest clone number: 1
** try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal(scale);
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

** largest clone number: 2
** try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

** largest clone number: 3
** try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

** largest clone number: 4
** try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

** largest clone number: 5
** try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

*****************************
** The largest clone classes in SLOC:
** 52
*****************************
** The largest clone classes (loc):
** {[|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>),|project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**
try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 3             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4862,157,<104,25>,<104,182>)
```
 {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(77683,481,<1969,51>,<1969,532>)
```
 { SQLTokenizer.SQL_BIGINT , SQLTokenizer.SQL_BINARY , SQLTokenizer.SQL_BIT , SQLTokenizer.SQL_CHAR , SQLTokenizer.SQL_DATE , SQLTokenizer.SQL_DECIMAL , SQLTokenizer.SQL_DOUBLE , SQLTokenizer.SQL_FLOAT , SQLTokenizer.SQL_INTEGER , SQLTokenizer.SQL_LONGVARBINARY , SQLTokenizer.SQL_LONGVARCHAR , SQLTokenizer.SQL_REAL , SQLTokenizer.SQL_SMALLINT , SQLTokenizer.SQL_TIME , SQLTokenizer.SQL_TIMESTAMP , SQLTokenizer.SQL_TINYINT , SQLTokenizer.SQL_VARBINARY , SQLTokenizer.SQL_VARCHAR }
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4208,115,<94,8>,<94,123>)
```
 int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(2721,164,<86,36>,<90,4>)
```
 {
				DateTime.Details details2 = new DateTime.Details(param2.getLong());
				details2.month += param1.getLong();
				return DateTime.calcMillis(details2);
			}
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(3598,140,<109,4>,<110,71>)
```
 DateTime.Details details2 = new DateTime.Details(param2.getLong());
				DateTime.Details details1 = new DateTime.Details(param1.getLong());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(16080,183,<448,6>,<451,52>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
			IndexDescriptions indexes = ((Table)tab).indexes;
```
Location: |project://smallsql0.21_src/src/smallsql/database/Database.java|(14353,129,<405,6>,<407,40>)
```
 String tableName = tables.get(t);
    		TableView tab = getTableView( con, tableName);
			if(!(tab instanceof Table)) continue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionConvert.java|(4162,110,<143,5>,<144,75>)
```
 byte[] buffer = new byte[length];
					System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(7741,116,<193,5>,<195,20>)
```
 byte[] newPage = new byte[newSize];
    	System.arraycopy( page, 0, newPage, 0, page.length);
    	page = newPage;
```
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(4367,134,<157,29>,<162,2>)
```
 {
		byte[] bytes = new byte[length];
		System.arraycopy(puffer, offset, bytes, 0, length);
		offset += length;
		return bytes;
	}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/MemoryStream.java|(2080,124,<70,2>,<72,37>)
```
 puffer[ offset++ ] = (byte)(value >> 16);
		puffer[ offset++ ] = (byte)(value >> 8);
		puffer[ offset++ ] = (byte)(value);
```
Location: |project://smallsql0.21_src/src/smallsql/database/StoreImpl.java|(13042,139,<361,8>,<364,41>)
```
 if(newSize > page.length) resizePage(newSize);

        page[ offset++ ] = (byte)(value >> 8);
        page[ offset++ ] = (byte)(value);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5310,287,<145,8>,<152,9>)
```
 try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal(scale);
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(7294,282,<203,8>,<210,9>)
```
 try{
            MutableNumeric obj = getValue(i).getNumeric();
            wasNull = obj == null;
            if(wasNull) return null;
            return obj.toBigDecimal();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(3598,140,<109,4>,<110,71>)
```
 DateTime.Details details2 = new DateTime.Details(param2.getLong());
				DateTime.Details details1 = new DateTime.Details(param1.getLong());
```
Location: |project://smallsql0.21_src/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(2721,164,<86,36>,<90,4>)
```
 {
				DateTime.Details details2 = new DateTime.Details(param2.getLong());
				details2.month += param1.getLong();
				return DateTime.calcMillis(details2);
			}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(10337,169,<223,2>,<227,13>)
```
 rs = pr.executeQuery();
		assertTrue( "To few rows", rs.next() );
		assertTrue( "To few rows", rs.next() );
		assertFalse( "To many rows", rs.next() );
		pr.close();
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestOperatoren.java|(8477,237,<182,8>,<186,49>)
```
 assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertTrue( "To few rows", rs.next() );
        assertFalse( "To many rows", rs.next() );
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(2798,336,<84,3>,<90,52>)
```
 assertRowCount( 0, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Values('qwert')");
			assertRowCount( 1, "Select * from transactions");

			con.createStatement().execute("Insert Into transactions(v) Select v From transactions");
			assertRowCount( 2, "Select * from transactions");
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestTransactions.java|(15019,340,<409,3>,<414,82>)
```
 con2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );
			con1.createStatement().execute("Create Table transactions (i int identity, v varchar(20))");
			assertRowCount( 0, "Select * from transactions");

			con1.setAutoCommit(false);
			con1.createStatement().execute("Insert Into transactions(v) Values('qwert2')");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(21308,369,<834,3>,<834,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(28301,351,<853,3>,<853,354>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   	"'",  "'",  "max length", 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24201,347,<842,3>,<842,350>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         	  Utils.getInteger(65535),   	"'",  "'",  "length", 			Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(22433,348,<837,3>,<837,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),	"0x", null, null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(23493,348,<840,3>,<840,351>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),	"'",  "'",  null, 		 		Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, 			Boolean.FALSE, Boolean.FALSE, null, null, 				 null, 				  null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(24908,379,<844,3>,<844,382>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     	null, null, "precision,scale", 	Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSDatabaseMetaData.java|(27178,369,<850,3>,<850,372>)
```
 {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        	 Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      	null, null, null, 				Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(75710,196,<1957,31>,<1957,227>)
```
 COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED}
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4208,115,<94,8>,<94,123>)
```
 int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(8442,274,<183,8>,<183,282>)
```
 int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};
```
Location: |project://smallsql0.21_src/src/smallsql/database/SQLParser.java|(75728,178,<1957,49>,<1957,227>)
```
 {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED}
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestDBMetaData.java|(4862,157,<104,25>,<104,182>)
```
 {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(7881,261,<209,8>,<213,29>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
        assertRowCount(1,rs);
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11049,208,<276,8>,<280,29>)
```
 pr.execute();
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(7385,230,<199,8>,<202,74>)
```
 rs = st.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",1,rs.getMetaData().getColumnCount());
        assertEquals("ColumnCount","i",rs.getMetaData().getColumnName(1));
```
Location: |project://smallsql0.21_src/src/smallsql/junit/TestStatement.java|(11049,208,<276,8>,<280,29>)
```
 pr.execute();
        rs = pr.getGeneratedKeys();
        assertNotNull("RETURN_GENERATED_KEYS", rs);
        assertEquals("ColumnCount",2,rs.getMetaData().getColumnCount());
        assertRowCount(1,rs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4688,227,<127,8>,<133,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getFloat();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4093,225,<109,8>,<115,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getInt();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6289,257,<174,8>,<181,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getTime( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(3601,229,<94,8>,<100,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getBoolean();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(6627,289,<184,8>,<191,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            if(wasNull) return null;
            return DateTime.getTimestamp( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(5961,257,<164,8>,<171,9>)
```
 try{
			Expression expr = getValue(i);
            wasNull = expr.isNull();
			if(wasNull) return null;
			return DateTime.getDate( expr.getLong() );
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```
Location: |project://smallsql0.21_src/src/smallsql/database/SSCallableStatement.java|(4389,226,<118,8>,<124,9>)
```
 try{
            Expression expr = getValue(i);
            wasNull = expr.isNull();
            return expr.getLong();
        }catch(Exception e){
            throw SmallSQLException.createFromException( e );
        }
```

