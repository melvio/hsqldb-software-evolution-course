
****************************************
******** Type 1 clone detection ********
****************************************
*****************************
** Clone percentage
** 2.254077571%
*****************************
** Number of clone classes:
** 107
*****************************
** Number of clones:
** 218
*****************************
** Size (SLOC) of largest clone: 
** 59
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)}
** The largest clones in code:
** 
** largest clone number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**

*****************************
** The largest clone classes in SLOC:
** 112
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2914,<3440,12>,<3498,53>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**
// common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
            row[declared_data_type] = row[data_type];
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 1             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(8496,566,<212,43>,<237,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(8740,566,<234,43>,<259,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5494,648,<194,8>,<215,9>)
```
 sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }

        if (isCycle()) {
            sb.append(' ').append(Tokens.T_CYCLE);
        }

        if (name == null) {
            sb.append(Tokens.T_CLOSEBRACKET);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6805,716,<239,12>,<260,13>)
```
 sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }

            if (isCycle()) {
                sb.append(' ').append(Tokens.T_CYCLE);
            }

            if (name == null) {
                sb.append(Tokens.T_CLOSEBRACKET);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(82415,781,<1924,8>,<1945,28>)
```
 RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }

        return updateCounts;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(44352,781,<1097,8>,<1118,28>)
```
 RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }

        return updateCounts;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(4169,590,<120,8>,<135,9>)
```
 if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3576,590,<98,8>,<113,9>)
```
 if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8354,516,<290,8>,<301,65>)
```
 DateTimeType otherType = (DateTimeType) other;

        // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10084,656,<339,16>,<351,73>)
```
 DateTimeType otherType = (DateTimeType) other;

                // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85552,511,<2124,8>,<2141,9>)
```
 checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88685,511,<2213,8>,<2230,9>)
```
 checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8635,704,<298,8>,<312,9>)
```
 int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;

        if (startType == Types.SQL_INTERVAL_HOUR) {
            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                           : Types.SQL_TIME;
        } else {
            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                           : Types.SQL_TIMESTAMP;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10413,953,<347,16>,<363,17>)
```
 int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;

                if (startType == Types.SQL_INTERVAL_HOUR) {
                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                                   : Types.SQL_TIME;
                } else {
                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                                   : Types.SQL_TIMESTAMP;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8254,550,<286,8>,<300,73>)
```
 if (!other.isDateTimeType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        DateTimeType otherType = (DateTimeType) other;

        // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(9960,706,<335,16>,<350,74>)
```
 if (!other.isDateTimeType()) {
                    throw Error.error(ErrorCode.X_42562);
                }

                DateTimeType otherType = (DateTimeType) other;

                // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9733,715,<261,12>,<277,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11079,715,<296,12>,<312,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9924,726,<265,12>,<282,51>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11270,726,<300,12>,<317,51>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9454,699,<253,12>,<270,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10800,699,<288,12>,<305,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(17789,1521,<491,12>,<539,39>)
```
 ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }

            try {

                // cause errors
                ps.setString(5, "three");
                fail("update did not fail");
            } catch (SQLException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(16656,1521,<416,12>,<464,39>)
```
 ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }

            try {

                // cause errors
                ps.setString(5, "three");
                fail("update did not fail");
            } catch (SQLException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestKarl.java|(7134,452,<232,8>,<247,9>)
```
 int       col_count = rs.getMetaData().getColumnCount();

        for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + "\t");
        }

        System.out.println("");

        while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print("\t");
            }

            System.out.println("");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestKarl.java|(8037,446,<267,8>,<282,9>)
```
 int col_count = rs.getMetaData().getColumnCount();

        for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + "\t");
        }

        System.out.println("");

        while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print("\t");
            }

            System.out.println("");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(9568,903,<335,8>,<368,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(12523,903,<465,8>,<498,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(13547,903,<506,8>,<539,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95676,531,<3340,46>,<3364,5>)
```
 {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(96255,531,<3366,46>,<3390,5>)
```
 {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(12999,1102,<437,8>,<470,9>)
```
 switch (type) {

            case StatementTypes.CALL : {
                break;
            }
            case StatementTypes.INSERT : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);

                break;
            }
            case StatementTypes.SELECT_CURSOR :
                break;

            case StatementTypes.DELETE_WHERE : {
                session.getGrantee().checkDelete(targetTable);

                break;
            }
            case StatementTypes.UPDATE_WHERE : {
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
            case StatementTypes.MERGE : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementResultUpdate.java|(6976,1102,<209,8>,<242,9>)
```
 switch (type) {

            case StatementTypes.CALL : {
                break;
            }
            case StatementTypes.INSERT : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);

                break;
            }
            case StatementTypes.SELECT_CURSOR :
                break;

            case StatementTypes.DELETE_WHERE : {
                session.getGrantee().checkDelete(targetTable);

                break;
            }
            case StatementTypes.UPDATE_WHERE : {
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
            case StatementTypes.MERGE : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89026,654,<2147,16>,<2163,53>)
```
 row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87960,552,<2115,8>,<2132,45>)
```
 // Do it.
        row[icat]       = cat;
        row[ischem]     = schem;
        row[iname]      = pName;
        row[icol_name]  = cName;
        row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(71887,812,<2137,16>,<2157,30>)
```
 if (column != null) {
                    DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();
                    String  childName = null;
                    boolean isChar;

                    if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf("CHAR") >= 0;
                        result    += " WHERE " + quoteObjectName(column);

                        if (isChar) {
                            result += " LIKE \'%%\'";
                        } else {
                            result += " = ";
                        }
                    }
                }

                return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(73314,812,<2175,16>,<2195,30>)
```
 if (column != null) {
                    DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();
                    String  childName = null;
                    boolean isChar;

                    if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf("CHAR") >= 0;
                        result    += " WHERE " + quoteObjectName(column);

                        if (isChar) {
                            result += " LIKE \'%%\'";
                        } else {
                            result += " = ";
                        }
                    }
                }

                return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2645,662,<74,62>,<96,5>)
```
 {

        int               rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);
        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting " + expected
                        + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }

            result += "\n";

            rows++;
        }

        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMultiInsert.java|(2528,634,<69,89>,<88,5>)
```
 {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting "
            + expected + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                           + rs.getString(i + 1) + ":";
            }
            result += "\n";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129523,697,<3148,8>,<3164,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133988,697,<3253,8>,<3269,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(7505,455,<309,8>,<322,9>)
```
 if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(8257,455,<337,8>,<350,9>)
```
 if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(37769,633,<1017,16>,<1033,17>)
```
 Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;

                if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(41195,633,<1114,16>,<1130,17>)
```
 Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;

                if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(4287,526,<139,62>,<152,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7843,526,<251,62>,<264,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(6113,526,<189,62>,<202,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(37640,387,<1013,16>,<1023,32>)
```
 if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(41066,387,<1110,16>,<1120,32>)
```
 if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(7600,399,<313,8>,<324,37>)
```
 Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }

        return new RowType(newTypes);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(8352,399,<341,8>,<352,37>)
```
 Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }

        return new RowType(newTypes);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(31373,559,<690,16>,<699,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,
                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,
                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,
                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,
                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,
                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,
                    Tokens.CLOSEBRACKET
                };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(32063,559,<704,16>,<713,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,
                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,
                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,
                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,
                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,
                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,
                    Tokens.CLOSEBRACKET
                };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22584,899,<682,12>,<714,45>)
```
 ps.executeUpdate();

            String dq1   = "select CHARACTER_LENGTH(clobfield) from clobtest;";
            ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(24815,899,<759,12>,<791,45>)
```
 ps.executeUpdate();

            String dq1   = "select CHARACTER_LENGTH(clobfield) from clobtest;";
            ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62642,494,<1825,12>,<1844,23>)
```
 int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30733,494,<1002,12>,<1021,23>)
```
 int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23799,424,<585,8>,<600,22>)
```
 RowSetNavigatorClient navigator = new RowSetNavigatorClient();

        for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }

        Result result = Result.newDataResult(meta);

        result.setNavigator(navigator);

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(22460,424,<539,8>,<554,22>)
```
 RowSetNavigatorClient navigator = new RowSetNavigatorClient();

        for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }

        Result result = Result.newDataResult(meta);

        result.setNavigator(navigator);

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(17329,552,<496,8>,<511,9>)
```
 if (condition != null) {
            rangeVariables[0].addJoinCondition(condition);

            RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);

            resolver.processConditions(session);

            rangeVariables = resolver.rangeVariables;
        }

        for (int i = 0; i < rangeVariables.length; i++) {
            rangeVariables[i].resolveRangeTableTypes(session,
                    RangeVariable.emptyArray);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(21525,552,<615,8>,<630,9>)
```
 if (condition != null) {
            rangeVariables[0].addJoinCondition(condition);

            RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);

            resolver.processConditions(session);

            rangeVariables = resolver.rangeVariables;
        }

        for (int i = 0; i < rangeVariables.length; i++) {
            rangeVariables[i].resolveRangeTableTypes(session,
                    RangeVariable.emptyArray);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(31807,1025,<1068,12>,<1097,13>)
```
 Session session = database.sessionManager.getSysSession();

            for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }

            if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(33266,1025,<1116,12>,<1145,13>)
```
 Session session = database.sessionManager.getSysSession();

            for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }

            if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5390,580,<191,8>,<207,9>)
```
 //
        sb.append(Tokens.T_START).append(' ');
        sb.append(Tokens.T_WITH).append(' ');
        sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6689,636,<236,12>,<252,13>)
```
 //
            sb.append(Tokens.T_START).append(' ');
            sb.append(Tokens.T_WITH).append(' ');
            sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10113,397,<257,12>,<266,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10593,397,<269,12>,<278,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8671,717,<299,8>,<314,47>)
```
 int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;

        if (startType == Types.SQL_INTERVAL_HOUR) {
            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                           : Types.SQL_TIME;
        } else {
            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                           : Types.SQL_TIMESTAMP;
        }

        return getDateTimeType(newType, scale);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10457,966,<348,16>,<365,55>)
```
 int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;

                if (startType == Types.SQL_INTERVAL_HOUR) {
                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                                   : Types.SQL_TIME;
                } else {
                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                                   : Types.SQL_TIMESTAMP;
                }

                return getDateTimeType(newType, scale);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(33717,1082,<844,66>,<865,29>)
```
 {
                                if (rowData[i] == null) {
                                    /*
                                    server.printWithThread("R" + rowNum + "C"
                                        + (i+1) + " => [null]");
                                    */
                                    outPacket.writeInt(-1);
                                } else {
                                    dataString =
                                        pgTypes[i].valueString(rowData[i]);

                                    outPacket.writeSized(dataString);

                                    if (server.isTrace()) {
                                        server.printWithThread(
                                            "R" + rowNum + "C" + (i + 1)
                                            + " => ("
                                            + rowData[i].getClass().getName()
                                            + ") [" + dataString + ']');
                                    }
                                }
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(56810,966,<1360,59>,<1380,25>)
```
 {
                            if (rowData[i] == null) {
                                /*
                                server.printWithThread("R" + rowNum + "C"
                                    + (i+1) + " => [null]");
                                */
                                outPacket.writeInt(-1);
                            } else {
                                dataString =
                                    pgTypes[i].valueString(rowData[i]);

                                outPacket.writeSized(dataString);

                                if (server.isTrace()) {
                                    server.printWithThread(
                                        "R" + rowNum + "C" + (i + 1) + " => ("
                                        + rowData[i].getClass().getName()
                                        + ") [" + dataString + ']');
                                }
                            }
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9545,725,<256,12>,<273,61>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10891,725,<291,12>,<308,61>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10029,733,<268,12>,<285,60>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11375,733,<303,12>,<320,60>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(6579,612,<177,8>,<192,67>)
```
 iUpdateCount = insertStatement.executeUpdate();

        insertStatement.close();
        Assert.assertEquals(
            "Exactly one record with time data shoud have been inserted.",
            iUpdateCount, 1);

        // Now select it back to be sure it is there
        PreparedStatement selectStatement = null;
        PreparedStatement deleteStatement = null;
        ResultSet         results         = null;
        java.sql.Time     retrievedTime;
        int               iDeletedCount = 0;
        java.sql.Time     selectTime;

        selectStatement = connection.prepareStatement(SELECT_TIME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(10010,612,<272,8>,<287,67>)
```
 iUpdateCount = insertStatement.executeUpdate();

        insertStatement.close();
        Assert.assertEquals(
            "Exactly one record with time data shoud have been inserted.",
            iUpdateCount, 1);

        // Now select it back to be sure it is there
        PreparedStatement selectStatement = null;
        PreparedStatement deleteStatement = null;
        ResultSet         results         = null;
        java.sql.Time     retrievedTime;
        int               iDeletedCount = 0;
        java.sql.Time     selectTime;

        selectStatement = connection.prepareStatement(SELECT_TIME);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(96397,3176,<2685,16>,<2746,17>)
```
 row[data_type]        = type.getFullNameString();

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126786,2860,<3438,12>,<3495,13>)
```
 row[data_type]      = type.getFullNameString();

            // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(17131,2000,<478,12>,<532,13>)
```
 ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(15998,2000,<403,12>,<457,13>)
```
 ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(32368,652,<1017,8>,<1033,9>)
```
 if (queryExpression.sortAndSlice == null) {
            queryExpression.addSortAndSlice(sortAndSlice);
        } else {
            if (queryExpression.sortAndSlice.hasLimit()) {
                if (sortAndSlice.hasLimit()) {
                    throw Error.error(ErrorCode.X_42549);
                }

                for (int i = 0; i < sortAndSlice.exprList.size(); i++) {
                    Expression e = (Expression) sortAndSlice.exprList.get(i);

                    queryExpression.sortAndSlice.addOrderExpression(e);
                }
            } else {
                queryExpression.addSortAndSlice(sortAndSlice);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(35008,828,<1109,16>,<1127,17>)
```
 if (queryExpression.sortAndSlice == null) {
                    queryExpression.addSortAndSlice(sortAndSlice);
                } else {
                    if (queryExpression.sortAndSlice.hasLimit()) {
                        if (sortAndSlice.hasLimit()) {
                            throw Error.error(ErrorCode.X_42549);
                        }

                        for (int i = 0; i < sortAndSlice.exprList.size();
                                i++) {
                            Expression e =
                                (Expression) sortAndSlice.exprList.get(i);

                            queryExpression.sortAndSlice.addOrderExpression(e);
                        }
                    } else {
                        queryExpression.addSortAndSlice(sortAndSlice);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(57811,516,<1508,8>,<1522,9>)
```
 if (name.schema == null) {
            name.schema = schemaName == null
                          ? session.getCurrentSchemaHsqlName()
                          : schemaName;
        } else {
            name.schema = session.getSchemaHsqlName(name.schema.name);

            if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }

            if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(58670,516,<1537,8>,<1551,9>)
```
 if (name.schema == null) {
            name.schema = schemaName == null
                          ? session.getCurrentSchemaHsqlName()
                          : schemaName;
        } else {
            name.schema = session.getSchemaHsqlName(name.schema.name);

            if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }

            if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java|(8441,604,<269,30>,<285,5>)
```
 {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(3812,604,<102,30>,<118,5>)
```
 {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89431,530,<2157,16>,<2168,54>)
```
 row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
                row[iordinal_position] = ordinalPosition;
                row[iis_nullable]      = isNullable;
                row[ispecific_name]    = specificName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88303,450,<2126,8>,<2137,46>)
```
 row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
        row[iordinal_position] = ordinalPosition;
        row[iis_nullable]      = isNullable;
        row[ispecific_name]    = specificName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(256768,394,<6150,12>,<6159,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(257245,394,<6162,12>,<6171,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89106,689,<2149,16>,<2165,57>)
```
 row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88042,569,<2118,8>,<2134,49>)
```
 row[iname]      = pName;
        row[icol_name]  = cName;
        row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(58035,481,<1553,8>,<1562,9>)
```
 assertEquals("Retrieved bye array length wrong (1)",
            expectedBytes.length, ba1.length);
        for (int i = 0; i < ba1.length; i++) {
            assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
        }
        assertEquals("Retrieved bye array length wrong (2)",
            expectedBytes.length, ba2.length);
        for (int i = 0; i < ba2.length; i++) {
            assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(60050,481,<1605,8>,<1614,9>)
```
 assertEquals("Retrieved bye array length wrong (1)",
            expectedBytes.length, ba1.length);
        for (int i = 0; i < ba1.length; i++) {
            assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
        }
        assertEquals("Retrieved bye array length wrong (2)",
            expectedBytes.length, ba2.length);
        for (int i = 0; i < ba2.length; i++) {
            assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(40488,576,<1570,56>,<1587,17>)
```
 {
                    int pos = sqlString.indexOf('\r', currentPosition + 2);

                    if (pos == -1) {
                        pos = sqlString.indexOf('\n', currentPosition + 2);
                    }

                    if (pos == -1) {
                        pos = limit;
                    }

                    token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);
                    token.tokenType   = Tokens.X_REMARK;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(42133,576,<1618,56>,<1635,17>)
```
 {
                    int pos = sqlString.indexOf('\r', currentPosition + 2);

                    if (pos == -1) {
                        pos = sqlString.indexOf('\n', currentPosition + 2);
                    }

                    if (pos == -1) {
                        pos = limit;
                    }

                    token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);
                    token.tokenType   = Tokens.X_REMARK;
                    token.isDelimiter = true;

                    return;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22778,992,<689,12>,<725,13>)
```
 int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(25009,992,<766,12>,<802,13>)
```
 int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(6009,468,<183,12>,<195,23>)
```
 if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len "
                           + baOut.length, false);
            }

            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length
                               + ", got len " + baOut.length, false);
                }
            }

            rs.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(7800,468,<238,12>,<250,23>)
```
 if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len "
                           + baOut.length, false);
            }

            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length
                               + ", got len " + baOut.length, false);
                }
            }

            rs.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22697,867,<685,12>,<718,55>)
```
 ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(24928,867,<762,12>,<795,55>)
```
 ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(27177,554,<889,8>,<906,9>)
```
 data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;

        if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }

        if (bLength == 0) {
            return 1;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29130,554,<957,8>,<974,9>)
```
 data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;

        if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }

        if (bLength == 0) {
            return 1;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62683,478,<1826,12>,<1846,23>)
```
 String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;

            long l = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30774,478,<1003,12>,<1023,23>)
```
 String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;

            long l = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(28926,642,<895,16>,<913,39>)
```
 pstmt2.clearWarnings();

                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }

                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(30194,706,<973,20>,<991,43>)
```
 pstmt2.clearWarnings();

                    while (RS.next()) {
                        aBalance = RS.getInt(1);
                    }

                    pstmt3.setInt(1, delta);
                    pstmt3.setInt(2, tid);
                    pstmt3.executeUpdate();
                    pstmt3.clearWarnings();
                    pstmt4.setInt(1, delta);
                    pstmt4.setInt(2, bid);
                    pstmt4.executeUpdate();
                    pstmt4.clearWarnings();
                    pstmt5.setInt(1, tid);
                    pstmt5.setInt(2, bid);
                    pstmt5.setInt(3, aid);
                    pstmt5.setInt(4, delta);
                    pstmt5.executeUpdate();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(25315,1332,<696,8>,<722,51>)
```
 st.execute(
            "CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))");
        st.execute(
            "CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))");
        st.execute("INSERT INTO t1 values(1,1,1)");
        st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2096,1332,<51,8>,<77,51>)
```
 st.execute(
            "CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))");
        st.execute(
            "CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))");
        st.execute("INSERT INTO t1 values(1,1,1)");
        st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(28671,857,<887,16>,<912,40>)
```
 pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);

                ResultSet RS = pstmt2.executeQuery();

                pstmt2.clearWarnings();

                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }

                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(29915,941,<965,20>,<990,44>)
```
 pstmt1.setInt(1, delta);
                    pstmt1.setInt(2, aid);
                    pstmt1.executeUpdate();
                    pstmt1.clearWarnings();
                    pstmt2.setInt(1, aid);

                    ResultSet RS = pstmt2.executeQuery();

                    pstmt2.clearWarnings();

                    while (RS.next()) {
                        aBalance = RS.getInt(1);
                    }

                    pstmt3.setInt(1, delta);
                    pstmt3.setInt(2, tid);
                    pstmt3.executeUpdate();
                    pstmt3.clearWarnings();
                    pstmt4.setInt(1, delta);
                    pstmt4.setInt(2, bid);
                    pstmt4.executeUpdate();
                    pstmt4.clearWarnings();
                    pstmt5.setInt(1, tid);
                    pstmt5.setInt(2, bid);
                    pstmt5.setInt(3, aid);
                    pstmt5.setInt(4, delta);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(8383,645,<205,12>,<220,61>)
```
 java.util.Date start = new java.util.Date();

            if (init) {
                System.out.println("Start: " + start.toString());
                System.out.print("Initializing dataset...");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println("done. in " + seconds + " seconds\n");
                System.out.println("Complete: "
                                   + (new java.util.Date()).toString());
            }

            System.out.println("* Starting Benchmark Run *");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(7255,645,<189,12>,<204,61>)
```
 java.util.Date start = new java.util.Date();

            if (init) {
                System.out.println("Start: " + start.toString());
                System.out.print("Initializing dataset...");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println("done. in " + seconds + " seconds\n");
                System.out.println("Complete: "
                                   + (new java.util.Date()).toString());
            }

            System.out.println("* Starting Benchmark Run *");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(26155,700,<712,8>,<726,62>)
```
 assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2936,700,<67,8>,<81,62>)
```
 assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8410,631,<292,8>,<304,54>)
```
 // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10148,864,<341,16>,<355,75>)
```
 // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85576,647,<2126,8>,<2147,9>)
```
 if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88709,647,<2215,8>,<2236,9>)
```
 if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85663,771,<2130,8>,<2154,9>)
```
 if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88796,771,<2219,8>,<2243,9>)
```
 if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9837,717,<263,12>,<280,42>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11183,717,<298,12>,<315,42>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(20715,433,<775,8>,<787,9>)
```
 String tokenS;

        if (token.charsetSchema != null) {
            tokenS = token.charsetSchema;
        } else if (token.charsetName != null) {
            tokenS = token.charsetName;
        } else if (token.namePrePrefix != null) {
            tokenS = token.namePrePrefix;
        } else if (token.namePrefix != null) {
            tokenS = token.namePrefix;
        } else {
            tokenS = token.tokenString;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(21580,433,<802,8>,<814,9>)
```
 String tokenS;

        if (token.charsetSchema != null) {
            tokenS = token.charsetSchema;
        } else if (token.charsetName != null) {
            tokenS = token.charsetName;
        } else if (token.namePrePrefix != null) {
            tokenS = token.namePrePrefix;
        } else if (token.namePrefix != null) {
            tokenS = token.namePrefix;
        } else {
            tokenS = token.tokenString;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVLMemory.java|(5854,485,<156,8>,<170,9>)
```
 if (l != null && l.getBalance(store) == -2) {
            System.out.print("broken index - deleted");
        }

        if (r != null && r.getBalance(store) == -2) {
            System.out.print("broken index -deleted");
        }

        if (l != null && !p.equals(l.getParent(store))) {
            System.out.print("broken index - no parent");
        }

        if (r != null && !p.equals(r.getParent(store))) {
            System.out.print("broken index - no parent");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(18890,485,<670,8>,<684,9>)
```
 if (l != null && l.getBalance(store) == -2) {
            System.out.print("broken index - deleted");
        }

        if (r != null && r.getBalance(store) == -2) {
            System.out.print("broken index -deleted");
        }

        if (l != null && !p.equals(l.getParent(store))) {
            System.out.print("broken index - no parent");
        }

        if (r != null && !p.equals(r.getParent(store))) {
            System.out.print("broken index - no parent");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(34554,663,<963,78>,<989,5>)
```
 {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(29191,663,<770,78>,<796,5>)
```
 {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(16448,2472,<461,12>,<524,13>)
```
 ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(15315,2472,<386,12>,<449,13>)
```
 ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(15749,2847,<445,12>,<514,13>)
```
 stmnt.execute(ddl1);

            PreparedStatement ps = connection.prepareStatement(
                "INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");

            ps.setString(1, "0.2");
            ps.setDouble(2, 0.2);
            ps.setLong(3, java.lang.Long.MAX_VALUE);
            ps.setInt(4, Integer.MAX_VALUE);
            ps.setInt(5, Short.MAX_VALUE);
            ps.setInt(6, 0);
            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));
            ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));
            ps.execute();
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(14616,2847,<370,12>,<439,13>)
```
 stmnt.execute(ddl1);

            PreparedStatement ps = connection.prepareStatement(
                "INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");

            ps.setString(1, "0.2");
            ps.setDouble(2, 0.2);
            ps.setLong(3, java.lang.Long.MAX_VALUE);
            ps.setInt(4, Integer.MAX_VALUE);
            ps.setInt(5, Short.MAX_VALUE);
            ps.setInt(6, 0);
            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));
            ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));
            ps.execute();
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(123310,947,<3360,12>,<3374,64>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130806,947,<3535,12>,<3549,64>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(11011,561,<406,12>,<420,62>)
```
 Object[] currentData = getNext();
            boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;

            if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }

            otherRow  = it.getNextRow();
            otherData = otherRow == null ? null
                                         : otherRow.getData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(12645,561,<465,12>,<479,62>)
```
 Object[] currentData = getNext();
            boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;

            if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }

            otherRow  = it.getNextRow();
            otherData = otherRow == null ? null
                                         : otherRow.getData();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(127963,932,<3113,12>,<3129,55>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(132405,932,<3217,12>,<3233,55>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33819,400,<1042,39>,<1061,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(42075,400,<1350,39>,<1369,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3146,542,<94,50>,<115,5>)
```
 {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(4732,542,<128,50>,<149,5>)
```
 {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129623,2460,<3150,8>,<3204,9>)
```
 final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(134088,2460,<3255,8>,<3309,9>)
```
 final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLibSpeed.java|(6145,411,<180,12>,<193,22>)
```
 sw.zero();

            for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }

            System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());
            sw.zero();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLibSpeed.java|(7308,411,<218,12>,<231,22>)
```
 sw.zero();

            for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }

            System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());
            sw.zero();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133888,736,<3251,8>,<3267,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(5193,461,<146,12>,<158,13>)
```
 addrs = InetAddress.getAllByName(addr.getHostAddress());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

            addrs = InetAddress.getAllByName(addr.getHostName());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(5764,461,<163,12>,<175,13>)
```
 addrs = InetAddress.getAllByName(addr.getHostAddress());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

            addrs = InetAddress.getAllByName(addr.getHostName());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(18887,2504,<472,8>,<539,9>)
```
 String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            currentArg = arg[i];
            lowerArg = arg[i].toLowerCase();

            if (lowerArg.startsWith("--")) {
                lowerArg = lowerArg.substring(1);
            }

            if (lowerArg.equals("-noexit") || lowerArg.equals("-help")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException("No value for argument "
                                                   + currentArg);
            }

            i++;

            if (lowerArg.equals("-driver")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-url")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-user")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-password")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-urlid")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-rcfile")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-dir")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals("-script")) {
                defScript = arg[i];
            } else if (lowerArg.equals("-noexit")) {
                bMustExit = false;

                i--;
            } else if (lowerArg.equals("-help")) {
                showUsage();

                return;
            } else {
                /* Syntax ERRORS should either throw or exit with non-0 status.
                 * In our case, it may be unsafe to exit, so we throw.
                 * (I.e. should provide easy way for caller to programmatically
                 * determine that there was an invocation problem).
                 */
                throw new IllegalArgumentException(
                    "invalid argrument " + currentArg + " try:  java... "
                    + DatabaseManagerSwing.class.getName() + " --help");

                // No reason to localize, since the main syntax message is
                // not localized.
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(8363,2506,<250,8>,<317,9>)
```
 String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            currentArg = arg[i];
            lowerArg   = arg[i].toLowerCase();

            if (lowerArg.startsWith("--")) {
                lowerArg = lowerArg.substring(1);
            }

            if (lowerArg.equals("-noexit") || lowerArg.equals("-help")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException("No value for argument "
                                                   + currentArg);
            }

            i++;

            if (lowerArg.equals("-driver")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-url")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-user")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-password")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-urlid")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-rcfile")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-dir")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals("-script")) {
                defScript = arg[i];
            } else if (lowerArg.equals("-noexit")) {
                bMustExit = false;

                i--;
            } else if (lowerArg.equals("-help")) {
                showUsage();

                return;
            } else {
                /* Syntax ERRORS should either throw or exit with non-0 status.
                 * In our case, it may be unsafe to exit, so we throw.
                 * (I.e. should provide easy way for caller to programmatically
                 * determine that there was an invocation problem).
                 */
                throw new IllegalArgumentException(
                    "invalid argrument " + currentArg + " try:  java... "
                    + DatabaseManagerSwing.class.getName() + " --help");

                // No reason to localize, since the main syntax message is
                // not localized.
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(27056,501,<886,8>,<897,31>)
```
 Object[] data    = getLobHeader(aID);
        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

        data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29009,501,<954,8>,<965,31>)
```
 Object[] data    = getLobHeader(aID);
        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

        data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(23497,456,<716,12>,<731,13>)
```
 rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }

            for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail("test failure");
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(25728,456,<793,12>,<808,13>)
```
 rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }

            for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail("test failure");
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(79368,418,<2056,16>,<2066,55>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(80462,418,<2086,16>,<2096,55>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(28245,456,<920,12>,<940,13>)
```
 bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }

            if (bIndex == bAddresses.length) {
                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30990,456,<1010,12>,<1030,13>)
```
 bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }

            if (bIndex == bAddresses.length) {
                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(7084,441,<172,12>,<181,9>)
```
 {
            Class c = Class.forName("sun.security.action.GetPropertyAction");
            Constructor constructor = c.getConstructor(new Class[]{
                String.class });
            java.security.PrivilegedAction a =
                (java.security.PrivilegedAction) constructor.newInstance(
                    new Object[]{ "user.home" });

            homedir = (String) java.security.AccessController.doPrivileged(a);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java|(10567,513,<315,16>,<326,13>)
```
 {
                Class c =
                    Class.forName("sun.security.action.GetPropertyAction");
                Constructor constructor = c.getConstructor(new Class[]{
                    String.class });
                java.security.PrivilegedAction a =
                    (java.security.PrivilegedAction) constructor.newInstance(
                        new Object[]{ "user.home" });

                homedir =
                    (String) java.security.AccessController.doPrivileged(a);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(21816,584,<766,50>,<788,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[colIndex[j]]);

            if (i != 0) {
                if (isSimpleOrder) {
                    return i;
                }

                boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;

                if (colDesc[j] && !nulls) {
                    i = -i;
                }

                if (nullsLast[j] && nulls) {
                    i = -i;
                }

                return i;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(23070,584,<811,54>,<833,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[colIndex[j]]);

            if (i != 0) {
                if (isSimpleOrder) {
                    return i;
                }

                boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;

                if (colDesc[j] && !nulls) {
                    i = -i;
                }

                if (nullsLast[j] && nulls) {
                    i = -i;
                }

                return i;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(44084,549,<1567,12>,<1587,18>)
```
 if (c == null) {
                break;
            }

            nodeData = c.getData(store);

            if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }

            break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(44728,549,<1593,12>,<1613,18>)
```
 if (c == null) {
                break;
            }

            nodeData = c.getData(store);

            if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }

            break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10347,759,<279,8>,<302,9>)
```
 for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowOutputText.java|(3358,523,<87,8>,<101,9>)
```
 //-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith("\n")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith("\n")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith("\n")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(3507,523,<97,8>,<111,9>)
```
 //-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith("\n")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith("\n")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith("\n")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(25573,1219,<701,8>,<725,51>)
```
 st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2354,1219,<56,8>,<80,51>)
```
 st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5448,609,<193,8>,<211,9>)
```
 sb.append(Tokens.T_WITH).append(' ');
        sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }

        if (isCycle()) {
            sb.append(' ').append(Tokens.T_CYCLE);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6755,669,<238,12>,<256,13>)
```
 sb.append(Tokens.T_WITH).append(' ');
            sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }

            if (isCycle()) {
                sb.append(' ').append(Tokens.T_CYCLE);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(21574,666,<756,16>,<778,17>)
```
 int delay = 0;

                if (token.tokenType == Tokens.TRUE) {
                    delay = database.getProperties().getDefaultWriteDelay();

                    read();
                } else if (token.tokenType == Tokens.FALSE) {
                    delay = 0;

                    read();
                } else {
                    delay = this.readInteger();

                    if (delay < 0) {
                        delay = 0;
                    }

                    if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(45685,666,<1514,16>,<1536,17>)
```
 int delay = 0;

                if (token.tokenType == Tokens.TRUE) {
                    delay = database.getProperties().getDefaultWriteDelay();

                    read();
                } else if (token.tokenType == Tokens.FALSE) {
                    delay = 0;

                    read();
                } else {
                    delay = this.readInteger();

                    if (delay < 0) {
                        delay = 0;
                    }

                    if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(14467,554,<612,8>,<624,9>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];

        if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(15212,554,<635,8>,<647,9>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];

        if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9638,719,<258,12>,<275,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10984,719,<293,12>,<310,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(12807,827,<423,8>,<450,9>)
```
 lookup = hashIndex.linkNode(index, lastLookup);

        // type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }

        if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(19484,827,<618,8>,<645,9>)
```
 lookup = hashIndex.linkNode(index, lastLookup);

        // type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }

        if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(24473,887,<660,56>,<699,5>)
```
 {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(21865,887,<549,56>,<588,5>)
```
 {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(131198,1227,<3541,12>,<3560,68>)
```
 addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157436,1227,<4268,12>,<4287,68>)
```
 addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2669,522,<72,12>,<86,58>)
```
 String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);

            ResultSet rs = statement.executeQuery(select);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4210,522,<129,12>,<143,58>)
```
 String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);

            ResultSet rs = statement.executeQuery(select);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2479,606,<68,12>,<82,13>)
```
 statement.execute(
                "create table t1 (i int primary key, c varchar(10), t varbinary(3))");

            String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4020,606,<125,12>,<139,13>)
```
 statement.execute(
                "create table t1 (i int primary key, c varchar(10), t varbinary(3))");

            String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)
```
 {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2914,<3440,12>,<3498,53>)
```
 // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
            row[declared_data_type] = row[data_type];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2598,533,<71,12>,<84,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4139,533,<128,12>,<141,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(7158,533,<223,12>,<236,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89188,718,<2151,16>,<2167,52>)
```
 row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
                row[iordinal_position] = ordinalPosition;
                row[iis_nullable]      = isNullable;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88108,598,<2120,8>,<2136,44>)
```
 row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
        row[iordinal_position] = ordinalPosition;
        row[iis_nullable]      = isNullable;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129312,757,<3143,8>,<3158,50>)
```
 //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133777,757,<3248,8>,<3263,50>)
```
 //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(172387,849,<4079,24>,<4094,48>)
```
 for (int i = 0; i < headerArray.length; i++) {
                            condlPrint("<TH>"
                                    + SqlFile.escapeHtml(headerArray[i])
                                    + "</TH>", true);
                            condlPrint(((i > 0) ? "  " : "")
                                    + ((i < headerArray.length - 1
                                        || rightJust[i])
                                       ? StringUtil.toPaddedString(
                                         headerArray[i], maxWidth[i],
                                         ' ', !rightJust[i])
                                       : headerArray[i])
                                    , false);
                        }

                        condlPrintln(LS + PRE_TR + "</TR>", true);
                        condlPrintln("", false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(188217,600,<4474,12>,<4486,36>)
```
 for (int i = 0; i < headerArray.length; i++) {
                condlPrint("<TH>"
                        + SqlFile.escapeHtml(headerArray[i]) + "</TH>", true);
                condlPrint(((i > 0) ? "  " : "")
                        + ((i < headerArray.length - 1 || rightJust[i])
                           ? StringUtil.toPaddedString(
                             headerArray[i], maxWidth[i], ' ', !rightJust[i])
                           : headerArray[i])
                        , false);
            }

            condlPrintln(LS + PRE_TR + "</TR>", true);
            condlPrintln("", false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130168,1934,<3163,8>,<3206,17>)
```
 Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(134633,1934,<3268,8>,<3311,17>)
```
 Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(50172,557,<1371,16>,<1386,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }

                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(51079,557,<1397,16>,<1412,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }

                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Session.java|(43693,823,<1461,19>,<1478,13>)
```
 if (in.isData()) {

                // FIXME:  we don't have what it takes yet
                // to differentiate between things like
                // stored procedure calls to methods with
                // void return type and select statements with
                // a single row/column containg null
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.CALL_RESPONSE) {
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.ERROR) {
                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
                error        = in;

                break;
            } else {
                throw Error.runtimeError(ErrorCode.U_S0500, "Session");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Session.java|(45745,823,<1521,19>,<1538,13>)
```
 if (in.isData()) {

                // FIXME:  we don't have what it takes yet
                // to differentiate between things like
                // stored procedure calls to methods with
                // void return type and select statements with
                // a single row/column containg null
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.CALL_RESPONSE) {
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.ERROR) {
                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
                error        = in;

                break;
            } else {
                throw Error.runtimeError(ErrorCode.U_S0500, "Session");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(25247,403,<763,16>,<771,17>)
```
 ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Update " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(28372,403,<851,16>,<859,17>)
```
 ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Update " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(29791,685,<892,0>,<910,17>)
```
 //                random = i;
                ps.setInt(1, random);

                count += ps.executeUpdate();

/*
                if ((i + 1) % 10000 == 0) {
                    Statement st = cConnection.createStatement();

                    st.execute("CHECKPOINT DEFRAG");
                    st.close();
                }
*/
                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("delete " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(31543,419,<945,16>,<954,17>)
```
 ps.setInt(1, random);

                count += ps.executeUpdate();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("delete " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(2791,331,<81,8>,<88,9>)
```
 String SeqName   = new String("_" + columnDesc.getString(4) + "_seq");
        int    spaceleft = 31 - SeqName.length();

        if (t.Stmts.sDestTable.length() > spaceleft) {
            SeqName = t.Stmts.sDestTable.substring(0, spaceleft) + SeqName;
        } else {
            SeqName = t.Stmts.sDestTable + SeqName;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(4216,416,<121,12>,<130,13>)
```
 String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3623,416,<99,12>,<108,13>)
```
 String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }
```


****************************************
******** Type 2 clone detection ********
****************************************
*****************************
** Clone percentage
** 6.906656004%
*****************************
** Number of clone classes:
** 144
*****************************
** Number of clones:
** 452
*****************************
** Size (SLOC) of largest clone: 
** 102
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>)}
** The largest clones in code:
** 
** largest clone number: 1
** reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**

** largest clone number: 2
** reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**

** largest clone number: 3
** reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**

** largest clone number: 4
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**

** largest clone number: 5
** reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**

*****************************
** The largest clone classes in SLOC:
** 1510
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**
reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**
reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**
reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**
reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**
reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
**
reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
**
reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
**
reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
**
reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
**
reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
**
reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
**
reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
**
reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
**
reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 2             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(8457,605,<212,4>,<237,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(8701,605,<234,4>,<259,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(12818,2705,<247,8>,<289,71>)
```
 //
        customRegularFuncMap.put(Tokens.ACOS, FUNC_ACOS);
        customRegularFuncMap.put(Tokens.ACTION_ID, FUNC_ACTION_ID);
        customRegularFuncMap.put(Tokens.ADD_MONTHS, FUNC_ADD_MONTHS);
        customRegularFuncMap.put(Tokens.ARRAY_SORT, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.ASCII, FUNC_ASCII);
        customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13155,2695,<253,8>,<294,65>)
```
 customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13461,2853,<258,8>,<301,63>)
```
 customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13772,2930,<263,8>,<307,57>)
```
 customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14076,2947,<268,8>,<312,54>)
```
 customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14484,2846,<274,8>,<317,61>)
```
 customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14879,2889,<280,8>,<323,79>)
```
 customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15202,2899,<285,8>,<328,63>)
```
 customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15532,2980,<290,8>,<334,62>)
```
 customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15859,2963,<295,8>,<339,59>)
```
 customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(16323,2827,<302,8>,<344,72>)
```
 customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(16711,2878,<308,8>,<350,79>)
```
 customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17032,2865,<313,8>,<355,59>)
```
 customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17339,2902,<318,8>,<360,55>)
```
 customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17777,2836,<324,8>,<365,65>)
```
 customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(18110,2851,<329,8>,<370,67>)
```
 customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(18521,2943,<335,8>,<377,67>)
```
 customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
        customRegularFuncMap.put(Tokens.TO_TIMESTAMP, FUNC_TO_TIMESTAMP);
//      customRegularFuncMap.put(Tokens.TO_TIMESTAMP_TZ, FUNC_TO_TIMESTAMP_TZ);
        customRegularFuncMap.put(Tokens.TRANSACTION_CONTROL,
                                 FUNC_TRANSACTION_CONTROL);
        customRegularFuncMap.put(Tokens.TRANSACTION_ID, FUNC_TRANSACTION_ID);
        customRegularFuncMap.put(Tokens.TRANSACTION_SIZE, FUNC_TRANSACTION_SIZE);
        customRegularFuncMap.put(Tokens.TRANSLATE, FUNC_TRANSLATE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128586,954,<2140,8>,<2159,43>)
```
 commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130113,859,<2173,8>,<2192,43>)
```
 commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(166776,559,<4263,8>,<4278,55>)
```
 Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(80984,550,<1921,8>,<1936,55>)
```
 Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129152,904,<2152,8>,<2171,39>)
```
 commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130616,992,<2185,8>,<2205,35>)
```
 commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(12159,654,<328,8>,<340,70>)
```
 System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(11905,654,<337,8>,<349,70>)
```
 System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/TarReader.java|(12858,553,<339,12>,<355,57>)
```
 while (readBlocks > 0) {
                readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;

                archive.readBlocks(readNow);

                readBlocks -= readNow;

                outPipe.write(archive.readBuffer, 0, readNow * 512);
            }

            if (modulus != 0) { archive.readBlock();
                outPipe.write(archive.readBuffer, 0, modulus);
            }

            outPipe.flush();    // Do any good on a pipe?
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/TarReader.java|(16496,567,<446,0>,<464,30>)
```
 //#endif
            while (readBlocks > 0) {
                readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;

                archive.readBlocks(readNow);

                readBlocks -= readNow;

                outStream.write(archive.readBuffer, 0, readNow * 512);
            }

            if (modulus != 0) {
                archive.readBlock();
                outStream.write(archive.readBuffer, 0, modulus);
            }

            outStream.flush();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19778,686,<552,8>,<562,53>)
```
 database.txConflictRollback =
            database.databaseProperties.isPropertyTrue(
                HsqlDatabaseProperties.hsqldb_tx_conflict_rollback);
        database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19941,657,<555,8>,<564,54>)
```
 database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20075,655,<557,8>,<566,53>)
```
 database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20209,653,<559,8>,<568,53>)
```
 database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20341,662,<561,8>,<570,61>)
```
 database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20473,662,<563,8>,<572,53>)
```
 database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20607,658,<565,8>,<574,52>)
```
 database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20739,656,<567,8>,<576,52>)
```
 database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20871,656,<569,8>,<578,53>)
```
 database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21012,668,<571,8>,<581,58>)
```
 database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
        database.sqlConvertTruncate =
            database.databaseProperties.isPropertyTrue(
                HsqlDatabaseProperties.sql_convert_trunc);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21819,640,<584,8>,<593,51>)
```
 database.sqlDoubleNaN = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_double_nan);
        database.sqlLongvarIsLob = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_longvar_is_lob);
        database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21947,640,<586,8>,<595,51>)
```
 database.sqlLongvarIsLob = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_longvar_is_lob);
        database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(22082,633,<588,8>,<597,51>)
```
 database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
        database.sqlSyntaxOra = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_ora);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(22212,631,<590,8>,<599,51>)
```
 database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
        database.sqlSyntaxOra = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_ora);
        database.sqlSyntaxPgs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_pgs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50291,739,<1558,8>,<1577,9>)
```
 if (HsqlDatabaseProperties.hsqldb_files_check.equals(name)) {
            return String.valueOf(propCheckPersistence);
        }

        if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50910,705,<1575,8>,<1594,9>)
```
 if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }

        if (HsqlDatabaseProperties.hsqldb_log_size.equals(name)) {
            return String.valueOf(propLogSize);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87298,581,<2094,8>,<2110,41>)
```
 final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;

        // JDBC 4.0
        final int icol_default      = 13;
        final int isql_data_type    = 14;
        final int isql_datetime_sub = 15;
        final int ichar_octet_len   = 16;
        final int iordinal_position = 17;
        final int iis_nullable      = 18;
        final int ispecific_name    = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59734,578,<1822,8>,<1833,68>)
```
 sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60075,576,<1829,8>,<1840,68>)
```
 sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62313,590,<1878,8>,<1889,68>)
```
 sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(137837,770,<3348,12>,<3361,78>)
```
 t = createBlankTable(sysTableHsqlNames[TABLE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50429,731,<1562,8>,<1581,9>)
```
 if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(51040,710,<1579,8>,<1598,9>)
```
 if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }

        if (HsqlDatabaseProperties.hsqldb_log_size.equals(name)) {
            return String.valueOf(propLogSize);
        }

        if (HsqlDatabaseProperties.hsqldb_nio_data_file.equals(name)) {
            return String.valueOf(propNioDataFile);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50152,748,<1554,8>,<1573,9>)
```
 if (HsqlDatabaseProperties.hsqldb_defrag_limit.equals(name)) {
            return String.valueOf(propCacheDefragLimit);
        }

        if (HsqlDatabaseProperties.hsqldb_files_check.equals(name)) {
            return String.valueOf(propCheckPersistence);
        }

        if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50774,715,<1571,8>,<1590,9>)
```
 if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64277,1634,<1923,8>,<1961,9>)
```
 if (database.sqlSyntaxDb2) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_DB2).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMss) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MSS).append(' ');
            sb.append(database.sqlSyntaxMss ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMys) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MYS).append(' ');
            sb.append(database.sqlSyntaxMys ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxOra) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_ORA).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64688,1634,<1933,8>,<1971,9>)
```
 if (database.sqlSyntaxMss) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MSS).append(' ');
            sb.append(database.sqlSyntaxMss ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMys) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MYS).append(' ');
            sb.append(database.sqlSyntaxMys ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxOra) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_ORA).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxPgs) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_PGS).append(' ');
            sb.append(database.sqlSyntaxPgs ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53069,2065,<1637,8>,<1695,9>)
```
 if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53348,2056,<1645,8>,<1703,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }

        if (HsqlDatabaseProperties.sql_syntax_pgs.equals(name)) {
            return String.valueOf(database.sqlSyntaxPgs);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4574,383,<133,4>,<145,5>)
```
 public static ResultLob newLobSetBytesRequest(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5635,385,<172,4>,<184,5>)
```
 public static ResultLob newLobGetBytesResponse(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_GET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(23672,1688,<643,4>,<699,5>)
```
 /**
     * This method frees the <code>Clob</code> object and releases the resources the resources
     * that it holds.  The object is invalid once the <code>free</code> method
     * is called.
     * <p>
     * After <code>free</code> has been called, any attempt to invoke a
     * method other than <code>free</code> will result in a <code>SQLException</code>
     * being thrown.  If <code>free</code> is called multiple times, the subsequent
     * calls to <code>free</code> are treated as a no-op.
     * <p>
     * @throws SQLException if an error occurs releasing
     * the Clob's resources
     *
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.4
     */
    public synchronized void free() throws SQLException {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(20443,2309,<516,4>,<588,5>)
```
 /**
     * This method frees the <code>Blob</code> object and releases the resources that
     * it holds. The object is invalid once the <code>free</code>
     * method is called.
     * <p>
     * After <code>free</code> has been called, any attempt to invoke a
     * method other than <code>free</code> will result in a <code>SQLException</code>
     * being thrown.  If <code>free</code> is called multiple times, the subsequent
     * calls to <code>free</code> are treated as a no-op.
     * <p>
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * This operation closes any input and/or output streams obtained
     * via {@link #getBinaryStream()}, {@link #getBinaryStream(long, long)} or
     * {@link #setBinaryStream(long)}. <p>
     *
     * Additionally, if the property {@link #isDeleteOnFree()} is true, then
     * an attempt is made to delete the backing file.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @throws SQLException if an error occurs releasing
     * the Blob's resources
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @see #setDeleteOnFree(boolean)
     * @see #isDeleteOnFree()
     * @since JDK 1.6
     */
    public synchronized void free() throws SQLException {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(3263,770,<86,11>,<102,5>)
```
 {
        aggregateFunctionSet.add(OpTypes.COUNT);
        aggregateFunctionSet.add(OpTypes.SUM);
        aggregateFunctionSet.add(OpTypes.MIN);
        aggregateFunctionSet.add(OpTypes.MAX);
        aggregateFunctionSet.add(OpTypes.AVG);
        aggregateFunctionSet.add(OpTypes.EVERY);
        aggregateFunctionSet.add(OpTypes.SOME);
        aggregateFunctionSet.add(OpTypes.STDDEV_POP);
        aggregateFunctionSet.add(OpTypes.STDDEV_SAMP);
        aggregateFunctionSet.add(OpTypes.VAR_POP);
        aggregateFunctionSet.add(OpTypes.VAR_SAMP);
        aggregateFunctionSet.add(OpTypes.GROUP_CONCAT);
        aggregateFunctionSet.add(OpTypes.ARRAY_AGG);
        aggregateFunctionSet.add(OpTypes.MEDIAN);
        aggregateFunctionSet.add(OpTypes.USER_AGGREGATE);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(4547,904,<123,8>,<137,67>)
```
 subqueryAggregateExpressionSet.add(OpTypes.COUNT);
        subqueryAggregateExpressionSet.add(OpTypes.SUM);
        subqueryAggregateExpressionSet.add(OpTypes.MIN);
        subqueryAggregateExpressionSet.add(OpTypes.MAX);
        subqueryAggregateExpressionSet.add(OpTypes.AVG);
        subqueryAggregateExpressionSet.add(OpTypes.EVERY);
        subqueryAggregateExpressionSet.add(OpTypes.SOME);
        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_POP);
        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_SAMP);
        subqueryAggregateExpressionSet.add(OpTypes.VAR_POP);
        subqueryAggregateExpressionSet.add(OpTypes.VAR_SAMP);
        subqueryAggregateExpressionSet.add(OpTypes.GROUP_CONCAT);
        subqueryAggregateExpressionSet.add(OpTypes.ARRAY_AGG);
        subqueryAggregateExpressionSet.add(OpTypes.MEDIAN);
        subqueryAggregateExpressionSet.add(OpTypes.USER_AGGREGATE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203021,1541,<5446,8>,<5488,9>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int routine_catalog  = 3;
        final int routine_schema   = 4;
        final int routine_name     = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206679,1533,<5553,8>,<5595,9>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int sequence_catalog = 3;
        final int sequence_schema  = 4;
        final int sequence_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(131001,1218,<3538,12>,<3557,59>)
```
 addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157239,1218,<4265,12>,<4284,59>)
```
 addColumn(t, "CHARACTER_SET_CATALOG", CHARACTER_DATA);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232073,1267,<6074,12>,<6093,63>)
```
 row[is_udt_dependent]                       = null;
            row[result_cast_from_data_type]             = null;
            row[result_cast_as_locator]                 = null;
            row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232265,1267,<6077,12>,<6096,63>)
```
 row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
            row[result_cast_scope_name]                 = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50185,682,<1399,8>,<1418,9>)
```
 Table t = sysTables[ADMINISTRABLE_ROLE_AUTHORIZATIONS];

        if (t == null) {
            t = createBlankTable(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS]);

            addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "ROLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(52057,614,<1455,8>,<1473,9>)
```
 Table t = sysTables[APPLICABLE_ROLES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[APPLICABLE_ROLES]);

            addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "ROLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[APPLICABLE_ROLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92593,1002,<2597,8>,<2616,50>)
```
 final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(125005,1002,<3393,8>,<3412,50>)
```
 final int domain_schema              = 1;
        final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
        final int numeric_precision          = 12;
        final int numeric_precision_radix    = 13;
        final int numeric_scale              = 14;
        final int datetime_precision         = 15;
        final int interval_type              = 16;
        final int interval_precision         = 17;
        final int domain_default             = 18;
        final int maximum_cardinality        = 19;
        final int dtd_identifier             = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159048,962,<4301,8>,<4320,48>)
```
 final int specific_schem           = 1;
        final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
        final int character_maximum_length = 15;
        final int character_octet_length   = 16;
        final int character_set_catalog    = 17;
        final int character_set_schema     = 18;
        final int character_set_name       = 19;
        final int collation_catalog        = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219128,1242,<5837,8>,<5856,62>)
```
 final int specific_schema                        = 1;
        final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299340,1002,<7877,8>,<7896,50>)
```
 final int user_defined_type_schema   = 1;
        final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
        final int character_set_catalog      = 15;
        final int character_set_schema       = 16;
        final int character_set_name         = 17;
        final int collation_catalog          = 18;
        final int collation_schema           = 19;
        final int collation_name             = 20;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92693,2024,<2599,8>,<2638,50>)
```
 final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219252,2504,<5839,8>,<5878,62>)
```
 final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203296,1285,<5454,8>,<5490,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206954,1277,<5561,8>,<5597,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185913,1005,<4970,8>,<4993,9>)
```
 Table t = sysTables[ROLE_USAGE_GRANTS];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(290947,1196,<7681,8>,<7707,9>)
```
 Table t = sysTables[USAGE_PRIVILEGES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[USAGE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEM, TABLE_CAT
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[USAGE_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(4723,556,<169,4>,<189,5>)
```
 NodeAVL getLeft(PersistentStore store) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (node.iLeft == NO_POS) {
            return null;
        }

        if (node.nLeft == null || !node.nLeft.isInMemory()) {
            node.nLeft         = findNode(store, node.iLeft);
            node.nLeft.nParent = node;
        }

        return node.nLeft;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(5285,564,<191,4>,<211,5>)
```
 NodeAVL getRight(PersistentStore store) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (node.iRight == NO_POS) {
            return null;
        }

        if (node.nRight == null || !node.nRight.isInMemory()) {
            node.nRight         = findNode(store, node.iRight);
            node.nRight.nParent = node;
        }

        return node.nRight;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95634,573,<3340,4>,<3364,5>)
```
 Expression XreadDatetimeValueExpression() {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(96213,573,<3366,4>,<3390,5>)
```
 Expression XreadIntervalValueExpression() {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>)
```
 reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>)
```
 reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>)
```
 reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>)
```
 reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>)
```
 reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>)
```
 reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>)
```
 reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>)
```
 reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>)
```
 reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>)
```
 reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>)
```
 reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>)
```
 reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>)
```
 reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>)
```
 reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)
```
 reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9078,732,<341,4>,<369,5>)
```
 NodeAVL setLeft(PersistentStore store, NodeAVL n) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nLeft = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9816,736,<371,4>,<399,5>)
```
 NodeAVL setRight(PersistentStore store, NodeAVL n) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nRight = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(124703,7405,<3032,4>,<3207,5>)
```
 /**
     * The SEQUENCES view has one row for each external sequence
     * generator. <p>
     *
     * <b>Definition:</b> <p>
     *
     * <pre class="SqlCodeExample">
     *
     *      SEQUENCE_CATALOG     VARCHAR NULL,
     *      SEQUENCE_SCHEMA      VARCHAR NULL,
     *      SEQUENCE_NAME        VARCHAR NOT NULL,
     *      DATA_TYPE            CHARACTER_DATA
     *      DATA_TYPE            CHARACTER_DATA
     *      NUMERIC_PRECISION    CARDINAL_NUMBER
     *      NUMERIC_PRECISION_RADIX CARDINAL_NUMBER
     *      NUMERIC_SCALE        CARDINAL_NUMBER
     *      MAXIMUM_VALUE        VARCHAR NOT NULL,
     *      MINIMUM_VALUE        VARCHAR NOT NULL,
     *      INCREMENT            VARCHAR NOT NULL,
     *      CYCLE_OPTION         VARCHAR {'YES', 'NO'},
     *      START_WITH           VARCHAR NOT NULL,
     *      DECLARED_DATA_TYPE   CHARACTER_DATA
     *      DECLARED_NUMERIC_PRECISION CARDINAL_NUMBER
     *      DECLARED_NUMERIC_SCALE     CARDINAL_NUMBER
     *
     * </pre>
     *
     * <b>DESCRIPTION:</b><p>
     *
     * <ol>
     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, and
     *      SEQUENCE_NAME are the catalog name, unqualified schema name,
     *      and qualified identifier, respectively, of the sequence generator
     *      being described. <p>
     *
     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, and
     *      DTD_IDENTIFIER are the values of OBJECT_CATALOG, OBJECT_SCHEMA,
     *      OBJECT_NAME, and DTD_IDENTIFIER, respectively, of the row in
     *      DATA_TYPE_DESCRIPTOR (not yet implemented) that describes the data
     *      type of the sequence generator. <p>
     *
     * <li> The values of MAXIMUM_VALUE, MINIMUM_VALUE, and INCREMENT are the
     *      character representations of maximum value, minimum value,
     *      and increment, respectively, of the sequence generator being
     *      described. <p>
     *
     * <li> The values of CYCLE_OPTION have the following meanings: <p>
     *
     *      <table border cellpadding="3">
     *          <tr>
     *              <td nowrap>YES</td>
     *              <td nowrap>The cycle option of the sequence generator
     *                         is CYCLE.</td>
     *          <tr>
     *              <td nowrap>NO</td>
     *              <td nowrap>The cycle option of the sequence generator is
     *                         NO CYCLE.</td>
     *          </tr>
     *      </table> <p>
     *
     * <li> The value of START_WITH is HSQLDB-specific (not in the SQL 200n
     *      spec).  <p>
     *
     *      It is the character representation of the START WITH value. <p>
     *
     * <li> The value of NEXT_VALUE is HSQLDB-specific (not in the SQL 200n)<p>
     *      This is the character representation of the value that
     *      would be generated by NEXT VALUE FOR when this sequence
     *      is materialized in an SQL statement. <p>
     * </ol>
     *
     * @return Table
     */
    final Table SEQUENCES(Session session, PersistentStore store) {

        Table t = sysTables[SEQUENCES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[SEQUENCES]);

            addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }

        //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(132114,4459,<3209,4>,<3312,5>)
```
 final Table SYSTEM_SEQUENCES(Session session, PersistentStore store) {

        Table t = sysTables[SYSTEM_SEQUENCES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[SYSTEM_SEQUENCES]);

            addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SEQUENCES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }

        //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(99989,1409,<2369,24>,<2393,21>)
```
 {
                        Matcher mathMatcher =
                                mathAsgnPattern.matcher(iterableAssignmentStr);
                        if (mathMatcher.matches()) {
                            shared.userVars.put(
                                    mathMatcher.group(1), Long.toString(
                                    Calculator.reassignValue(
                                    mathMatcher.group(1),
                                    shared.userVars, mathMatcher.group(2),
                                    (mathMatcher.groupCount() < 3)
                                    ? null : mathMatcher.group(3))));
                        } else {
                            mathMatcher =
                                    mathPattern.matcher(iterableAssignmentStr);
                            if (mathMatcher.matches())
                                shared.userVars.put(
                                        mathMatcher.group(1), Long.toString(
                                        new Calculator(
                                        ((mathMatcher.groupCount() > 1
                                        && mathMatcher.group(2) != null)
                                        ? mathMatcher.group(2)
                                        : ""),
                                        shared.userVars).reduce(0, false)));
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(97979,993,<2329,16>,<2345,17>)
```
 Matcher mathMatcher =
                        mathAsgnPattern.matcher(initAssignmentStr);
                if (mathMatcher.matches()) {
                    shared.userVars.put(mathMatcher.group(1), Long.toString(
                            Calculator.reassignValue(mathMatcher.group(1),
                            shared.userVars, mathMatcher.group(2),
                            (mathMatcher.groupCount() < 3)
                            ? null : mathMatcher.group(3))));
                } else {
                    mathMatcher = mathPattern.matcher(initAssignmentStr);
                    if (mathMatcher.matches())
                        shared.userVars.put(mathMatcher.group(1), Long.toString(
                                new Calculator(((mathMatcher.groupCount() > 1
                                && mathMatcher.group(2) != null)
                                ? mathMatcher.group(2)
                                : ""), shared.userVars).reduce(0, false)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121419,626,<2946,8>,<2967,67>)
```
 String  tableName;
        Grantee granteeObject;

// intermediate holders
        User     user;
        Iterator tables;
        Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
        final int is_grantable   = 7;

        // enumerations
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(138864,621,<3373,8>,<3392,67>)
```
 String  tableName;
        Grantee granteeObject;
        String  privilege;

        // intermediate holders
        Iterator tables;
        Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
        final int with_hierarchy = 7;
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(4229,584,<139,4>,<152,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7785,584,<251,4>,<264,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(6055,584,<189,4>,<202,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(74944,543,<2049,37>,<2064,13>)
```
 {
                int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Number) nodes[0].valueData).intValue();
                }

                if (precision == DateTimeType.defaultTimeFractionPrecision) {
                    return name;
                }

                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
                sb.append(Tokens.T_CLOSEBRACKET);

                return sb.toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(75569,577,<2066,42>,<2082,13>)
```
 {
                int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Number) nodes[0].valueData).intValue();
                }

                if (precision
                        == DateTimeType.defaultTimestampFractionPrecision) {
                    return name;
                }

                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
                sb.append(Tokens.T_CLOSEBRACKET);

                return sb.toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(49125,727,<1246,20>,<1259,21>)
```
 for (int i = 0; i < table.fkMainConstraints.length; i++) {
                        if (table.fkMainConstraints[i].getRef() != table) {
                            HsqlName tableName =
                                table.fkMainConstraints[i].getRef().getName();
                            Table refTable =
                                session.database.schemaManager.getUserTable(
                                    session, tableName);

                            if (!refTable.isEmpty(session)) {
                                throw Error.error(ErrorCode.X_23504,
                                                  refTable.getName().name);
                            }
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(41512,606,<1188,8>,<1201,9>)
```
 for (int i = 0; i < targetTable.fkMainConstraints.length; i++) {
            if (targetTable.fkMainConstraints[i].getRef() != targetTable) {
                HsqlName tableName =
                    targetTable.fkMainConstraints[i].getRef().getName();
                Table refTable =
                    session.database.schemaManager.getUserTable(session,
                        tableName);

                if (!refTable.isEmpty(session)) {
                    throw Error.error(ErrorCode.X_23504,
                                      refTable.getName().name);
                }
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(5134,818,<138,4>,<159,5>)
```
 public synchronized int decode(byte[] source, int sourceOffset,
                                   int length, byte[] dest, int destOffset) {

        if (inCipher == null) {
            return length;
        }

        try {
            inCipher.init(Cipher.DECRYPT_MODE, key);

            return inCipher.doFinal(source, sourceOffset, length, dest,
                                    destOffset);
        } catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(5958,822,<161,4>,<182,5>)
```
 public synchronized int encode(byte[] source, int sourceOffset,
                                   int length, byte[] dest, int destOffset) {

        if (outCipher == null) {
            return length;
        }

        try {
            outCipher.init(Cipher.ENCRYPT_MODE, key);

            return outCipher.doFinal(source, sourceOffset, length, dest,
                                     destOffset);
        } catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62040,450,<1797,8>,<1816,23>)
```
 String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30131,450,<974,8>,<993,23>)
```
 String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13155,6434,<253,8>,<350,79>)
```
 customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13772,6469,<263,8>,<360,55>)
```
 customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14484,6477,<274,8>,<370,67>)
```
 customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(6732,712,<198,4>,<215,5>)
```
 public static long convertMillisToCalendar(Calendar calendar,
            long millis) {

        synchronized (tempCalGMT) {
            synchronized (calendar) {
                calendar.clear();
                tempCalGMT.setTimeInMillis(millis);
                calendar.set(tempCalGMT.get(Calendar.YEAR),
                             tempCalGMT.get(Calendar.MONTH),
                             tempCalGMT.get(Calendar.DAY_OF_MONTH),
                             tempCalGMT.get(Calendar.HOUR_OF_DAY),
                             tempCalGMT.get(Calendar.MINUTE),
                             tempCalGMT.get(Calendar.SECOND));

                return calendar.getTimeInMillis();
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(7450,716,<217,4>,<234,5>)
```
 public static long convertMillisFromCalendar(Calendar calendar,
            long millis) {

        synchronized (tempCalGMT) {
            synchronized (calendar) {
                tempCalGMT.clear();
                calendar.setTimeInMillis(millis);
                tempCalGMT.set(calendar.get(Calendar.YEAR),
                               calendar.get(Calendar.MONTH),
                               calendar.get(Calendar.DAY_OF_MONTH),
                               calendar.get(Calendar.HOUR_OF_DAY),
                               calendar.get(Calendar.MINUTE),
                               calendar.get(Calendar.SECOND));

                return tempCalGMT.getTimeInMillis();
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130518,2299,<2183,8>,<2233,43>)
```
 commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141273,2421,<2418,8>,<2467,37>)
```
 commandSet.put(T_NEXT_DAY, NEXT_DAY);
        commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL);
        commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL);
        commandSet.put(T_NVL, Tokens.IFNULL);
        commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128456,952,<2137,8>,<2156,45>)
```
 commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129983,857,<2170,8>,<2189,47>)
```
 commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129016,916,<2149,8>,<2168,51>)
```
 commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130470,1025,<2182,8>,<2202,67>)
```
 commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(45842,1167,<1516,50>,<1552,13>)
```
 {
                read();

                if (token.tokenType == Tokens.SET) {
                    read();

                    switch (token.tokenType) {

                        case Tokens.DEFAULT : {
                            read();

                            deleteAction =
                                SchemaObject.ReferentialAction.SET_DEFAULT;

                            break;
                        }
                        case Tokens.NULL :
                            read();

                            deleteAction =
                                SchemaObject.ReferentialAction.SET_NULL;
                            break;

                        default :
                            throw unexpectedToken();
                    }
                } else if (token.tokenType == Tokens.CASCADE) {
                    read();

                    deleteAction = SchemaObject.ReferentialAction.CASCADE;
                } else if (token.tokenType == Tokens.RESTRICT) {
                    read();
                } else {
                    readThis(Tokens.NO);
                    readThis(Tokens.ACTION);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(47053,1167,<1552,57>,<1588,13>)
```
 {
                read();

                if (token.tokenType == Tokens.SET) {
                    read();

                    switch (token.tokenType) {

                        case Tokens.DEFAULT : {
                            read();

                            updateAction =
                                SchemaObject.ReferentialAction.SET_DEFAULT;

                            break;
                        }
                        case Tokens.NULL :
                            read();

                            updateAction =
                                SchemaObject.ReferentialAction.SET_NULL;
                            break;

                        default :
                            throw unexpectedToken();
                    }
                } else if (token.tokenType == Tokens.CASCADE) {
                    read();

                    updateAction = SchemaObject.ReferentialAction.CASCADE;
                } else if (token.tokenType == Tokens.RESTRICT) {
                    read();
                } else {
                    readThis(Tokens.NO);
                    readThis(Tokens.ACTION);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(9201,538,<271,4>,<285,5>)
```
 void populateBySerialIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(i, new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(11452,538,<336,4>,<350,5>)
```
 void populateByRandomIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(intValue), new Integer(i));
            hMap.put(intValue, new Integer(i));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(8659,536,<255,4>,<269,5>)
```
 void populateBySerialIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(new Integer(i), new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(10910,536,<320,4>,<334,5>)
```
 void populateByRandomIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(intValue), new Integer(i));
            hMap.put(new Integer(intValue), new Integer(i));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53798,517,<1746,8>,<1764,44>)
```
 readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);

        statement.setStatements(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(54986,519,<1788,8>,<1806,44>)
```
 readThis(Tokens.END);
        readThis(Tokens.REPEAT);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.REPEAT, label);

        statement.setStatements(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55852,509,<1820,8>,<1838,41>)
```
 readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound result = new StatementCompound(StatementTypes.LOOP,
            label);

        result.setStatements(statements);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11051,622,<380,4>,<403,5>)
```
 NodeAVL setLeft(PersistentStore store, NodeAVL n) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : (int) n.getPos();
        node.nLeft = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11679,626,<405,4>,<428,5>)
```
 NodeAVL setRight(PersistentStore store, NodeAVL n) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : (int) n.getPos();
        node.nRight = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59982,575,<1827,8>,<1838,32>)
```
 sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62218,591,<1876,8>,<1887,32>)
```
 sb.append(Tokens.T_UNIQUE).append(' ');
        sb.append(Tokens.T_NULLS).append(' ');
        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(6881,546,<213,4>,<233,5>)
```
 NodeAVL getLeft(PersistentStore store) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (node.iLeft == NO_POS) {
            return null;
        }

        if (node.nLeft == null || !node.nLeft.isInMemory()) {
            node.nLeft         = findNode(store, node.iLeft);
            node.nLeft.nParent = node;
        }

        return node.nLeft;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(7433,554,<235,4>,<255,5>)
```
 NodeAVL getRight(PersistentStore store) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (node.iRight == NO_POS) {
            return null;
        }

        if (node.nRight == null || !node.nRight.isInMemory()) {
            node.nRight         = findNode(store, node.iRight);
            node.nRight.nParent = node;
        }

        return node.nRight;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(33537,1324,<842,28>,<867,60>)
```
 // This field is just swallowed by PG ODBC
                            // client, but OdbcUtil.validated by psql.
                            for (int i = 0; i < columnCount; i++) {
                                if (rowData[i] == null) {
                                    /*
                                    server.printWithThread("R" + rowNum + "C"
                                        + (i+1) + " => [null]");
                                    */
                                    outPacket.writeInt(-1);
                                } else {
                                    dataString =
                                        pgTypes[i].valueString(rowData[i]);

                                    outPacket.writeSized(dataString);

                                    if (server.isTrace()) {
                                        server.printWithThread(
                                            "R" + rowNum + "C" + (i + 1)
                                            + " => ("
                                            + rowData[i].getClass().getName()
                                            + ") [" + dataString + ']');
                                    }
                                }
                            }

                            outPacket.xmit('D', dataOutput);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(56775,1059,<1360,24>,<1382,56>)
```
 for (int i = 0; i < colCount; i++) {
                            if (rowData[i] == null) {
                                /*
                                server.printWithThread("R" + rowNum + "C"
                                    + (i+1) + " => [null]");
                                */
                                outPacket.writeInt(-1);
                            } else {
                                dataString =
                                    pgTypes[i].valueString(rowData[i]);

                                outPacket.writeSized(dataString);

                                if (server.isTrace()) {
                                    server.printWithThread(
                                        "R" + rowNum + "C" + (i + 1) + " => ("
                                        + rowData[i].getClass().getName()
                                        + ") [" + dataString + ']');
                                }
                            }
                        }

                        outPacket.xmit('D', dataOutput);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59888,517,<1825,8>,<1835,47>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62124,525,<1874,8>,<1884,49>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_UNIQUE).append(' ');
        sb.append(Tokens.T_NULLS).append(' ');
        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62465,530,<1881,8>,<1891,46>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_AVG).append(' ');
        sb.append(Tokens.T_SCALE).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59130,628,<1935,8>,<1956,33>)
```
 if (token.tokenType == Tokens.ELSE) {
            read();

            e = Expression.EXPR_TRUE;
            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION, e);

            list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
        }

        readThis(Tokens.END);
        readThis(Tokens.IF);

        statements = new Statement[list.size()];

        list.toArray(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(60395,694,<1981,8>,<2003,33>)
```
 if (token.tokenType == Tokens.ELSE) {
            read();

            condition = Expression.EXPR_TRUE;
            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
        }

        readThis(Tokens.END);
        readThis(Tokens.CASE);

        statements = new Statement[list.size()];

        list.toArray(statements);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53828,530,<1747,8>,<1765,42>)
```
 readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);

        statement.setStatements(statements);
        statement.setCondition(condition);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55016,532,<1789,8>,<1807,42>)
```
 readThis(Tokens.REPEAT);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.REPEAT, label);

        statement.setStatements(statements);
        statement.setCondition(condition);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(52930,688,<1633,8>,<1651,9>)
```
 if (HsqlDatabaseProperties.sql_concat_nulls.equals(name)) {
            return String.valueOf(database.sqlConcatNulls);
        }

        if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53069,688,<1637,8>,<1655,9>)
```
 if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53213,683,<1641,8>,<1659,9>)
```
 if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53348,687,<1645,8>,<1663,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53489,687,<1649,8>,<1667,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53628,685,<1653,8>,<1671,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53767,688,<1657,8>,<1675,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53906,686,<1661,8>,<1679,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54045,684,<1665,8>,<1683,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54186,678,<1669,8>,<1687,9>)
```
 if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54323,676,<1673,8>,<1691,9>)
```
 if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54465,669,<1677,8>,<1695,9>)
```
 if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54602,667,<1681,8>,<1699,9>)
```
 if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54739,665,<1685,8>,<1703,9>)
```
 if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }

        if (HsqlDatabaseProperties.sql_syntax_pgs.equals(name)) {
            return String.valueOf(database.sqlSyntaxPgs);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53700,569,<1743,8>,<1762,63>)
```
 Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55754,564,<1817,8>,<1836,19>)
```
 Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound result = new StatementCompound(StatementTypes.LOOP,
            label);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2114,1397,<51,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,1460,<54,8>,<77,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2510,1456,<57,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(262315,1539,<6917,8>,<6961,9>)
```
 // column number mappings
        final int trigger_catalog  = 0;
        final int trigger_schema   = 1;
        final int trigger_name     = 2;
        final int specific_catalog = 3;
        final int specific_schema  = 4;
        final int specific_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(265973,1531,<7026,8>,<7070,9>)
```
 // column number mappings
        final int trigger_catalog  = 0;
        final int trigger_schema   = 1;
        final int trigger_name     = 2;
        final int sequence_catalog = 3;
        final int sequence_schema  = 4;
        final int sequence_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(262590,1283,<6925,8>,<6963,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(266248,1301,<7034,8>,<7073,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        // Initialization
        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(94165,756,<2628,8>,<2642,50>)
```
 final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
        final int declared_data_type         = 44;
        final int declared_numeric_precision = 45;
        final int declared_numeric_scale     = 46;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(221072,936,<5868,8>,<5882,62>)
```
 final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
        final int sql_path                               = 44;
        final int schema_level_routine                   = 45;
        final int max_dynamic_result_sets                = 46;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92643,1513,<2598,8>,<2627,50>)
```
 final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159096,1453,<4302,8>,<4331,48>)
```
 final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
        final int character_maximum_length = 15;
        final int character_octet_length   = 16;
        final int character_set_catalog    = 17;
        final int character_set_schema     = 18;
        final int character_set_name       = 19;
        final int collation_catalog        = 20;
        final int collation_schema         = 21;
        final int collation_name           = 22;
        final int numeric_precision        = 23;
        final int numeric_precision_radix  = 24;
        final int numeric_scale            = 25;
        final int datetime_precision       = 26;
        final int interval_type            = 27;
        final int interval_precision       = 28;
        final int udt_catalog              = 29;
        final int udt_schema               = 30;
        final int udt_name                 = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219190,1873,<5838,8>,<5867,62>)
```
 final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299390,1513,<7878,8>,<7907,50>)
```
 final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
        final int character_set_catalog      = 15;
        final int character_set_schema       = 16;
        final int character_set_name         = 17;
        final int collation_catalog          = 18;
        final int collation_schema           = 19;
        final int collation_name             = 20;
        final int numeric_precision          = 21;
        final int numeric_precision_radix    = 22;
        final int numeric_scale              = 23;
        final int datetime_precision         = 24;
        final int interval_type              = 25;
        final int interval_precision         = 26;
        final int source_dtd_identifier      = 27;
        final int ref_dtd_identifier         = 28;
        final int declared_data_type         = 29;
        final int declared_numeric_precision = 30;
        final int declared_numeric_scale     = 31;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127680,1327,<2119,8>,<2148,47>)
```
 commandSet.put(T_ACTION, ACTION);
        commandSet.put(T_ADD, ADD);
        commandSet.put(T_ADMIN, ADMIN);
        commandSet.put(T_AFTER, AFTER);
        commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127838,1355,<2123,8>,<2152,49>)
```
 commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129325,1282,<2155,8>,<2184,53>)
```
 commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130699,1401,<2187,8>,<2217,45>)
```
 commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130897,1374,<2191,8>,<2221,43>)
```
 commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131065,1394,<2195,8>,<2225,49>)
```
 commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131261,1390,<2199,8>,<2229,53>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131542,1275,<2204,8>,<2233,43>)
```
 commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131699,1274,<2208,8>,<2237,35>)
```
 commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131865,1262,<2212,8>,<2241,41>)
```
 commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132017,1280,<2216,8>,<2245,41>)
```
 commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132192,1283,<2220,8>,<2249,49>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132368,1272,<2224,8>,<2253,45>)
```
 commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132564,1248,<2228,8>,<2257,43>)
```
 commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132744,1238,<2232,8>,<2261,37>)
```
 commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132902,1264,<2236,8>,<2265,41>)
```
 commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,1292,<2240,8>,<2269,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133222,1296,<2244,8>,<2273,47>)
```
 commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133384,1300,<2248,8>,<2277,41>)
```
 commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133559,1315,<2252,8>,<2281,41>)
```
 commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133731,1313,<2256,8>,<2285,41>)
```
 commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133917,1307,<2260,8>,<2289,49>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134089,1323,<2264,8>,<2293,45>)
```
 commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134265,1345,<2268,8>,<2297,51>)
```
 commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134435,1387,<2272,8>,<2301,61>)
```
 commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134609,1433,<2276,8>,<2305,47>)
```
 commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134787,1455,<2280,8>,<2309,47>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134965,1483,<2284,8>,<2313,55>)
```
 commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135133,1527,<2288,8>,<2317,51>)
```
 commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135323,1587,<2292,8>,<2321,57>)
```
 commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135521,1617,<2296,8>,<2325,53>)
```
 commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135717,1605,<2300,8>,<2329,41>)
```
 commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135955,1528,<2304,8>,<2333,47>)
```
 commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136157,1526,<2308,8>,<2337,53>)
```
 commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136355,1512,<2312,8>,<2341,35>)
```
 commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136565,1566,<2316,8>,<2345,74>)
```
 commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136807,1490,<2320,8>,<2349,39>)
```
 commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137035,1428,<2324,8>,<2353,43>)
```
 commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137249,1394,<2328,8>,<2359,37>)
```
 commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137406,1425,<2332,8>,<2363,39>)
```
 commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137570,1419,<2336,8>,<2367,41>)
```
 commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137794,1373,<2340,8>,<2371,39>)
```
 commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141485,1417,<2422,8>,<2451,43>)
```
 commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141673,1433,<2426,8>,<2455,47>)
```
 commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141859,1441,<2430,8>,<2459,39>)
```
 commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142083,1425,<2434,8>,<2463,47>)
```
 commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142251,1443,<2438,8>,<2467,37>)
```
 commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142461,1513,<2442,8>,<2473,77>)
```
 commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142631,1583,<2446,8>,<2477,63>)
```
 commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);
        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java|(8301,744,<265,4>,<285,5>)
```
 /**
     *  File is opened in append mode although in current usage the file
     *  never pre-exists
     */
    protected void openFile() {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(3786,630,<102,4>,<118,5>)
```
 protected void openFile() {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(6191,2611,<166,12>,<228,13>)
```
 if (Stmts.bDropIndex) {
                if (Stmts.sDestDropIndex.charAt(Stmts.sDestDropIndex.length()
                                                - 1) != ';') {
                    Stmts.sDestDropIndex += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDropIndex.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDropIndex.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDropIndex.substring(
                                        lastsemicolon).indexOf(';');
                }
            }

            if (Stmts.bDelete) {
                if (Stmts.sDestDelete.charAt(Stmts.sDestDelete.length() - 1)
                        != ';') {
                    Stmts.sDestDelete += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDelete.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDelete.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDelete.substring(
                                        lastsemicolon).indexOf(';');
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(7526,2582,<198,12>,<260,13>)
```
 if (Stmts.bDelete) {
                if (Stmts.sDestDelete.charAt(Stmts.sDestDelete.length() - 1)
                        != ';') {
                    Stmts.sDestDelete += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDelete.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDelete.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDelete.substring(
                                        lastsemicolon).indexOf(';');
                }
            }

            if (Stmts.bDrop) {
                if (Stmts.sDestDrop.charAt(Stmts.sDestDrop.length() - 1)
                        != ';') {
                    Stmts.sDestDrop += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDrop.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDrop.substring(lastsemicolon,
                                                          nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDrop.substring(
                                        lastsemicolon).indexOf(';');
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(32327,844,<899,16>,<920,17>)
```
 OrderedHashSet tableSet          = new OrderedHashSet();
                OrderedHashSet constraintNameSet = new OrderedHashSet();
                OrderedHashSet indexNameSet      = new OrderedHashSet();

                for (int i = 0; i < dependentConstraints.size(); i++) {
                    Constraint c = (Constraint) dependentConstraints.get(i);
                    Table      t = c.getMain();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
                    constraintNameSet.add(c.getRefName());
                    indexNameSet.add(c.getRefIndex().getName());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(27930,714,<944,8>,<965,9>)
```
 OrderedHashSet tableSet          = new OrderedHashSet();
        OrderedHashSet constraintNameSet = new OrderedHashSet();
        OrderedHashSet indexNameSet      = new OrderedHashSet();

        for (int i = 0; i < externalConstraints.size(); i++) {
            Constraint c = (Constraint) externalConstraints.get(i);
            Table      t = c.getMain();

            if (t != table) {
                tableSet.add(t);
            }

            t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(93511,384,<2210,12>,<2221,64>)
```
 e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.sysprop_empty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.sysprop_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');

            varName = s.substring(b + (permitUnset ? 3 : 2), e);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(94641,384,<2246,12>,<2257,64>)
```
 e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.plvar_nameempty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.plvar_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');

            varName = s.substring(b + (permitUnset ? 3 : 2), e);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialog.java|(10591,311,<341,4>,<351,5>)
```
 public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java|(13295,311,<381,4>,<391,5>)
```
 public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121324,556,<2943,0>,<2962,37>)
```
 // calculated column values
        String  tableCatalog;
        String  tableSchema;
        String  tableName;
        Grantee granteeObject;

// intermediate holders
        User     user;
        Iterator tables;
        Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(138769,576,<3370,8>,<3389,37>)
```
 // calculated column values
        String  tableCatalog;
        String  tableSchema;
        String  tableName;
        Grantee granteeObject;
        String  privilege;

        // intermediate holders
        Iterator tables;
        Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestQuotes.java|(4242,848,<117,12>,<147,13>)
```
 if (rs2 != null) {
                try {
                    rs2.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (pStatement != null) {
                try {
                    pStatement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestQuotes.java|(4451,862,<125,12>,<155,13>)
```
 if (rs1 != null) {
                try {
                    rs1.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (pStatement != null) {
                try {
                    pStatement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(161641,599,<5185,4>,<5205,5>)
```
 void checkSchemaUpdateAuthorisation(Session session, HsqlName schema) {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(57056,618,<1482,4>,<1503,5>)
```
 static void checkSchemaUpdateAuthorisation(Session session,
            HsqlName schema) {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(2780,708,<70,12>,<84,50>)
```
 outCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outCipher.init(Cipher.ENCRYPT_MODE, key);

            outStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(3036,710,<76,12>,<90,50>)
```
 outStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);

            inCipher.init(Cipher.DECRYPT_MODE, key);

            inStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63270,563,<2198,4>,<2218,5>)
```
 void fireTriggers(Session session, int trigVecIndex,
                      RowSetNavigatorDataChange rowSet) {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63839,553,<2220,4>,<2240,5>)
```
 void fireTriggers(Session session, int trigVecIndex,
                      RowSetNavigator rowSet) {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(11698,714,<400,8>,<419,9>)
```
 if (!containsRights(isFullSelect, selectColumnSet,
                            right.selectColumnSet, right.isFullSelect)) {
            return false;
        }

        if (!containsRights(isFullInsert, insertColumnSet,
                            right.insertColumnSet, right.isFullInsert)) {
            return false;
        }

        if (!containsRights(isFullUpdate, updateColumnSet,
                            right.updateColumnSet, right.isFullUpdate)) {
            return false;
        }

        if (!containsRights(isFullReferences, referencesColumnSet,
                            right.referencesColumnSet,
                            right.isFullReferences)) {
            return false;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(11868,718,<405,8>,<424,9>)
```
 if (!containsRights(isFullInsert, insertColumnSet,
                            right.insertColumnSet, right.isFullInsert)) {
            return false;
        }

        if (!containsRights(isFullUpdate, updateColumnSet,
                            right.updateColumnSet, right.isFullUpdate)) {
            return false;
        }

        if (!containsRights(isFullReferences, referencesColumnSet,
                            right.referencesColumnSet,
                            right.isFullReferences)) {
            return false;
        }

        if (!containsRights(isFullTrigger, triggerColumnSet,
                            right.triggerColumnSet, right.isFullTrigger)) {
            return false;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(130410,469,<3531,37>,<3540,13>)
```
 {
                String token = Tokens.getSQLTSIString(
                    ((Number) nodes[0].getValue(null)).intValue());

                return new StringBuffer(Tokens.T_TIMESTAMPADD).append(
                    Tokens.T_OPENBRACKET).append(token).append(
                    Tokens.T_COMMA).append(nodes[1].getSQL()).append(
                    Tokens.T_COMMA).append(nodes[2].getSQL()).append(
                    Tokens.T_CLOSEBRACKET).toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(130918,470,<3541,38>,<3550,13>)
```
 {
                String token = Tokens.getSQLTSIString(
                    ((Number) nodes[0].getValue(null)).intValue());

                return new StringBuffer(Tokens.T_TIMESTAMPDIFF).append(
                    Tokens.T_OPENBRACKET).append(token).append(
                    Tokens.T_COMMA).append(nodes[1].getSQL()).append(
                    Tokens.T_COMMA).append(nodes[2].getSQL()).append(
                    Tokens.T_CLOSEBRACKET).toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(5668,638,<178,4>,<204,5>)
```
 /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */
    public void setBounds(int x, int y, int w, int h) {

        // fredt@users 20011210 - patch 450412 by elise@users
        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(5231,684,<159,4>,<187,5>)
```
 /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */

// fredt@users 20011210 - patch 450412 by elise@users
// with additional replacement of deprecated methods
    public void setBounds(int x, int y, int w, int h) {

        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(15877,817,<502,4>,<525,5>)
```
 public long createBlob(Session session, long length) {

        writeLock.lock();

        try {
            Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_BLOB);

            Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);

            usageChanged = true;

            return lobID.longValue();
        } finally {
            writeLock.unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(16700,817,<527,4>,<550,5>)
```
 public long createClob(Session session, long length) {

        writeLock.lock();

        try {
            Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_CLOB);

            Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);

            usageChanged = true;

            return lobID.longValue();
        } finally {
            writeLock.unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(18056,612,<537,8>,<550,9>)
```
 // conversion of right argument to character for backward compatibility
        if (nodes[LEFT].dataType.isCharacterType()
                && !nodes[RIGHT].dataType.isCharacterType()) {
            if (session.database.sqlEnforceTypes) {
                throw Error.error(ErrorCode.X_42562);
            }

            Type newType = CharacterType.getCharacterType(Types.SQL_VARCHAR,
                nodes[RIGHT].dataType.displaySize(),
                nodes[LEFT].dataType.getCollation());

            nodes[RIGHT] = ExpressionOp.getCastExpression(session,
                    nodes[RIGHT], newType);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(18678,530,<552,8>,<564,9>)
```
 if (nodes[RIGHT].dataType.isCharacterType()
                && !nodes[LEFT].dataType.isCharacterType()) {
            if (session.database.sqlEnforceTypes) {
                throw Error.error(ErrorCode.X_42562);
            }

            Type newType = CharacterType.getCharacterType(Types.SQL_VARCHAR,
                nodes[LEFT].dataType.displaySize(),
                nodes[RIGHT].dataType.getCollation());

            nodes[LEFT] = ExpressionOp.getCastExpression(session, nodes[LEFT],
                    newType);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(51195,2342,<1359,4>,<1423,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a
     * <code>java.sql.Timestamp</code> object, using
     * the given <code>Calendar</code> object to construct
     * the <code>Timestamp</code> object.
     * With a <code>Calendar</code> object, the driver
     * can calculate the timestamp taking into account a custom timezone and locale.
     * If no <code>Calendar</code> object is specified, the driver uses the
     * default timezone and locale.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @param cal the <code>Calendar</code> object the driver will use
     *            to construct the timestamp
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>null</code>.
     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setTimestamp
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *    JDBCParameterMetaData)
     */
    public synchronized Timestamp getTimestamp(int parameterIndex,
            Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(parameterIndex,
            Type.SQL_TIMESTAMP);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (!parameterMetaData.columnTypes[--parameterIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            if (cal != null) {
                millis = HsqlDateTime.convertMillisToCalendar(calendar,
                        millis);
            }
        }

        Timestamp ts = new Timestamp(millis);

        ts.setNanos(t.getNanos());

        return ts;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(206140,2829,<4875,4>,<4943,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
     * in the Java programming language.
     * This method uses the given calendar to construct an appropriate millisecond
     * value for the timestamp if the underlying database does not store
     * timezone information.
     * <!-- end generic documentation -->
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * The JDBC specification for this method is vague. HSQLDB interprets the
     * specification as follows:
     *
     * <ol>
     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value
     * of the returned java.sql.Timestamp object is the UTC of the SQL value
     * without modification. In other words, the Calendar object is not used.
     * </li>
     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the
     * UTC value of the returned java.sql.Timestamp will represent the correct
     * timestamp for the time zone (including daylight saving time) of the given
     * Calendar object. </li>
     * <li>In this case, if the cal argument is null, then the default Calendar
     * of the JVM is used, which results in the same Object as one returned by the
     * getTimestamp() methods without the Calendar parameter.</li>
     * </ol>
     * </div>
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object
     * to use in constructing the timestamp
     * @return the column value as a <code>java.sql.Timestamp</code> object;
     * if the value is SQL <code>NULL</code>,
     * the value returned is <code>null</code> in the Java programming language
     * @exception SQLException if a database access error occurs
     * or this method is called on a closed result set
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *  JDBCResultSet)
     */
    public Timestamp getTimestamp(int columnIndex,
                                  Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(columnIndex,
            Type.SQL_TIMESTAMP);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (!resultMetaData.columnTypes[--columnIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            if (cal != null) {
                millis = HsqlDateTime.convertMillisToCalendar(calendar,
                        millis);
            }
        }

        Timestamp ts = new Timestamp(millis);

        ts.setNanos(t.getNanos());

        return ts;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(35680,633,<1199,4>,<1223,5>)
```
 public Type getUserDefinedType(String name, String schemaName,
                                   boolean raise) {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(36319,594,<1225,4>,<1248,5>)
```
 public Type getDomainOrUDT(String name, String schemaName, boolean raise) {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128332,938,<2134,8>,<2153,76>)
```
 commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129851,839,<2167,8>,<2186,40>)
```
 commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(48963,2226,<1300,4>,<1357,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TIME</code> parameter as a
     * <code>java.sql.Time</code> object, using
     * the given <code>Calendar</code> object
     * to construct the time.
     * With a <code>Calendar</code> object, the driver
     * can calculate the time taking into account a custom timezone and locale.
     * If no <code>Calendar</code> object is specified, the driver uses the
     * default timezone and locale.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @param cal the <code>Calendar</code> object the driver will use
     *            to construct the time
     * @return the parameter value; if the value is SQL <code>NULL</code>, the result
     *         is <code>null</code>.
     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setTime
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *    JDBCParameterMetaData)
     */
    public synchronized Time getTime(int parameterIndex,
                                     Calendar cal) throws SQLException {

        TimeData t = (TimeData) getColumnInType(parameterIndex, Type.SQL_TIME);

        if (t == null) {
            return null;
        }

        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;

        if (!parameterMetaData.columnTypes[--parameterIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);
            millis = HsqlDateTime.getNormalisedTime(millis);
        }

        return new Time(millis);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(201543,2505,<4773,4>,<4830,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as a <code>java.sql.Time</code>
     * object in the Java programming language.
     * This method uses the given calendar to construct an appropriate millisecond
     * value for the time if the underlying database does not store
     * timezone information.
     * <!-- end generic documentation -->
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * The JDBC specification for this method is vague. HSQLDB interprets the
     * specification as follows:
     *
     * <ol>
     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value
     * of the returned java.sql.Time object is the UTC of the SQL value without
     * modification. In other words, the Calendar object is not used.</li>
     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC
     * value of the returned java.sql.Time is correct for the given Calendar
     * object.</li>
     * <li>If the cal argument is null, it it ignored and the method returns
     * the same Object as the method without the Calendar parameter.</li>
     * </ol>
     * </div>
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object
     * to use in constructing the time
     * @return the column value as a <code>java.sql.Time</code> object;
     * if the value is SQL <code>NULL</code>,
     * the value returned is <code>null</code> in the Java programming language
     * @exception SQLException if a database access error occurs
     * or this method is called on a closed result set
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *   JDBCResultSet)
     */
    public Time getTime(int columnIndex, Calendar cal) throws SQLException {

        TimeData t = (TimeData) getColumnInType(columnIndex, Type.SQL_TIME);

        if (t == null) {
            return null;
        }

        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;

        if (!resultMetaData.columnTypes[--columnIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);
            millis = HsqlDateTime.getNormalisedTime(millis);
        }

        return new Time(millis);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128876,926,<2146,8>,<2165,41>)
```
 commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130357,895,<2179,8>,<2198,47>)
```
 commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(37412,642,<981,8>,<1002,72>)
```
 Type targetType = parameterMetaData.columnTypes[parameterIndex - 1];

        switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }

        return (BigDecimal) getColumnInType(parameterIndex, targetType);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(83665,633,<1987,8>,<2008,69>)
```
 Type targetType = resultMetaData.columnTypes[columnIndex - 1];

        switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }

        return (BigDecimal) getColumnInType(columnIndex, targetType);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19941,1324,<555,8>,<574,52>)
```
 database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20209,1318,<559,8>,<578,53>)
```
 database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(17775,1117,<396,4>,<424,5>)
```
 /**
     * <!-- start generic documentation -->
     * Sets the designated parameter to the given Java <code>short</code> value.
     * The driver converts this
     * to an SQL <code>SMALLINT</code> value when it sends it to the database.
     * <!-- end generic documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>PreparedStatement</code>
     */
    public synchronized void setShort(int parameterIndex,
                                      short x) throws SQLException {

        if (isClosed || connection.isClosed) {
            checkClosed();
        }
        checkSetParameterIndex(parameterIndex);

        if (parameterTypes[parameterIndex - 1].typeCode
                == Types.SQL_SMALLINT) {
            parameterValues[--parameterIndex] = Integer.valueOf(x);
            parameterSet[parameterIndex]      = Boolean.TRUE;

            return;
        }
        setIntParameter(parameterIndex, x);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(18898,1091,<426,4>,<453,5>)
```
 /**
     * <!-- start generic documentation -->
     * Sets the designated parameter to the given Java <code>int</code> value.
     * The driver converts this
     * to an SQL <code>INTEGER</code> value when it sends it to the database.
     * <!-- end generic documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>PreparedStatement</code>
     */
    public synchronized void setInt(int parameterIndex,
                                    int x) throws SQLException {

        if (isClosed || connection.isClosed) {
            checkClosed();
        }
        checkSetParameterIndex(parameterIndex);

        if (parameterTypes[parameterIndex - 1].typeCode == Types.SQL_INTEGER) {
            parameterValues[--parameterIndex] = Integer.valueOf(x);
            parameterSet[parameterIndex]      = Boolean.TRUE;

            return;
        }
        setIntParameter(parameterIndex, x);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(5862,377,<184,8>,<195,9>)
```
 pw.println("allow 0.0.0.0/0");
        pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalNets.length; i++) {
                aclDenyLocalNets[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(6513,380,<207,8>,<218,9>)
```
 pw.println("allow 0.0.0.0/0");
        pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalhosts.length; i++) {
                aclDenyLocalhosts[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2048,1052,<50,8>,<66,70>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2179,1052,<52,8>,<68,65>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,1063,<54,8>,<70,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2446,1065,<56,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2620,1075,<59,8>,<76,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2791,1043,<62,8>,<78,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2912,1054,<64,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(65596,1328,<2142,27>,<2174,21>)
```
 {
                        if (Boolean.FALSE.equals(isForEachRow)
                                || oldRowName != null) {
                            throw unexpectedToken();
                        }

                        readIfThis(Tokens.ROW);
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();

                        oldRowName = HsqlNameManager.getSimpleName(
                            token.tokenString, token.isDelimitedIdentifier);

                        read();

                        String n = oldRowName.name;

                        if (n.equals(newTableName) || n.equals(oldTableName)
                                || n.equals(newRowName)) {
                            throw unexpectedToken();
                        }

                        isForEachRow = Boolean.TRUE;

                        RangeVariable range =
                            new RangeVariable(table.columnList, oldRowName,
                                              false,
                                              RangeVariable.TRANSITION_RANGE);

                        range.rangePosition             = TriggerDef.OLD_ROW;
                        transitions[TriggerDef.OLD_ROW] = null;
                        rangeVars[TriggerDef.OLD_ROW]   = range;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(68616,1328,<2215,27>,<2247,21>)
```
 {
                        if (Boolean.FALSE.equals(isForEachRow)
                                || newRowName != null) {
                            throw unexpectedToken();
                        }

                        readIfThis(Tokens.ROW);
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();

                        newRowName = HsqlNameManager.getSimpleName(
                            token.tokenString, token.isDelimitedIdentifier);

                        read();

                        String n = newRowName.name;

                        if (n.equals(oldTableName) || n.equals(newTableName)
                                || n.equals(oldRowName)) {
                            throw unexpectedToken();
                        }

                        isForEachRow = Boolean.TRUE;

                        RangeVariable range =
                            new RangeVariable(table.columnList, newRowName,
                                              false,
                                              RangeVariable.TRANSITION_RANGE);

                        range.rangePosition             = TriggerDef.NEW_ROW;
                        transitions[TriggerDef.NEW_ROW] = null;
                        rangeVars[TriggerDef.NEW_ROW]   = range;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaObjectSet.java|(8045,897,<267,4>,<296,5>)
```
 static int getAddErrorCode(int type) {

        int code;

        switch (type) {

            case SchemaObject.VIEW :
            case SchemaObject.TABLE :
            case SchemaObject.COLUMN :
            case SchemaObject.SEQUENCE :
            case SchemaObject.CHARSET :
            case SchemaObject.DOMAIN :
            case SchemaObject.TYPE :
            case SchemaObject.COLLATION :
            case SchemaObject.PROCEDURE :
            case SchemaObject.FUNCTION :
            case SchemaObject.SPECIFIC_ROUTINE :
            case SchemaObject.CONSTRAINT :
            case SchemaObject.ASSERTION :
            case SchemaObject.INDEX :
            case SchemaObject.TRIGGER :
                code = ErrorCode.X_42504;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "SchemaObjectSet");
        }

        return code;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaObjectSet.java|(8948,897,<298,4>,<327,5>)
```
 static int getGetErrorCode(int type) {

        int code;

        switch (type) {

            case SchemaObject.VIEW :
            case SchemaObject.TABLE :
            case SchemaObject.COLUMN :
            case SchemaObject.SEQUENCE :
            case SchemaObject.CHARSET :
            case SchemaObject.DOMAIN :
            case SchemaObject.TYPE :
            case SchemaObject.CONSTRAINT :
            case SchemaObject.COLLATION :
            case SchemaObject.PROCEDURE :
            case SchemaObject.FUNCTION :
            case SchemaObject.SPECIFIC_ROUTINE :
            case SchemaObject.ASSERTION :
            case SchemaObject.INDEX :
            case SchemaObject.TRIGGER :
                code = ErrorCode.X_42501;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "SchemaObjectSet");
        }

        return code;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(34480,737,<963,4>,<989,5>)
```
 protected final void checkIsFile(boolean checkExists) throws SQLException {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(29117,737,<770,4>,<796,5>)
```
 protected final void checkIsFile(boolean checkExists) throws SQLException {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130806,1231,<3535,12>,<3554,57>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157029,1246,<4261,12>,<4281,57>)
```
 //
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", CHARACTER_DATA);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312405,737,<8221,16>,<8237,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[view_catalog]     = database.getCatalogName().name;
                row[view_schema]      = table.getSchemaName().name;
                row[view_name]        = table.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(176275,1115,<4719,8>,<4744,9>)
```
 Table t = sysTables[ROLE_ROUTINE_GRANTS];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROLE_ROUTINE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);          // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);          // not null
            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_ROUTINE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(193522,1184,<5177,8>,<5203,9>)
```
 Table t = sysTables[ROUTINE_PRIVILEGES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROUTINE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);      // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(93808,1011,<2621,8>,<2640,50>)
```
 final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
        final int declared_data_type         = 44;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(220631,1251,<5861,8>,<5880,62>)
```
 final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
        final int sql_path                               = 44;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(150091,576,<5441,4>,<5468,5>)
```
 private Expression readLeastExpressionOrNull() {

        int position = getPosition();

        read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression casewhen = null;

        do {
            casewhen = readValue(casewhen, OpTypes.SMALLER);

            if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else {
                break;
            }
        } while (true);

        readThis(Tokens.CLOSEBRACKET);

        return casewhen;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(150673,579,<5470,4>,<5497,5>)
```
 private Expression readGreatestExpressionOrNull() {

        int position = getPosition();

        read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression casewhen = null;

        do {
            casewhen = readValue(casewhen, OpTypes.GREATER);

            if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else {
                break;
            }
        } while (true);

        readThis(Tokens.CLOSEBRACKET);

        return casewhen;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(30416,653,<989,8>,<1017,44>)
```
 tDestTable.addActionListener(this);

        tDestDrop = new TextField();

        tDestDrop.addActionListener(this);

        tDestCreate = new TextField();

        tDestCreate.addActionListener(this);

        tDestDelete = new TextField();

        tDestDelete.addActionListener(this);

        tDestCreateIndex = new TextField();

        tDestCreateIndex.addActionListener(this);

        tDestDropIndex = new TextField();

        tDestDropIndex.addActionListener(this);

        tSourceSelect = new TextField();

        tSourceSelect.addActionListener(this);

        tDestInsert = new TextField();

        tDestInsert.addActionListener(this);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(30499,654,<993,8>,<1021,43>)
```
 tDestDrop.addActionListener(this);

        tDestCreate = new TextField();

        tDestCreate.addActionListener(this);

        tDestDelete = new TextField();

        tDestDelete.addActionListener(this);

        tDestCreateIndex = new TextField();

        tDestCreateIndex.addActionListener(this);

        tDestDropIndex = new TextField();

        tDestDropIndex.addActionListener(this);

        tSourceSelect = new TextField();

        tSourceSelect.addActionListener(this);

        tDestInsert = new TextField();

        tDestInsert.addActionListener(this);

        tDestAlter = new TextField();

        tDestAlter.addActionListener(this);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(54941,726,<1333,8>,<1351,78>)
```
 // column number mappings
        final int itable_cat        = 0;
        final int itable_schem      = 1;
        final int itable_name       = 2;
        final int inon_unique       = 3;
        final int iindex_qualifier  = 4;
        final int iindex_name       = 5;
        final int itype             = 6;
        final int iordinal_position = 7;
        final int icolumn_name      = 8;
        final int iasc_or_desc      = 9;
        final int icardinality      = 10;
        final int ipages            = 11;
        final int ifilter_condition = 12;
        final int irow_cardinality  = 13;

        // Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50260,514,<1216,16>,<1225,50>)
```
 row[ipk_table_cat]   = pkTableCatalog;
                row[ipk_table_schem] = pkTableSchema;
                row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50369,503,<1218,16>,<1227,46>)
```
 row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
                row[idelete_rule]    = deleteRule;
                row[ifk_name]        = fkName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50474,499,<1220,16>,<1229,53>)
```
 row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
                row[idelete_rule]    = deleteRule;
                row[ifk_name]        = fkName;
                row[ipk_name]        = pkName;
                row[ideferrability]  = deferrability;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83700,349,<2008,8>,<2017,42>)
```
 row[icat]          = cat;
        row[ischem]        = schem;
        row[ipname]        = pName;
        row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
        row[iresult_sets]  = rs;
        row[iremark]       = remark;
        row[iptype]        = pType;
        row[iporigin]      = origin;
        row[isn]           = specificName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84214,439,<2025,16>,<2034,43>)
```
 row                = t.getEmptyRowData();
                pName              = (String) l.get(i);
                row[icat]          = cat;
                row[ischem]        = schem;
                row[ipname]        = pName;
                row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
                row[iresult_sets]  = rs;
                row[iremark]       = remark;
                row[iptype]        = pType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88918,416,<2145,16>,<2154,39>)
```
 row             = t.getEmptyRowData();
                pName           = (String) l.get(i);
                row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3100,588,<94,4>,<115,5>)
```
 TableDerived[] getSubqueries(Session session) {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(4686,588,<128,4>,<149,5>)
```
 TableDerived[] getSubqueries(Session session) {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124955,746,<3392,8>,<3406,50>)
```
 final int domain_catalog             = 0;
        final int domain_schema              = 1;
        final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
        final int numeric_precision          = 12;
        final int numeric_precision_radix    = 13;
        final int numeric_scale              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158966,750,<4299,8>,<4314,48>)
```
 // column number mappings
        final int specific_cat             = 0;
        final int specific_schem           = 1;
        final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219032,960,<5835,8>,<5850,62>)
```
 // column number mappings
        final int specific_catalog                       = 0;
        final int specific_schema                        = 1;
        final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(276067,780,<7290,8>,<7305,50>)
```
 // column number mappings
        final int trigger_catalog            = 0;
        final int trigger_schema             = 1;
        final int trigger_name               = 2;
        final int event_manipulation         = 3;
        final int event_object_catalog       = 4;
        final int event_object_schema        = 5;
        final int event_object_table         = 6;
        final int action_order               = 7;
        final int action_condition           = 8;
        final int action_statement           = 9;
        final int action_orientation         = 10;
        final int action_timing              = 11;
        final int action_reference_old_table = 12;
        final int action_reference_new_table = 13;
        final int action_reference_old_row   = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299290,746,<7876,8>,<7890,50>)
```
 final int user_defined_type_catalog  = 0;
        final int user_defined_type_schema   = 1;
        final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36902,660,<893,8>,<908,42>)
```
 // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
        final int icolumn_def        = 12;
        final int isql_data_type     = 13;
        final int isql_datetime_sub  = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(68868,735,<1653,8>,<1668,47>)
```
 // column number mappings
        final int specific_cat            = 0;
        final int specific_schem          = 1;
        final int procedure_name          = 2;
        final int parameter_name          = 3;
        final int parameter_mode          = 4;
        final int data_type_sql_id        = 5;
        final int data_type               = 6;
        final int numeric_precision       = 7;
        final int byte_length             = 8;
        final int numeric_scale           = 9;
        final int numeric_precision_radix = 10;
        final int nullable                = 11;
        final int remark                  = 12;
        final int default_val             = 13;
        final int sql_data_type           = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(104732,780,<2532,8>,<2549,43>)
```
 //-----------------------------------------
        // Same as SYSTEM_TYPEINFO
        //-----------------------------------------
        final int itype_name          = 0;
        final int idata_type          = 1;
        final int iprecision          = 2;
        final int iliteral_prefix     = 3;
        final int iliteral_suffix     = 4;
        final int icreate_params      = 5;
        final int inullable           = 6;
        final int icase_sensitive     = 7;
        final int isearchable         = 8;
        final int iunsigned_attribute = 9;
        final int ifixed_prec_scale   = 10;
        final int iauto_increment     = 11;
        final int ilocal_type_name    = 12;
        final int iminimum_scale      = 13;
        final int imaximum_scale      = 14;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InOutUtil.java|(5533,780,<162,8>,<187,27>)
```
 //
        long bytesCopied = 0;
        int bytesRead;        

        while ((bytesCopied < amount) && -1 != (bytesRead =
                inputStream.read(buffer, 0, maxBytesToRead))) {
            //
            outputStream.write(buffer, 0, bytesRead);

            if (bytesRead > Long.MAX_VALUE - bytesCopied) {
                // edge case...
                // extremely unlikely but included for 'correctness'
                bytesCopied = Long.MAX_VALUE;
            } else {
                bytesCopied += bytesRead;
            }

            if (bytesCopied >= amount) {
                return bytesCopied;
            }

            maxBytesToRead = (int) Math.min((long) bufferSize,
                    amount - bytesCopied);
        }

        return bytesCopied;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InOutUtil.java|(7798,769,<232,8>,<257,27>)
```
 //
        long charsCopied = 0;
        int charsRead;        

        while ((charsCopied < amount) && -1 != (charsRead =
                reader.read(buffer, 0, maxCharsToRead))) {
            //
            writer.write(buffer, 0, charsRead);

            if (charsRead > Long.MAX_VALUE - charsCopied) {
                // edge case...
                // extremely unlikely but included for 'correctness'
                charsCopied = Long.MAX_VALUE;
            } else {
                charsCopied += charsRead;
            }

            if (charsCopied >= amount) {
                return charsCopied;
            }

            maxCharsToRead = (int) Math.min((long) bufferSize,
                    amount - charsCopied);
        }

        return charsCopied;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(25778,690,<640,12>,<650,54>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_BESTROWIDENTIFIER]);

            addColumn(t, "SCOPE", Type.SQL_SMALLINT);            // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115191,1140,<2791,12>,<2808,54>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_VERSIONCOLUMNS]);

            // ----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns result set
            // ----------------------------------------------------------------
            addColumn(t, "SCOPE", Type.SQL_INTEGER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_SMALLINT);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33784,435,<1042,4>,<1061,5>)
```
 protected String getResultString() {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(42040,435,<1350,4>,<1369,5>)
```
 protected String getResultString() {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2417,890,<69,4>,<96,5>)
```
 /**
     * Prints a table displaying specified columns, and checks the expected
     * number of rows.
     */
    private void printTable(String table, String cols,
                            int expected) throws SQLException {

        int               rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);
        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting " + expected
                        + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }

            result += "\n";

            rows++;
        }

        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMultiInsert.java|(2443,719,<69,4>,<88,5>)
```
 private void printTable(String table, String cols, int expected) throws SQLException {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting "
            + expected + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                           + rs.getString(i + 1) + ":";
            }
            result += "\n";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(25935,667,<643,12>,<652,76>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115554,911,<2797,12>,<2810,76>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_SMALLINT);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(41675,513,<1273,31>,<1291,13>)
```
 {
                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);

                if (Boolean.FALSE.equals(r1)) {
                    return Boolean.FALSE;
                }

                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);

                if (Boolean.FALSE.equals(r2)) {
                    return Boolean.FALSE;
                }

                if (r1 == null || r2 == null) {
                    return null;
                }

                return Boolean.TRUE;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(42219,510,<1292,30>,<1310,13>)
```
 {
                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);

                if (Boolean.TRUE.equals(r1)) {
                    return Boolean.TRUE;
                }

                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);

                if (Boolean.TRUE.equals(r2)) {
                    return Boolean.TRUE;
                }

                if (r1 == null || r2 == null) {
                    return null;
                }

                return Boolean.FALSE;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(6870,2254,<231,8>,<297,9>)
```
 if (!isFullSelect && selectColumnSet == null) {}
        else if (right.isFullSelect) {
            isFullSelect    = false;
            selectColumnSet = null;
        } else if (right.selectColumnSet != null) {
            if (isFullSelect) {
                isFullSelect    = false;
                selectColumnSet = ((Table) object).getColumnNameSet();
            }

            selectColumnSet.removeAll(right.selectColumnSet);

            if (selectColumnSet.isEmpty()) {
                selectColumnSet = null;
            }
        }

        if (!isFullInsert && insertColumnSet == null) {}
        else if (right.isFullInsert) {
            isFullInsert    = false;
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (isFullInsert) {
                isFullInsert    = false;
                insertColumnSet = ((Table) object).getColumnNameSet();
            }

            insertColumnSet.removeAll(right.insertColumnSet);

            if (insertColumnSet.isEmpty()) {
                insertColumnSet = null;
            }
        }

        if (!isFullUpdate && updateColumnSet == null) {}
        else if (right.isFullUpdate) {
            isFullUpdate    = false;
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (isFullUpdate) {
                isFullUpdate    = false;
                updateColumnSet = ((Table) object).getColumnNameSet();
            }

            updateColumnSet.removeAll(right.updateColumnSet);

            if (updateColumnSet.isEmpty()) {
                updateColumnSet = null;
            }
        }

        if (!isFullReferences && referencesColumnSet == null) {}
        else if (right.isFullReferences) {
            isFullReferences    = false;
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (isFullReferences) {
                isFullReferences    = false;
                referencesColumnSet = ((Table) object).getColumnNameSet();
            }

            referencesColumnSet.removeAll(right.referencesColumnSet);

            if (referencesColumnSet.isEmpty()) {
                referencesColumnSet = null;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(7423,2267,<248,8>,<314,9>)
```
 if (!isFullInsert && insertColumnSet == null) {}
        else if (right.isFullInsert) {
            isFullInsert    = false;
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (isFullInsert) {
                isFullInsert    = false;
                insertColumnSet = ((Table) object).getColumnNameSet();
            }

            insertColumnSet.removeAll(right.insertColumnSet);

            if (insertColumnSet.isEmpty()) {
                insertColumnSet = null;
            }
        }

        if (!isFullUpdate && updateColumnSet == null) {}
        else if (right.isFullUpdate) {
            isFullUpdate    = false;
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (isFullUpdate) {
                isFullUpdate    = false;
                updateColumnSet = ((Table) object).getColumnNameSet();
            }

            updateColumnSet.removeAll(right.updateColumnSet);

            if (updateColumnSet.isEmpty()) {
                updateColumnSet = null;
            }
        }

        if (!isFullReferences && referencesColumnSet == null) {}
        else if (right.isFullReferences) {
            isFullReferences    = false;
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (isFullReferences) {
                isFullReferences    = false;
                referencesColumnSet = ((Table) object).getColumnNameSet();
            }

            referencesColumnSet.removeAll(right.referencesColumnSet);

            if (referencesColumnSet.isEmpty()) {
                referencesColumnSet = null;
            }
        }

        if (!isFullTrigger && triggerColumnSet == null) {}
        else if (right.isFullTrigger) {
            isFullTrigger    = false;
            triggerColumnSet = null;
        } else if (right.triggerColumnSet != null) {
            if (isFullTrigger) {
                isFullTrigger    = false;
                triggerColumnSet = ((Table) object).getColumnNameSet();
            }

            triggerColumnSet.removeAll(right.triggerColumnSet);

            if (triggerColumnSet.isEmpty()) {
                triggerColumnSet = null;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35494,888,<1133,8>,<1147,59>)
```
 typeNames.put(Tokens.T_VARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);
        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35632,870,<1135,8>,<1149,59>)
```
 typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35747,877,<1137,8>,<1151,63>)
```
 typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35865,867,<1139,8>,<1153,53>)
```
 typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35983,853,<1141,8>,<1155,51>)
```
 typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);
        typeNames.put(Tokens.T_OTHER, Types.OTHER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(18935,440,<571,12>,<582,23>)
```
 for (i = 0; i < smallops; i++) {
                ps.setInt(1, nextIntRandom(randomgen, bigrows - 1));
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
            }

            ps.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(20123,440,<606,12>,<617,23>)
```
 for (i = 0; i < bigops; i++) {
                ps.setInt(1, nextIntRandom(randomgen, smallrows - 1));
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
            }

            ps.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(3950,1399,<116,4>,<152,5>)
```
 String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][PostgreSQL];
                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3357,1395,<94,4>,<130,5>)
```
 String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][ORACLE];
                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(6914,715,<205,8>,<229,9>)
```
 int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }

        if (hashIndex.elementCount >= threshold) {
            reset();

            return getOrAddString(key);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(8133,715,<250,8>,<274,9>)
```
 int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }

        if (hashIndex.elementCount >= threshold) {
            reset();

            return getOrAddString(key);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16302,521,<585,4>,<602,5>)
```
 public void checkReferences(SchemaObject object, boolean[] checkList) {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16829,518,<604,4>,<621,5>)
```
 public void checkTrigger(SchemaObject object, boolean[] checkList) {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56582,582,<1830,4>,<1844,5>)
```
 private Result createBlockAddresses(long lobID, int offset, int count) {

        ResultMetaData meta     = createLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createLobPartCall, params,
                0);

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(57170,606,<1846,4>,<1861,5>)
```
 private Result createFullBlockAddresses(long lobID, int offset,
            int count) {

        ResultMetaData meta = createSingleLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createSingleLobPartCall,
                params, 0);

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(10131,1330,<300,12>,<321,76>)
```
 getLob            = sysLobSession.compileStatement(getLobSQL);
            getSpanningBlocks = sysLobSession.compileStatement(getLobPartSQL);
            createLob         = sysLobSession.compileStatement(createLobSQL);
            createLobPartCall =
                sysLobSession.compileStatement(createLobPartCallSQL);
            createSingleLobPartCall =
                sysLobSession.compileStatement(createSingleLobPartCallSQL);
            divideLobPartCall =
                sysLobSession.compileStatement(divideLobPartCallSQL);
            deleteLobCall = sysLobSession.compileStatement(deleteLobCallSQL);
            deleteLobPartCall =
                sysLobSession.compileStatement(deleteLobPartCallSQL);
            updateLobLength =
                sysLobSession.compileStatement(updateLobLengthSQL);
            updateLobUsage = sysLobSession.compileStatement(updateLobUsageSQL);
            getNextLobId   = sysLobSession.compileStatement(getNextLobIdSQL);
            deleteUnusedLobs =
                sysLobSession.compileStatement(deleteUnusedCallSQL);
            mergeUnusedSpace =
                sysLobSession.compileStatement(mergeUnusedSpaceSQL);
            getLobUseLimit = sysLobSession.compileStatement(getLobUseLimitSQL);
            getLobCount    = sysLobSession.compileStatement(getLobCountSQL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(10285,1347,<302,12>,<325,78>)
```
 createLob         = sysLobSession.compileStatement(createLobSQL);
            createLobPartCall =
                sysLobSession.compileStatement(createLobPartCallSQL);
            createSingleLobPartCall =
                sysLobSession.compileStatement(createSingleLobPartCallSQL);
            divideLobPartCall =
                sysLobSession.compileStatement(divideLobPartCallSQL);
            deleteLobCall = sysLobSession.compileStatement(deleteLobCallSQL);
            deleteLobPartCall =
                sysLobSession.compileStatement(deleteLobPartCallSQL);
            updateLobLength =
                sysLobSession.compileStatement(updateLobLengthSQL);
            updateLobUsage = sysLobSession.compileStatement(updateLobUsageSQL);
            getNextLobId   = sysLobSession.compileStatement(getNextLobIdSQL);
            deleteUnusedLobs =
                sysLobSession.compileStatement(deleteUnusedCallSQL);
            mergeUnusedSpace =
                sysLobSession.compileStatement(mergeUnusedSpaceSQL);
            getLobUseLimit = sysLobSession.compileStatement(getLobUseLimitSQL);
            getLobCount    = sysLobSession.compileStatement(getLobCountSQL);

            //
            getSpanningParts = sysLobSession.compileStatement(getPartsSQL);
            getLastPart      = sysLobSession.compileStatement(getLastPartSQL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(11379,1150,<221,8>,<240,62>)
```
 nonDeterministicFuncSet.add(FUNC_ACTION_ID);
        nonDeterministicFuncSet.add(FUNC_CRYPT_KEY);
        nonDeterministicFuncSet.add(FUNC_DATABASE);
        nonDeterministicFuncSet.add(FUNC_DATABASE_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_DATABASE_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_IDENTITY);
        nonDeterministicFuncSet.add(FUNC_ISAUTOCOMMIT);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYSESSION);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASE);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASEFILES);
        nonDeterministicFuncSet.add(FUNC_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_ID);
        nonDeterministicFuncSet.add(FUNC_SESSION_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SESSIONTIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SYSDATE);
        nonDeterministicFuncSet.add(FUNC_SYSTIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_CONTROL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(11537,1158,<224,8>,<243,47>)
```
 nonDeterministicFuncSet.add(FUNC_DATABASE_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_DATABASE_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_IDENTITY);
        nonDeterministicFuncSet.add(FUNC_ISAUTOCOMMIT);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYSESSION);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASE);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASEFILES);
        nonDeterministicFuncSet.add(FUNC_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_ID);
        nonDeterministicFuncSet.add(FUNC_SESSION_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SESSIONTIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SYSDATE);
        nonDeterministicFuncSet.add(FUNC_SYSTIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_CONTROL);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_ID);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_SIZE);
        nonDeterministicFuncSet.add(FUNC_UUID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62140,401,<1799,8>,<1820,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30231,401,<976,8>,<997,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableJoined.java|(10064,531,<346,8>,<364,9>)
```
 String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");

        if (tableAlias != null) {
            sb.append(b).append("alias=").append(tableAlias.name).append("\n");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(27618,531,<932,8>,<950,9>)
```
 String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");

        if (tableAlias != null) {
            sb.append(b).append("alias=").append(tableAlias.name).append("\n");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129505,2267,<2159,8>,<2209,39>)
```
 commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137994,2282,<2344,8>,<2395,43>)
```
 commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
        commandSet.put(T_BITXOR, BITXOR);
        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);
        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);
        commandSet.put(T_CONCAT_WS, CONCAT_WS);
        commandSet.put(T_CHR, CHR);
        commandSet.put(T_COS, COS);
        commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(34420,1553,<898,8>,<940,9>)
```
 switch (sourceType.typeCode) {

            case Types.SQL_ARRAY :
                return getArray(parameterIndex);
            case Types.SQL_DATE :
                return getDate(parameterIndex);
            case Types.SQL_TIME :
            case Types.SQL_TIME_WITH_TIME_ZONE :
                return getTime(parameterIndex);
            case Types.SQL_TIMESTAMP :
            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :
                return getTimestamp(parameterIndex);
            case Types.SQL_BINARY :
            case Types.SQL_VARBINARY :
                return getBytes(parameterIndex);
            case Types.SQL_BIT : {
                boolean b = getBoolean(parameterIndex);

                return wasNull() ? null
                                 : b ? Boolean.TRUE
                                     : Boolean.FALSE;
            }
            case Types.SQL_CLOB :
                return getClob(parameterIndex);
            case Types.SQL_BLOB :
                return getBlob(parameterIndex);
            case Types.OTHER :
            case Types.JAVA_OBJECT : {
                Object o = getColumnInType(parameterIndex, sourceType);

                if (o == null) {
                    return null;
                }

                try {
                    return ((JavaObjectData) o).getObject();
                } catch (HsqlException e) {
                    throw JDBCUtil.sqlException(e);
                }
            }
            default :
                return getColumnInType(parameterIndex, sourceType);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(70749,1523,<1652,8>,<1694,9>)
```
 switch (sourceType.typeCode) {

            case Types.SQL_ARRAY :
                return getArray(columnIndex);
            case Types.SQL_DATE :
                return getDate(columnIndex);
            case Types.SQL_TIME :
            case Types.SQL_TIME_WITH_TIME_ZONE :
                return getTime(columnIndex);
            case Types.SQL_TIMESTAMP :
            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :
                return getTimestamp(columnIndex);
            case Types.SQL_BINARY :
            case Types.SQL_VARBINARY :
                return getBytes(columnIndex);
            case Types.SQL_BIT : {
                boolean b = getBoolean(columnIndex);

                return wasNull() ? null
                                 : b ? Boolean.TRUE
                                     : Boolean.FALSE;
            }
            case Types.SQL_CLOB :
                return getClob(columnIndex);
            case Types.SQL_BLOB :
                return getBlob(columnIndex);
            case Types.OTHER :
            case Types.JAVA_OBJECT : {
                Object o = getColumnInType(columnIndex, sourceType);

                if (o == null) {
                    return null;
                }

                try {
                    return ((JavaObjectData) o).getObject();
                } catch (HsqlException e) {
                    throw JDBCUtil.sqlException(e);
                }
            }
            default :
                return getColumnInType(columnIndex, sourceType);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128746,922,<2143,8>,<2162,45>)
```
 commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130235,865,<2176,8>,<2195,43>)
```
 commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(12105,636,<327,8>,<338,40>)
```
 System.out.println("\n--------------------");
        System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(11851,636,<336,8>,<347,40>)
```
 System.out.println("\n--------------------");
        System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(14619,937,<533,34>,<559,13>)
```
 {
                read();

                Expression e = XreadValueSpecificationOrNull();

                if (e == null) {
                    HsqlName name = readSchemaName();
                    Object[] args = new Object[]{ name };

                    return new StatementSession(StatementTypes.SET_CATALOG,
                                                args);
                }

                if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };

                return new StatementSession(StatementTypes.SET_CATALOG, args);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(15590,935,<560,33>,<586,13>)
```
 {
                read();

                Expression e = XreadValueSpecificationOrNull();

                if (e == null) {
                    HsqlName name = readSchemaName();
                    Object[] args = new Object[]{ name };

                    return new StatementSession(StatementTypes.SET_SCHEMA,
                                                args);
                }

                if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };

                return new StatementSession(StatementTypes.SET_SCHEMA, args);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(120370,800,<2921,12>,<2934,36>)
```
 t = createBlankTable(sysTableHsqlNames[COLUMN_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_PRIVILEGES].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(1907,393,<48,8>,<53,64>)
```
 //suite.addTestSuite(org.hsqldb.test.TestHTTPKeepAlive.class);
        suite.addTestSuite(org.hsqldb.test.TestBatchExecution.class);
        suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2048,317,<50,8>,<54,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2114,323,<51,8>,<55,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2179,322,<52,8>,<56,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2244,367,<53,8>,<58,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,378,<54,8>,<59,75>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2374,408,<55,8>,<61,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2446,396,<56,8>,<62,59>)
```
 suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2510,393,<57,8>,<63,60>)
```
 suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2620,350,<59,8>,<64,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2696,333,<60,8>,<65,58>)
```
 suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2791,309,<62,8>,<66,70>)
```
 suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2851,314,<63,8>,<67,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2912,319,<64,8>,<68,65>)
```
 suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2979,321,<65,8>,<69,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3038,334,<66,8>,<70,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3109,338,<67,8>,<71,74>)
```
 suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3174,337,<68,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3240,381,<69,8>,<75,69>)
```
 suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3309,386,<70,8>,<76,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3381,388,<71,8>,<77,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3456,378,<72,8>,<78,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3521,376,<74,8>,<79,62>)
```
 // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3630,336,<76,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3704,397,<77,8>,<81,134>)
```
 suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
        suite.addTestSuite(org.hsqldb.test.TestSqlPersistent.class);     // Sometimes hangs on Connection.close after SHUTDOWN problem
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53670,496,<1741,8>,<1759,9>)
```
 readThis(Tokens.DO);

        Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55722,497,<1815,8>,<1833,9>)
```
 readThis(Tokens.LOOP);

        Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(22069,422,<707,8>,<718,9>)
```
 if (oldTable == core.mainTable) {
            core.mainTable = newTable;

            if (core.mainIndex != null) {
                core.mainIndex =
                    core.mainTable.getIndex(core.mainIndex.getName().name);
                core.mainCols = ArrayUtil.toAdjustedColumnArray(core.mainCols,
                        colIndex, adjust);

                core.mainIndex.setTable(newTable);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(22501,413,<720,8>,<731,9>)
```
 if (oldTable == core.refTable) {
            core.refTable = newTable;

            if (core.refIndex != null) {
                core.refIndex =
                    core.refTable.getIndex(core.refIndex.getName().name);
                core.refCols = ArrayUtil.toAdjustedColumnArray(core.refCols,
                        colIndex, adjust);

                core.refIndex.setTable(newTable);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(93247,1521,<2610,8>,<2639,50>)
```
 final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219938,1881,<5850,8>,<5879,62>)
```
 final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86607,575,<2458,8>,<2478,47>)
```
 // column number mappings
        final int udt_catalog   = 0;
        final int udt_schema    = 1;
        final int udt_name      = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
        final int column_name   = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40403,504,<1123,12>,<1138,13>)
```
 if (s.waitingSessions.size() > 0) {
                StringBuffer sb    = new StringBuffer();
                Session[]    array = new Session[s.waitingSessions.size()];

                s.waitingSessions.toArray(array);

                for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }

                row[it_waiting] = sb.toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40921,500,<1140,12>,<1155,13>)
```
 if (s.waitedSessions.size() > 0) {
                StringBuffer sb    = new StringBuffer();
                Session[]    array = new Session[s.waitedSessions.size()];

                s.waitedSessions.toArray(array);

                for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }

                row[it_waited] = sb.toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(4915,384,<130,8>,<140,9>)
```
 tempJoinExpressions   = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            tempJoinExpressions[i] = new HsqlArrayList();
        }

        joinExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            joinExpressions[i] = new HsqlArrayList();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(5117,376,<136,8>,<146,9>)
```
 joinExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            joinExpressions[i] = new HsqlArrayList();
        }

        whereExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            whereExpressions[i] = new HsqlArrayList();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130801,3977,<2189,8>,<2279,47>)
```
 commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131261,3963,<2199,8>,<2289,49>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131781,3927,<2210,8>,<2299,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132192,4050,<2220,8>,<2309,47>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132660,4138,<2230,8>,<2319,69>)
```
 commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,4268,<2240,8>,<2329,41>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133484,4301,<2250,8>,<2339,45>)
```
 commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133917,4380,<2260,8>,<2349,39>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134355,4386,<2270,8>,<2361,49>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134787,4380,<2280,8>,<2371,39>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(4442,379,<118,2>,<128,3>)
```
 private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(10110,382,<267,2>,<277,3>)
```
 private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131025,4433,<2194,8>,<2294,45>)
```
 commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131781,4461,<2210,8>,<2309,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132418,4666,<2225,8>,<2324,57>)
```
 commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,4731,<2240,8>,<2339,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133693,4810,<2255,8>,<2354,39>)
```
 commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134355,4812,<2270,8>,<2371,39>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(68272,472,<2142,18>,<2151,9>)
```
 {
            if (nodes[LEFT].nodes[LEFT].opType == OpTypes.COLUMN) {
                colExpression    = nodes[LEFT].nodes[LEFT];
                nonColExpression = nodes[LEFT].nodes[RIGHT];
            } else if (nodes[LEFT].nodes[RIGHT].opType == OpTypes.COLUMN) {
                replaceColumn    = operation == OpTypes.ADD;
                colExpression    = nodes[LEFT].nodes[RIGHT];
                nonColExpression = nodes[LEFT].nodes[LEFT];
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(68750,478,<2151,15>,<2160,9>)
```
 {
            if (nodes[RIGHT].nodes[LEFT].opType == OpTypes.COLUMN) {
                colExpression    = nodes[RIGHT].nodes[LEFT];
                nonColExpression = nodes[RIGHT].nodes[RIGHT];
            } else if (nodes[RIGHT].nodes[RIGHT].opType == OpTypes.COLUMN) {
                replaceColumn    = operation == OpTypes.ADD;
                colExpression    = nodes[RIGHT].nodes[RIGHT];
                nonColExpression = nodes[RIGHT].nodes[LEFT];
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36852,624,<890,8>,<906,42>)
```
 Object[]    row;
        DITableInfo ti;

        // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
        final int icolumn_def        = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(45632,498,<1105,8>,<1122,29>)
```
 // calculated column values
        String  pkTableCatalog;
        String  pkTableSchema;
        String  pkTableName;
        String  pkColumnName;
        String  fkTableCatalog;
        String  fkTableSchema;
        String  fkTableName;
        String  fkColumnName;
        Integer keySequence;
        Integer updateRule;
        Integer deleteRule;
        String  fkName;
        String  pkName;
        Integer deferrability;

        // Intermediate holders
        Iterator      tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(45731,459,<1108,8>,<1124,30>)
```
 String  pkTableName;
        String  pkColumnName;
        String  fkTableCatalog;
        String  fkTableSchema;
        String  fkTableName;
        String  fkColumnName;
        Integer keySequence;
        Integer updateRule;
        Integer deleteRule;
        String  fkName;
        String  pkName;
        Integer deferrability;

        // Intermediate holders
        Iterator      tables;
        Table         table;
        Table         fkTable;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(18785,971,<734,8>,<751,69>)
```
 // comparison
        expressionTypeMap.put(Tokens.EQUALS, OpTypes.EQUAL);
        expressionTypeMap.put(Tokens.GREATER, OpTypes.GREATER);
        expressionTypeMap.put(Tokens.LESS, OpTypes.SMALLER);
        expressionTypeMap.put(Tokens.GREATER_EQUALS, OpTypes.GREATER_EQUAL);
        expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(18932,960,<737,8>,<753,63>)
```
 expressionTypeMap.put(Tokens.LESS, OpTypes.SMALLER);
        expressionTypeMap.put(Tokens.GREATER_EQUALS, OpTypes.GREATER_EQUAL);
        expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);
        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(19070,956,<739,8>,<755,67>)
```
 expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);
        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);
        expressionTypeMap.put(Tokens.VAR_SAMP, OpTypes.VAR_SAMP);
        expressionTypeMap.put(Tokens.ARRAY_AGG, OpTypes.ARRAY_AGG);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(4883,1218,<159,8>,<197,9>)
```
 if (isFullSelect) {
            selectColumnSet = null;
        } else if (right.selectColumnSet != null) {
            if (selectColumnSet == null) {
                selectColumnSet = new OrderedHashSet();
            }

            selectColumnSet.addAll(right.selectColumnSet);
        }

        if (isFullInsert) {
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (insertColumnSet == null) {
                insertColumnSet = new OrderedHashSet();
            }

            insertColumnSet.addAll(right.insertColumnSet);
        }

        if (isFullUpdate) {
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (updateColumnSet == null) {
                updateColumnSet = new OrderedHashSet();
            }

            updateColumnSet.addAll(right.updateColumnSet);
        }

        if (isFullReferences) {
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (referencesColumnSet == null) {
                referencesColumnSet = new OrderedHashSet();
            }

            referencesColumnSet.addAll(right.referencesColumnSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(5183,1225,<169,8>,<207,9>)
```
 if (isFullInsert) {
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (insertColumnSet == null) {
                insertColumnSet = new OrderedHashSet();
            }

            insertColumnSet.addAll(right.insertColumnSet);
        }

        if (isFullUpdate) {
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (updateColumnSet == null) {
                updateColumnSet = new OrderedHashSet();
            }

            updateColumnSet.addAll(right.updateColumnSet);
        }

        if (isFullReferences) {
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (referencesColumnSet == null) {
                referencesColumnSet = new OrderedHashSet();
            }

            referencesColumnSet.addAll(right.referencesColumnSet);
        }

        if (isFullTrigger) {
            triggerColumnSet = null;
        } else if (right.triggerColumnSet != null) {
            if (triggerColumnSet == null) {
                triggerColumnSet = new OrderedHashSet();
            }

            triggerColumnSet.addAll(right.triggerColumnSet);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(6888,617,<204,8>,<223,9>)
```
 String testValue;
        int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(8107,617,<249,8>,<268,9>)
```
 String testValue;
        int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(3132,806,<90,8>,<113,28>)
```
 String CompareString = "nextval(\'\"" + SeqName + "\"\'";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = "SERIAL";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String PostgreSQL_func = Funcs[Idx][PostgreSQL];
            int    iStartPos       = columnType.indexOf(PostgreSQL_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][HSQLDB];
                NewColumnType +=
                    columnType.substring(iStartPos
                                         + PostgreSQL_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(5525,779,<159,8>,<181,28>)
```
 String CompareString = "nextval(\'\"" + SeqName + "\"\'";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = "SERIAL";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String ORACLE_func = Funcs[Idx][ORACLE];
            int    iStartPos   = columnType.indexOf(ORACLE_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][HSQLDB];
                NewColumnType += columnType.substring(iStartPos
                                                      + ORACLE_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(21582,542,<758,8>,<774,9>)
```
 if (isFullSelect) {
            sb.append(Tokens.T_SELECT);
            sb.append(',');
        } else if (selectColumnSet != null) {
            sb.append(Tokens.T_SELECT);
            getColumnList(table, selectColumnSet, sb);
            sb.append(',');
        }

        if (isFullInsert) {
            sb.append(Tokens.T_INSERT);
            sb.append(',');
        } else if (insertColumnSet != null) {
            sb.append(Tokens.T_INSERT);
            getColumnList(table, insertColumnSet, sb);
            sb.append(',');
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(21858,542,<767,8>,<783,9>)
```
 if (isFullInsert) {
            sb.append(Tokens.T_INSERT);
            sb.append(',');
        } else if (insertColumnSet != null) {
            sb.append(Tokens.T_INSERT);
            getColumnList(table, insertColumnSet, sb);
            sb.append(',');
        }

        if (isFullUpdate) {
            sb.append(Tokens.T_UPDATE);
            sb.append(',');
        } else if (updateColumnSet != null) {
            sb.append(Tokens.T_UPDATE);
            getColumnList(table, updateColumnSet, sb);
            sb.append(',');
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4963,383,<147,4>,<159,5>)
```
 public static ResultLob newLobSetCharsRequest(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(6026,385,<186,4>,<198,5>)
```
 public static ResultLob newLobGetCharsResponse(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_GET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(7457,419,<237,4>,<249,5>)
```
 public static ResultLob newLobGetCharPatternPositionRequest(long id,
            char[] pattern, long offset) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = pattern;
        result.blockLength = pattern.length;

        return result;
    }
```


****************************************
******** Type 3 clone detection ********
****************************************
*****************************
** Clone percentage
** 0.4989168253%
*****************************
** Number of clone classes:
** 26
*****************************
** Number of clones:
** 53
*****************************
** Size (SLOC) of largest clone: 
** 59
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)}
** The largest clones in code:
** 
** largest clone number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**

*****************************
** The largest clone classes in SLOC:
** 111
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2860,<3440,12>,<3497,59>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**
// common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 3             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(98085,887,<2331,16>,<2345,17>)
```
 if (mathMatcher.matches()) {
                    shared.userVars.put(mathMatcher.group(1), Long.toString(
                            Calculator.reassignValue(mathMatcher.group(1),
                            shared.userVars, mathMatcher.group(2),
                            (mathMatcher.groupCount() < 3)
                            ? null : mathMatcher.group(3))));
                } else {
                    mathMatcher = mathPattern.matcher(initAssignmentStr);
                    if (mathMatcher.matches())
                        shared.userVars.put(mathMatcher.group(1), Long.toString(
                                new Calculator(((mathMatcher.groupCount() > 1
                                && mathMatcher.group(2) != null)
                                ? mathMatcher.group(2)
                                : ""), shared.userVars).reduce(0, false)));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(99989,1409,<2369,24>,<2393,21>)
```
 {
                        Matcher mathMatcher =
                                mathAsgnPattern.matcher(iterableAssignmentStr);
                        if (mathMatcher.matches()) {
                            shared.userVars.put(
                                    mathMatcher.group(1), Long.toString(
                                    Calculator.reassignValue(
                                    mathMatcher.group(1),
                                    shared.userVars, mathMatcher.group(2),
                                    (mathMatcher.groupCount() < 3)
                                    ? null : mathMatcher.group(3))));
                        } else {
                            mathMatcher =
                                    mathPattern.matcher(iterableAssignmentStr);
                            if (mathMatcher.matches())
                                shared.userVars.put(
                                        mathMatcher.group(1), Long.toString(
                                        new Calculator(
                                        ((mathMatcher.groupCount() > 1
                                        && mathMatcher.group(2) != null)
                                        ? mathMatcher.group(2)
                                        : ""),
                                        shared.userVars).reduce(0, false)));
                        }
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4963,383,<147,4>,<159,5>)
```
 public static ResultLob newLobSetCharsRequest(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4574,383,<133,4>,<145,5>)
```
 public static ResultLob newLobSetBytesRequest(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(256768,394,<6150,12>,<6159,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10113,397,<257,12>,<266,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10347,636,<279,8>,<298,9>)
```
 for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4574,383,<133,4>,<145,5>)
```
 public static ResultLob newLobSetBytesRequest(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4963,383,<147,4>,<159,5>)
```
 public static ResultLob newLobSetCharsRequest(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185991,772,<4973,12>,<4986,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263076,768,<6942,49>,<6960,13>)
```
 {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129523,697,<3148,8>,<3164,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(8659,536,<255,4>,<269,5>)
```
 void populateBySerialIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(new Integer(i), new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(9201,538,<271,4>,<285,5>)
```
 void populateBySerialIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(i, new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(9201,538,<271,4>,<285,5>)
```
 void populateBySerialIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(i, new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(8659,536,<255,4>,<269,5>)
```
 void populateBySerialIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(new Integer(i), new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10113,397,<257,12>,<266,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(256768,394,<6150,12>,<6159,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185991,772,<4973,12>,<4986,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50260,514,<1216,16>,<1225,50>)
```
 row[ipk_table_cat]   = pkTableCatalog;
                row[ipk_table_schem] = pkTableSchema;
                row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89026,654,<2147,16>,<2163,53>)
```
 row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(99989,1409,<2369,24>,<2393,21>)
```
 {
                        Matcher mathMatcher =
                                mathAsgnPattern.matcher(iterableAssignmentStr);
                        if (mathMatcher.matches()) {
                            shared.userVars.put(
                                    mathMatcher.group(1), Long.toString(
                                    Calculator.reassignValue(
                                    mathMatcher.group(1),
                                    shared.userVars, mathMatcher.group(2),
                                    (mathMatcher.groupCount() < 3)
                                    ? null : mathMatcher.group(3))));
                        } else {
                            mathMatcher =
                                    mathPattern.matcher(iterableAssignmentStr);
                            if (mathMatcher.matches())
                                shared.userVars.put(
                                        mathMatcher.group(1), Long.toString(
                                        new Calculator(
                                        ((mathMatcher.groupCount() > 1
                                        && mathMatcher.group(2) != null)
                                        ? mathMatcher.group(2)
                                        : ""),
                                        shared.userVars).reduce(0, false)));
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(98085,887,<2331,16>,<2345,17>)
```
 if (mathMatcher.matches()) {
                    shared.userVars.put(mathMatcher.group(1), Long.toString(
                            Calculator.reassignValue(mathMatcher.group(1),
                            shared.userVars, mathMatcher.group(2),
                            (mathMatcher.groupCount() < 3)
                            ? null : mathMatcher.group(3))));
                } else {
                    mathMatcher = mathPattern.matcher(initAssignmentStr);
                    if (mathMatcher.matches())
                        shared.userVars.put(mathMatcher.group(1), Long.toString(
                                new Calculator(((mathMatcher.groupCount() > 1
                                && mathMatcher.group(2) != null)
                                ? mathMatcher.group(2)
                                : ""), shared.userVars).reduce(0, false)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)
```
 {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2860,<3440,12>,<3497,59>)
```
 // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10347,636,<279,8>,<298,9>)
```
 for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130806,1231,<3535,12>,<3554,57>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(123310,947,<3360,12>,<3374,64>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89026,654,<2147,16>,<2163,53>)
```
 row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50260,514,<1216,16>,<1225,50>)
```
 row[ipk_table_cat]   = pkTableCatalog;
                row[ipk_table_schem] = pkTableSchema;
                row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
```

