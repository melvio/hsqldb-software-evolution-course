
****************************************
******** Type 1 clone detection ********
****************************************
*****************************
** Clone percentage
** 6.876219691%
*****************************
** Number of clone classes:
** 572
*****************************
** Number of clones:
** 1285
*****************************
** Size (SLOC) of largest clone: 
** 59
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)}
** The largest clones in code:
** 
** largest clone number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**

*****************************
** The largest clone classes in SLOC:
** 112
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2914,<3440,12>,<3498,53>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**
// common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
            row[declared_data_type] = row[data_type];
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 1             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(52243,213,<1709,12>,<1712,74>)
```
 ResultMetaData meta = deleteLobPartCall.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(55505,209,<1803,8>,<1806,70>)
```
 ResultMetaData meta     = deleteLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(47824,352,<1548,12>,<1558,13>)
```
 Object[] data = getLobHeader(lobID);

            if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

            if (dataLength == 0) {
                return ResultLob.newLobSetResponse(lobID, length);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(49635,352,<1617,12>,<1627,13>)
```
 Object[] data = getLobHeader(lobID);

            if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

            if (dataLength == 0) {
                return ResultLob.newLobSetResponse(lobID, length);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(87158,178,<2291,16>,<2293,54>)
```
 part               = getTSIToken((String) nodes[0].valueData);
                nodes[0].valueData = ValuePool.getInt(part);
                nodes[0].dataType  = Type.SQL_INTEGER;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(88767,172,<2335,20>,<2337,58>)
```
 part = getTSIToken((String) nodes[0].valueData);
                    nodes[0].valueData = ValuePool.getInt(part);
                    nodes[0].dataType  = Type.SQL_INTEGER;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(23035,233,<739,16>,<747,17>)
```
 if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                    aOffset = 0;

                    aIndex++;
                }

                if (aIndex == aAddresses.length) {
                    break;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(25923,233,<839,16>,<847,17>)
```
 if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                    aOffset = 0;

                    aIndex++;
                }

                if (aIndex == aAddresses.length) {
                    break;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(64902,210,<1912,8>,<1922,21>)
```
 b.append(NL);

        for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }

        b.append(NL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(33871,210,<1125,8>,<1135,21>)
```
 b.append(NL);

        for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }

        b.append(NL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(29688,402,<918,14>,<930,13>)
```
 catch (Exception E) {
                if (verbose) {
                    System.out.println("Transaction failed: "
                                       + E.getMessage());
                    E.printStackTrace();
                }

                incrementFailedTransactionCount();

                try {
                    Conn.rollback();
                } catch (SQLException E1) {}
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(32867,402,<1032,14>,<1044,13>)
```
 catch (Exception E) {
                if (verbose) {
                    System.out.println("Transaction failed: "
                                       + E.getMessage());
                    E.printStackTrace();
                }

                incrementFailedTransactionCount();

                try {
                    Conn.rollback();
                } catch (SQLException E1) {}
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(56790,314,<1364,16>,<1374,17>)
```
 TimestampData ts;

                if (nodes[0] == null) {
                    ts = session.getCurrentTimestamp(true);
                } else {
                    if (data[0] == null) {
                        return null;
                    }

                    ts = (TimestampData) data[0];
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(57303,314,<1381,16>,<1391,17>)
```
 TimestampData ts;

                if (nodes[0] == null) {
                    ts = session.getCurrentTimestamp(true);
                } else {
                    if (data[0] == null) {
                        return null;
                    }

                    ts = (TimestampData) data[0];
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(63435,170,<2053,8>,<2058,50>)
```
 if (aParts.length == bParts.length) {
            return 0;
        }

        return aParts.length > bParts.length ? 1
                                             : -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(64575,170,<2087,8>,<2092,50>)
```
 if (aParts.length == bParts.length) {
            return 0;
        }

        return aParts.length > bParts.length ? 1
                                             : -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(115193,438,<3082,34>,<3094,13>)
```
 {
                for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
                }

                dataType = Type.SQL_VARCHAR_DEFAULT;

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(111630,406,<2977,16>,<2987,22>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
                }

                dataType = Type.SQL_VARCHAR_DEFAULT;

                break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(19357,186,<551,8>,<557,35>)
```
 columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(17026,186,<516,8>,<522,35>)
```
 columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(19488,398,<640,16>,<649,61>)
```
 appendTable(sb).append('\n');
                appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(20087,398,<656,16>,<665,61>)
```
 appendTable(sb).append('\n');
                appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(20986,398,<680,16>,<689,61>)
```
 appendTable(sb).append('\n');
                appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(9259,389,<351,12>,<366,13>)
```
 String   folder = s[2];
            int      ci     = currentindent;

            for (; ci > 0; ci--) {
                if (key.startsWith(root[ci])) {
                    break;
                }
            }

            if (root[ci].length() < key.length()) {
                ci++;
            }

            if (closed && ci > currentindent) {
                continue;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(12320,389,<481,12>,<496,13>)
```
 String   folder = s[2];
            int      ci     = currentindent;

            for (; ci > 0; ci--) {
                if (key.startsWith(root[ci])) {
                    break;
                }
            }

            if (root[ci].length() < key.length()) {
                ci++;
            }

            if (closed && ci > currentindent) {
                continue;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(89652,273,<2361,24>,<2365,25>)
```
 if (nodes[2].dataType.typeCode == Types.SQL_TIME
                                || nodes[2].dataType.typeCode
                                   == Types.SQL_TIME_WITH_TIME_ZONE) {
                            throw Error.error(ErrorCode.X_42563);
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(90622,273,<2383,24>,<2387,25>)
```
 if (nodes[2].dataType.typeCode == Types.SQL_TIME
                                || nodes[2].dataType.typeCode
                                   == Types.SQL_TIME_WITH_TIME_ZONE) {
                            throw Error.error(ErrorCode.X_42563);
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(4031,168,<121,12>,<128,49>)
```
 rs.next();

            Blob blob1 = rs.getBlob(2);

            rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(28410,168,<884,12>,<891,49>)
```
 rs.next();

            Blob blob1 = rs.getBlob(2);

            rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(7735,192,<285,8>,<291,44>)
```
 int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(7391,192,<271,8>,<277,44>)
```
 int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(16039,327,<508,12>,<513,66>)
```
 ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(16862,327,<533,12>,<538,66>)
```
 ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(58539,159,<1676,12>,<1680,21>)
```
 String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(28229,159,<889,12>,<893,21>)
```
 String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(7493,373,<228,8>,<240,9>)
```
 rs.next();
        assertEquals(rs.getString(1), "SYSTEM_LOBS");
        assertEquals(rs.getString(2), "LOB_IDS");
        rs.close();

        if (cs.getMoreResults()) {
            rs = cs.getResultSet();

            rs.next();
            assertEquals(rs.getString(1), "SYSTEM_LOBS");
            assertEquals(rs.getString(2), "LOBS");
            rs.close();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(8557,373,<264,8>,<276,9>)
```
 rs.next();
        assertEquals(rs.getString(1), "SYSTEM_LOBS");
        assertEquals(rs.getString(2), "LOB_IDS");
        rs.close();

        if (cs.getMoreResults()) {
            rs = cs.getResultSet();

            rs.next();
            assertEquals(rs.getString(1), "SYSTEM_LOBS");
            assertEquals(rs.getString(2), "LOBS");
            rs.close();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(4402,493,<133,39>,<155,5>)
```
 {

        switch (changeAction) {

            case RowAction.ACTION_DELETE :
                remove(row);
                break;

            case RowAction.ACTION_INSERT :
                break;

            case RowAction.ACTION_INSERT_DELETE :

                // INSERT + DELEETE
                remove(row);
                break;

            case RowAction.ACTION_DELETE_FINAL :
                delete(session, row);
                remove(row);
                break;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(7254,493,<256,39>,<278,5>)
```
 {

        switch (changeAction) {

            case RowAction.ACTION_DELETE :
                remove(row);
                break;

            case RowAction.ACTION_INSERT :
                break;

            case RowAction.ACTION_INSERT_DELETE :

                // INSERT + DELEETE
                remove(row);
                break;

            case RowAction.ACTION_DELETE_FINAL :
                delete(session, row);
                remove(row);
                break;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(5838,468,<187,54>,<204,5>)
```
 {

        // fredt@users 20011210 - patch 450412 by elise@users
        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(5509,406,<171,54>,<187,5>)
```
 {

        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(26971,277,<910,20>,<916,21>)
```
 double d = ((Number) a).doubleValue();

                    if (session instanceof Session) {
                        if (!((Session) session).database.sqlConvertTruncate) {
                            d = java.lang.Math.rint(d);
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(32131,237,<1072,12>,<1078,13>)
```
 double d = ((Number) a).doubleValue();

            if (session instanceof Session) {
                if (!((Session) session).database.sqlConvertTruncate) {
                    d = java.lang.Math.rint(d);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(33872,237,<1123,12>,<1129,13>)
```
 double d = ((Number) a).doubleValue();

            if (session instanceof Session) {
                if (!((Session) session).database.sqlConvertTruncate) {
                    d = java.lang.Math.rint(d);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(8459,345,<260,8>,<269,35>)
```
 System.out.println("Starting (sub-)test: " + getName());

        try {
            String ddl0 = "DROP TABLE CLOBTEST IF EXISTS";
            String ddl1 =
                "CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))";

            statement.execute(ddl0);
            statement.execute(ddl1);
        } catch (SQLException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(21979,345,<665,8>,<674,35>)
```
 System.out.println("Starting (sub-)test: " + getName());

        try {
            String ddl0 = "DROP TABLE CLOBTEST IF EXISTS";
            String ddl1 =
                "CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))";

            statement.execute(ddl0);
            statement.execute(ddl1);
        } catch (SQLException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(24112,345,<740,8>,<749,35>)
```
 System.out.println("Starting (sub-)test: " + getName());

        try {
            String ddl0 = "DROP TABLE CLOBTEST IF EXISTS";
            String ddl1 =
                "CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))";

            statement.execute(ddl0);
            statement.execute(ddl1);
        } catch (SQLException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(4096,211,<125,12>,<131,56>)
```
 rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
            byte[] data2 = blob2.getBytes(1, 10);

            assertTrue(data1[4] == 5 && data2[4] == 50);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(28475,211,<888,12>,<894,56>)
```
 rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
            byte[] data2 = blob2.getBytes(1, 10);

            assertTrue(data1[4] == 5 && data2[4] == 50);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(8496,566,<212,43>,<237,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(8740,566,<234,43>,<259,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(26468,203,<969,8>,<975,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                if (nodes[i].hasReference(range)) {
                    return true;
                }
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(33063,203,<1102,8>,<1108,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                if (nodes[i].hasReference(range)) {
                    return true;
                }
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(27661,479,<843,16>,<863,13>)
```
 {
                if (pstmt1 != null) {
                    pstmt1.close();
                }

                if (pstmt2 != null) {
                    pstmt2.close();
                }

                if (pstmt3 != null) {
                    pstmt3.close();
                }

                if (pstmt4 != null) {
                    pstmt4.close();
                }

                if (pstmt5 != null) {
                    pstmt5.close();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(28776,543,<919,20>,<939,17>)
```
 {
                    if (pstmt1 != null) {
                        pstmt1.close();
                    }

                    if (pstmt2 != null) {
                        pstmt2.close();
                    }

                    if (pstmt3 != null) {
                        pstmt3.close();
                    }

                    if (pstmt4 != null) {
                        pstmt4.close();
                    }

                    if (pstmt5 != null) {
                        pstmt5.close();
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(37490,490,<983,8>,<1000,9>)
```
 switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(83737,490,<1989,8>,<2006,9>)
```
 switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(47064,293,<1599,16>,<1606,17>)
```
 if (set.map.size() != 0) {
                    values = new Object[set.map.size()];

                    set.map.valuesToArray(values);

                    objects = new WrapperIterator(objects,
                                                  new WrapperIterator(values));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(47501,335,<1611,20>,<1619,21>)
```
 if (set.map.size() != 0) {
                        values = new Object[set.map.size()];

                        set.map.valuesToArray(values);

                        objects =
                            new WrapperIterator(objects,
                                                new WrapperIterator(values));
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(56521,213,<1939,20>,<1944,79>)
```
 if (name == null) {
                        return null;
                    }

                    HsqlName tableName = name.parent;
                    Table table = (Table) schema.tableList.get(tableName.name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(56951,213,<1951,20>,<1956,79>)
```
 if (name == null) {
                        return null;
                    }

                    HsqlName tableName = name.parent;
                    Table table = (Table) schema.tableList.get(tableName.name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(48710,241,<1287,8>,<1297,32>)
```
 if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }

        return new Date(millis);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(199975,241,<4733,8>,<4743,32>)
```
 if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }

        return new Date(millis);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(3980,239,<118,16>,<126,17>)
```
 if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }

                i++;

                if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace("Transfered " + i + " rows");
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(6622,239,<224,16>,<232,17>)
```
 if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }

                i++;

                if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace("Transfered " + i + " rows");
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigator.java|(5708,309,<246,8>,<264,9>)
```
 if (position < 0) {
            position += size;
        }

        if (position < 0) {
            beforeFirst();

            return false;
        }

        if (position >= size) {
            afterLast();

            return false;
        }

        if (size == 0) {
            return false;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(4541,309,<157,8>,<175,9>)
```
 if (position < 0) {
            position += size;
        }

        if (position < 0) {
            beforeFirst();

            return false;
        }

        if (position >= size) {
            afterLast();

            return false;
        }

        if (size == 0) {
            return false;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11202,288,<487,8>,<499,28>)
```
 if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;

        if (index >= map.length) {
            return;
        }

        byte b = map[index];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13133,288,<562,8>,<574,28>)
```
 if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;

        if (index >= map.length) {
            return;
        }

        byte b = map[index];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(6464,304,<155,12>,<159,28>)
```
 System.out.println("-v          verbose error messages");
            System.out.println("-init       initialize the tables");
            System.out.println("-tpc        transactions per client");
            System.out.println("-clients    number of simultaneous clients");
            System.exit(-1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(5636,304,<147,12>,<151,28>)
```
 System.out.println("-v          verbose error messages");
            System.out.println("-init       initialize the tables");
            System.out.println("-tpc        transactions per client");
            System.out.println("-clients    number of simultaneous clients");
            System.exit(-1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(32620,197,<1082,8>,<1088,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(13876,394,<377,0>,<390,13>)
```
 //
//            Stmt.execute("SET WRITE_DELAY 1000 MILLIS;");
//            Stmt.execute("SET DATABASE DEFAULT TABLE TYPE CACHED");
//
            Query = "SELECT count(*) ";
            Query += "FROM   accounts";

            ResultSet RS = Stmt.executeQuery(Query);

            Stmt.clearWarnings();

            while (RS.next()) {
                accountsnb = RS.getInt(1);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(13934,261,<399,0>,<409,13>)
```
 //
            Query = "SELECT count(*) ";
            Query += "FROM   accounts";

            ResultSet RS = Stmt.executeQuery(Query);

            Stmt.clearWarnings();

            while (RS.next()) {
                accountsnb = RS.getInt(1);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(35793,520,<1200,50>,<1223,5>)
```
 {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(36393,520,<1225,78>,<1248,5>)
```
 {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(27315,291,<770,16>,<777,17>)
```
 Expression target = XreadTargetSpecification(rangeVars,
                    colIndexList);

                if (!targets.add(target)) {
                    ColumnSchema col = target.getColumn();

                    throw Error.error(ErrorCode.X_42579, col.getName().name);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(29407,271,<848,12>,<855,13>)
```
 Expression target = XreadTargetSpecification(rangeVars,
                colIndexList);

            if (!targets.add(target)) {
                ColumnSchema col = target.getColumn();

                throw Error.error(ErrorCode.X_42579, col.getName().name);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(22016,271,<666,12>,<673,13>)
```
 Expression target = XreadTargetSpecification(rangeVars,
                colIndexList);

            if (!targets.add(target)) {
                ColumnSchema col = target.getColumn();

                throw Error.error(ErrorCode.X_42579, col.getName().name);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(30495,347,<1021,57>,<1029,21>)
```
 {
                        if (matchIndex < 0) {
                            matchIndex = i;
                        } else if (session.database.sqlEnforceRefs) {
                            String message = getColumnName();

                            throw Error.error(ErrorCode.X_42580, message);
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(31138,375,<1038,53>,<1046,25>)
```
 {
                            if (matchIndex < 0) {
                                matchIndex = i;
                            } else if (session.database.sqlEnforceRefs) {
                                String message = getColumnName();

                                throw Error.error(ErrorCode.X_42580, message);
                            }
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(31755,375,<1051,54>,<1059,25>)
```
 {
                            if (matchIndex < 0) {
                                matchIndex = i;
                            } else if (session.database.sqlEnforceRefs) {
                                String message = getColumnName();

                                throw Error.error(ErrorCode.X_42580, message);
                            }
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(18728,372,<520,12>,<535,32>)
```
 Statement Stmt = Conn.createStatement();
            String    Query;

            Query = "DELETE FROM history";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(18470,372,<557,12>,<572,32>)
```
 Statement Stmt = Conn.createStatement();
            String    Query;

            Query = "DELETE FROM history";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23197,286,<561,8>,<571,10>)
```
 types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
        meta.colIndexes   = new int[] {
            -1, -1
        };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(21908,286,<518,8>,<528,10>)
```
 types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
        meta.colIndexes   = new int[] {
            -1, -1
        };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5494,648,<194,8>,<215,9>)
```
 sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }

        if (isCycle()) {
            sb.append(' ').append(Tokens.T_CYCLE);
        }

        if (name == null) {
            sb.append(Tokens.T_CLOSEBRACKET);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6805,716,<239,12>,<260,13>)
```
 sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }

            if (isCycle()) {
                sb.append(' ').append(Tokens.T_CYCLE);
            }

            if (name == null) {
                sb.append(Tokens.T_CLOSEBRACKET);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(15023,439,<546,16>,<556,58>)
```
 if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(15993,439,<573,16>,<583,58>)
```
 if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11078,284,<483,8>,<492,31>)
```
 int mask      = (source & 0xff) >>> shift;
        int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13009,284,<558,8>,<567,31>)
```
 int mask      = (source & 0xff) >>> shift;
        int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(54511,177,<1800,8>,<1802,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ type };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(55284,177,<1825,8>,<1827,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ type };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85552,511,<2124,8>,<2141,9>)
```
 checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88685,511,<2213,8>,<2230,9>)
```
 checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BitType.java|(13620,383,<451,8>,<470,30>)
```
 if (end < offset) {
            throw Error.error(ErrorCode.X_22011);
        }

        if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(24670,383,<814,8>,<833,30>)
```
 if (end < offset) {
            throw Error.error(ErrorCode.X_22011);
        }

        if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(29947,219,<767,24>,<770,25>)
```
 for (int i = 0; i < pgTypes.length; i++) {
                            pgTypes[i] = PgType.getPgType(colTypes[i],
                                                          md.isTableColumn(i));
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(46546,207,<1135,20>,<1138,21>)
```
 for (int i = 0; i < pgTypes.length; i++) {
                        pgTypes[i] = PgType.getPgType(colTypes[i],
                                                      md.isTableColumn(i));
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(167534,270,<3998,66>,<4009,5>)
```
 {

        if (isClosed || connection.isClosed) {
            checkClosed();
        }

        if (i < 1 || i > parameterValues.length) {
            String msg = "parameter index out of range: " + i;

            throw JDBCUtil.outOfRangeArgument(msg);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(168152,253,<4020,8>,<4028,9>)
```
 if (isClosed || connection.isClosed) {
            checkClosed();
        }

        if (i < 1 || i > parameterValues.length) {
            String msg = "parameter index out of range: " + i;

            throw JDBCUtil.outOfRangeArgument(msg);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(6591,342,<204,12>,<213,13>)
```
 if (columnMap == null) {
                data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,
                        visibleColumnCount);
            } else {
                Object[] newData = new Object[visibleColumnCount];

                ArrayUtil.projectRow(data, columnMap, newData);

                data = newData;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(5583,314,<199,8>,<208,9>)
```
 if (columnMap == null) {
            data = (Object[]) ArrayUtil.resizeArrayIfDifferent(data,
                    visibleColumnCount);
        } else {
            Object[] newData = new Object[visibleColumnCount];

            ArrayUtil.projectRow(data, columnMap, newData);

            data = newData;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(35606,343,<1071,8>,<1082,9>)
```
 if (a == null || b == null) {
            return null;
        }

        if (otherType.isNumberType()) {
            if (typeCode == Types.SQL_DATE) {
                b = ((NumberType) otherType).floor(b);
            }

            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(
                IntervalSecondData.oneDay, b);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(37447,343,<1121,8>,<1132,9>)
```
 if (a == null || b == null) {
            return null;
        }

        if (otherType.isNumberType()) {
            if (typeCode == Types.SQL_DATE) {
                b = ((NumberType) otherType).floor(b);
            }

            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(
                IntervalSecondData.oneDay, b);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(114214,296,<3631,8>,<3638,57>)
```
 Object[] args = new Object[] {
            name, newName
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();

        return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(137152,299,<4327,8>,<4334,57>)
```
 Object[] args    = new Object[] {
            name, newName
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();

        return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48635,306,<1345,12>,<1353,60>)
```
 table = (Table) tables.next();

            if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(143846,306,<3504,12>,<3512,60>)
```
 table = (Table) tables.next();

            if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8635,704,<298,8>,<312,9>)
```
 int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;

        if (startType == Types.SQL_INTERVAL_HOUR) {
            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                           : Types.SQL_TIME;
        } else {
            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                           : Types.SQL_TIMESTAMP;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10413,953,<347,16>,<363,17>)
```
 int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;

                if (startType == Types.SQL_INTERVAL_HOUR) {
                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                                   : Types.SQL_TIME;
                } else {
                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                                   : Types.SQL_TIMESTAMP;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(12920,325,<395,8>,<405,35>)
```
 if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(14992,325,<456,8>,<466,35>)
```
 if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(19151,294,<613,8>,<628,30>)
```
 if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BitType.java|(13709,294,<455,8>,<470,30>)
```
 if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(24759,294,<818,8>,<833,30>)
```
 if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59855,163,<1824,8>,<1827,44>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60194,163,<1831,8>,<1834,44>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(62517,455,<2050,12>,<2061,13>)
```
 statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(63593,455,<2086,12>,<2097,13>)
```
 statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8354,516,<290,8>,<301,65>)
```
 DateTimeType otherType = (DateTimeType) other;

        // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10084,656,<339,16>,<351,73>)
```
 DateTimeType otherType = (DateTimeType) other;

                // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(10586,369,<359,8>,<371,30>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11112,369,<382,8>,<394,30>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11741,369,<407,8>,<419,30>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(62725,335,<2054,12>,<2065,13>)
```
 list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }

            if (token.tokenType != Tokens.WHEN) {
                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(63801,335,<2090,12>,<2101,13>)
```
 list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }

            if (token.tokenType != Tokens.WHEN) {
                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8254,550,<286,8>,<300,73>)
```
 if (!other.isDateTimeType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        DateTimeType otherType = (DateTimeType) other;

        // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(9960,706,<335,16>,<350,74>)
```
 if (!other.isDateTimeType()) {
                    throw Error.error(ErrorCode.X_42562);
                }

                DateTimeType otherType = (DateTimeType) other;

                // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(11876,444,<375,8>,<390,9>)
```
 for (int i = 0; i < statements.length; i++) {
            result = executeProtected(session, statements[i]);
            result = handleCondition(session, result);

            if (result.isError()) {
                break;
            }

            if (result.getType() == ResultConstants.VALUE) {
                break;
            }

            if (result.getType() == ResultConstants.DATA) {
                break;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(15965,492,<499,12>,<514,13>)
```
 for (int i = 0; i < statements.length; i++) {
                result = executeProtected(session, statements[i]);
                result = handleCondition(session, result);

                if (result.isError()) {
                    break;
                }

                if (result.getType() == ResultConstants.VALUE) {
                    break;
                }

                if (result.getType() == ResultConstants.DATA) {
                    break;
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(9369,467,<312,8>,<327,34>)
```
 if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }

        int    index       = hashIndex.getHashIndex(hash);
        int    lookup      = hashIndex.hashTable[index];
        int    lastLookup  = -1;
        Object returnValue = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(14196,471,<471,8>,<486,35>)
```
 if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }

        int     index       = hashIndex.getHashIndex(hash);
        int     lookup      = hashIndex.hashTable[index];
        int     lastLookup  = -1;
        Object  returnValue = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntValueHashMap.java|(2289,238,<62,8>,<71,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return intValueTable[lookup];
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntValueHashMap.java|(2640,238,<78,8>,<87,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return intValueTable[lookup];
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(21345,217,<676,12>,<680,52>)
```
 dataOut.writeLong(currentOffset);
            dataOut.writeLong(byteArrayOS.size() / 2);
            dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());

            currentOffset += byteArrayOS.size() / 2;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(20591,216,<650,8>,<655,48>)
```
 //
        dataOut.writeLong(currentOffset);
        dataOut.writeLong(byteArrayOS.size() / 2);
        dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());

        currentOffset += byteArrayOS.size() / 2;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(10471,267,<310,15>,<316,9>)
```
 if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(12262,267,<372,15>,<378,9>)
```
 if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(10824,357,<358,23>,<369,17>)
```
 {
                    if (longKey == 0) {
                        hasZeroKey   = false;
                        zeroKeyIndex = -1;
                    }

                    if (isIntKey) {
                        intKeyTable[lookup] = 0;
                    } else {
                        longKeyTable[lookup] = 0;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(21473,285,<687,16>,<696,17>)
```
 if (longKey == 0) {
                    hasZeroKey   = false;
                    zeroKeyIndex = -1;
                }

                if (isIntKey) {
                    intKeyTable[lookup] = 0;
                } else {
                    longKeyTable[lookup] = 0;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(15768,403,<527,12>,<539,9>)
```
 {
            session.actionTimestamp = getNextGlobalChangeTimestamp();

            if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(22633,379,<756,12>,<766,13>)
```
 session.actionTimestamp = getNextGlobalChangeTimestamp();

            if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9924,726,<265,12>,<282,51>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11270,726,<300,12>,<317,51>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(4191,218,<132,12>,<137,13>)
```
 for (int i = 0; i < session.tempSet.size(); i++) {
                Session current =
                    ((RowActionBase) session.tempSet.get(i)).session;

                current.abortTransaction = true;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(5573,218,<179,12>,<184,13>)
```
 for (int i = 0; i < session.tempSet.size(); i++) {
                Session current =
                    ((RowActionBase) session.tempSet.get(i)).session;

                current.abortTransaction = true;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5176,164,<153,8>,<158,22>)
```
 result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(6241,164,<192,8>,<197,22>)
```
 result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(35419,626,<1178,55>,<1196,9>)
```
 {
            if (isObjectKey) {
                if (objectKeyTable[lookup] != null) {
                    return lookup;
                }
            } else if (isIntKey) {
                if (intKeyTable[lookup] != 0) {
                    return lookup;
                } else if (hasZeroKey && lookup == zeroKeyIndex) {
                    return lookup;
                }
            } else {
                if (longKeyTable[lookup] != 0) {
                    return lookup;
                } else if (hasZeroKey && lookup == zeroKeyIndex) {
                    return lookup;
                }
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(36325,626,<1207,68>,<1225,9>)
```
 {
            if (isObjectKey) {
                if (objectKeyTable[lookup] != null) {
                    return lookup;
                }
            } else if (isIntKey) {
                if (intKeyTable[lookup] != 0) {
                    return lookup;
                } else if (hasZeroKey && lookup == zeroKeyIndex) {
                    return lookup;
                }
            } else {
                if (longKeyTable[lookup] != 0) {
                    return lookup;
                } else if (hasZeroKey && lookup == zeroKeyIndex) {
                    return lookup;
                }
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9733,715,<261,12>,<277,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11079,715,<296,12>,<312,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(11427,408,<346,8>,<355,9>)
```
 if (type == DatabaseURL.S_FILE) {
            databaseMap = fileDatabaseMap;
            key         = filePathToKey(path);
        } else if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw (Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager"));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(13015,408,<400,8>,<409,9>)
```
 if (type == DatabaseURL.S_FILE) {
            databaseMap = fileDatabaseMap;
            key         = filePathToKey(path);
        } else if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw (Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager"));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(3519,472,<112,12>,<124,69>)
```
 int limit = session.rowActionList.size();

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                if (!action.canCommit(session, session.tempSet)) {

//                System.out.println("commit conflicts " + session + " " + session.actionTimestamp);
                    return false;
                }
            }

            session.actionTimestamp = getNextGlobalChangeTimestamp();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(4729,542,<155,12>,<168,77>)
```
 int limit = session.rowActionList.size();

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                if (!action.canCommit(session, session.tempSet)) {

//                  System.out.println("commit conflicts " + session + " " + session.actionTimestamp);
                    return false;
                }
            }

            // new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(7875,680,<217,8>,<233,75>)
```
 // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();

        boolean result =
            retrievedString.equals(selectString);

        Assert.assertTrue(
            "The time retrieved from database "
            + DateFormat.getDateTimeInstance().format(retrievedTime)
            + " is not the same as the inserted one "
            + DateFormat.getDateTimeInstance().format(insertTime), result);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(11610,680,<317,8>,<333,75>)
```
 // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();

        boolean result =
            retrievedString.equals(selectString);

        Assert.assertTrue(
            "The time retrieved from database "
            + DateFormat.getDateTimeInstance().format(retrievedTime)
            + " is not the same as the inserted one "
            + DateFormat.getDateTimeInstance().format(insertTime), result);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputBase.java|(9224,201,<308,54>,<320,5>)
```
 {

        mark = 0;

        reset();

        if (buffer.length < rowsize) {
            buffer = new byte[rowsize];
        }

        filePos   = filepos;
        size      = count = rowsize;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputBase.java|(8598,184,<286,8>,<295,36>)
```
 mark = 0;

        reset();

        if (buffer.length < rowsize) {
            buffer = new byte[rowsize];
        }

        filePos   = filepos;
        size      = count = rowsize;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(34380,206,<872,20>,<875,57>)
```
 HsqlName name = (HsqlName) parameters[0];
                    Table table =
                        session.database.schemaManager.getTable(session,
                            name.name, name.schema.name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(39798,206,<1008,20>,<1011,57>)
```
 HsqlName name = (HsqlName) parameters[0];
                    Table table =
                        session.database.schemaManager.getTable(session,
                            name.name, name.schema.name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(40679,206,<1027,20>,<1030,57>)
```
 HsqlName name = (HsqlName) parameters[0];
                    Table table =
                        session.database.schemaManager.getTable(session,
                            name.name, name.schema.name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(7740,540,<213,8>,<227,49>)
```
 Assert.assertEquals(
            "Exactly one record with time data shoud have been deleted.",
            iDeletedCount, 1);

        // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();

        boolean result =
            retrievedString.equals(selectString);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(11475,540,<313,8>,<327,49>)
```
 Assert.assertEquals(
            "Exactly one record with time data shoud have been deleted.",
            iDeletedCount, 1);

        // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();

        boolean result =
            retrievedString.equals(selectString);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9454,699,<253,12>,<270,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10800,699,<288,12>,<305,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(7578,185,<240,8>,<244,36>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8001,185,<254,8>,<258,36>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(6444,282,<177,42>,<184,17>)
```
 {
                    int index = rangeVarSet.getIndex(range);

                    if (index > 0) {
                        rangeVariables[index].isLeftJoin      = false;
                        rangeVariables[index - 1].isRightJoin = false;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(6894,282,<189,42>,<196,17>)
```
 {
                    int index = rangeVarSet.getIndex(range);

                    if (index > 0) {
                        rangeVariables[index].isLeftJoin      = false;
                        rangeVariables[index - 1].isRightJoin = false;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67060,264,<1879,16>,<1882,68>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170622,264,<4575,16>,<4578,68>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,348,<5466,16>,<5476,60>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312405,348,<8221,16>,<8231,60>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(138611,340,<3741,16>,<3745,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(17789,1521,<491,12>,<539,39>)
```
 ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }

            try {

                // cause errors
                ps.setString(5, "three");
                fail("update did not fail");
            } catch (SQLException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(16656,1521,<416,12>,<464,39>)
```
 ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }

            try {

                // cause errors
                ps.setString(5, "three");
                fail("update did not fail");
            } catch (SQLException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82934,347,<2345,8>,<2358,29>)
```
 final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86789,344,<2463,8>,<2476,29>)
```
 final int table_schema  = 4;
        final int table_name    = 5;
        final int column_name   = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(9148,285,<267,8>,<274,72>)
```
 InputStreamReader reader = null;

        try {
            reader = new InputStreamReader(fis, "ISO-8859-1");
        } catch (Exception e) {}

        LineNumberReader lineReader = new LineNumberReader(reader);
        LineGroupReader  lg = new LineGroupReader(lineReader, starters);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(5529,305,<136,12>,<143,76>)
```
 InputStreamReader reader = null;

            try {
                reader = new InputStreamReader(fis, "ISO-8859-1");
            } catch (Exception e) {}

            LineNumberReader lineReader = new LineNumberReader(reader);
            LineGroupReader  lg = new LineGroupReader(lineReader, starters);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191294,333,<5117,16>,<5121,71>)
```
 row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211910,333,<5703,16>,<5707,71>)
```
 row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263538,292,<6953,16>,<6959,44>)
```
 row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312972,292,<8235,16>,<8241,44>)
```
 row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286865,408,<7574,20>,<7582,48>)
```
 row[privilege_type] = Tokens.T_USAGE;
                    row[is_grantable] =
                        right.getGrantee() == object.getOwner()
                        || grantableRight.isFull() ? Tokens.T_YES
                                                   : Tokens.T_NO;;

                    try {
                        t.insertSys(session, store, row);
                    } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(294565,408,<7769,20>,<7777,48>)
```
 row[privilege_type] = Tokens.T_USAGE;
                    row[is_grantable] =
                        right.getGrantee() == object.getOwner()
                        || grantableRight.isFull() ? Tokens.T_YES
                                                   : Tokens.T_NO;;

                    try {
                        t.insertSys(session, store, row);
                    } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(71152,233,<1996,16>,<2002,49>)
```
 row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(72291,233,<2029,16>,<2035,49>)
```
 row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}

                t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestKarl.java|(7134,452,<232,8>,<247,9>)
```
 int       col_count = rs.getMetaData().getColumnCount();

        for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + "\t");
        }

        System.out.println("");

        while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print("\t");
            }

            System.out.println("");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestKarl.java|(8037,446,<267,8>,<282,9>)
```
 int col_count = rs.getMetaData().getColumnCount();

        for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + "\t");
        }

        System.out.println("");

        while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print("\t");
            }

            System.out.println("");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(259518,320,<6836,16>,<6842,70>)
```
 row = t.getEmptyRowData();

                //
                row[trigger_catalog] = database.getCatalogName().name;
                row[trigger_schema]  = trigger.getSchemaName().name;
                row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(270608,317,<7169,16>,<7173,70>)
```
 row                  = t.getEmptyRowData();
                row[trigger_catalog] = database.getCatalogName().name;
                row[trigger_schema]  = trigger.getSchemaName().name;
                row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(78159,415,<2668,20>,<2677,73>)
```
 Scanner scanner = session.getScanner();

                    scanner.reset(spec);
                    scanner.scanNext();

                    String schemaName =
                        session.getSchemaName(scanner.token.namePrefix);
                    NumberSequence sequence =
                        database.schemaManager.getSequence(
                            scanner.token.tokenString, schemaName, true);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(81682,349,<2790,8>,<2798,65>)
```
 Scanner scanner = session.getScanner();

        scanner.reset(spec);
        scanner.scanNext();

        String schemaName = session.getSchemaName(scanner.token.namePrefix);
        NumberSequence sequence =
            database.schemaManager.getSequence(scanner.token.tokenString,
                                               schemaName, true);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(9568,903,<335,8>,<368,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(12523,903,<465,8>,<498,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(13547,903,<506,8>,<539,9>)
```
 long min;
        long max;

        switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "NumberSequence");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13997,280,<597,8>,<601,46>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(14467,280,<612,8>,<616,46>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(15212,280,<635,8>,<639,46>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementInsert.java|(2433,475,<60,8>,<68,47>)
```
 super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,
              session.getCurrentSchemaHsqlName());

        this.targetTable = targetTable;
        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable
                                                             : targetTable
                                                             .getBaseTable();
        this.insertColumnMap    = columnMap;
        this.insertCheckColumns = checkColumns;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementInsert.java|(3548,475,<87,8>,<95,47>)
```
 super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,
              session.getCurrentSchemaHsqlName());

        this.targetTable = targetTable;
        this.baseTable   = targetTable.isTriggerInsertable() ? targetTable
                                                             : targetTable
                                                             .getBaseTable();
        this.insertColumnMap    = columnMap;
        this.insertCheckColumns = checkColumns;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(3086,451,<98,12>,<110,36>)
```
 // new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

            adjustLobUsage(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(3916,451,<122,12>,<134,36>)
```
 // new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

            adjustLobUsage(session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDima.java|(4499,186,<103,12>,<107,13>)
```
 while (rs.next()) {
                System.out.println(rs.getInt(1));
                System.out.println(rs.getInt(2));
                System.out.println(rs.getString(3));
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDima.java|(4816,186,<113,12>,<117,13>)
```
 while (rs.next()) {
                System.out.println(rs.getInt(1));
                System.out.println(rs.getInt(2));
                System.out.println(rs.getString(3));
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95676,531,<3340,46>,<3364,5>)
```
 {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(96255,531,<3366,46>,<3390,5>)
```
 {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(34761,357,<845,12>,<849,73>)
```
 addColumn(t, "REMARKS", CHARACTER_DATA);                // 11
            addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 12
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 13
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 14
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 15
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67665,542,<1627,12>,<1635,73>)
```
 addColumn(t, "REMARKS", CHARACTER_DATA);                // 12

            // ----------------------------------------------------------------
            // JDBC 4.0
            // ----------------------------------------------------------------
            addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 13
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 14
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 15
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 16
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(12999,1102,<437,8>,<470,9>)
```
 switch (type) {

            case StatementTypes.CALL : {
                break;
            }
            case StatementTypes.INSERT : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);

                break;
            }
            case StatementTypes.SELECT_CURSOR :
                break;

            case StatementTypes.DELETE_WHERE : {
                session.getGrantee().checkDelete(targetTable);

                break;
            }
            case StatementTypes.UPDATE_WHERE : {
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
            case StatementTypes.MERGE : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementResultUpdate.java|(6976,1102,<209,8>,<242,9>)
```
 switch (type) {

            case StatementTypes.CALL : {
                break;
            }
            case StatementTypes.INSERT : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);

                break;
            }
            case StatementTypes.SELECT_CURSOR :
                break;

            case StatementTypes.DELETE_WHERE : {
                session.getGrantee().checkDelete(targetTable);

                break;
            }
            case StatementTypes.UPDATE_WHERE : {
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
            case StatementTypes.MERGE : {
                session.getGrantee().checkInsert(targetTable,
                                                 insertCheckColumns);
                session.getGrantee().checkUpdate(targetTable,
                                                 updateCheckColumns);

                break;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(34835,363,<846,12>,<850,79>)
```
 addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 12
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 13
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 14
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 15
            addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER);     // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67740,541,<1629,12>,<1636,73>)
```
 // ----------------------------------------------------------------
            // JDBC 4.0
            // ----------------------------------------------------------------
            addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 13
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 14
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 15
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 16
            addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER);     // 17
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(71887,812,<2137,16>,<2157,30>)
```
 if (column != null) {
                    DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();
                    String  childName = null;
                    boolean isChar;

                    if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf("CHAR") >= 0;
                        result    += " WHERE " + quoteObjectName(column);

                        if (isChar) {
                            result += " LIKE \'%%\'";
                        } else {
                            result += " = ";
                        }
                    }
                }

                return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(73314,812,<2175,16>,<2195,30>)
```
 if (column != null) {
                    DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();
                    String  childName = null;
                    boolean isChar;

                    if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf("CHAR") >= 0;
                        result    += " WHERE " + quoteObjectName(column);

                        if (isChar) {
                            result += " LIKE \'%%\'";
                        } else {
                            result += " = ";
                        }
                    }
                }

                return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(35503,541,<945,16>,<959,17>)
```
 int eoThirdLine = sqlScriptBuffer.indexOf('\n');

                if (eoThirdLine > 0) {
                    eoThirdLine = sqlScriptBuffer.indexOf('\n',
                                                          eoThirdLine + 1);
                }

                if (eoThirdLine > 0) {
                    eoThirdLine = sqlScriptBuffer.indexOf('\n',
                                                          eoThirdLine + 1);
                }

                if (eoThirdLine < 1) {
                    eoThirdLine = 100;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(42299,761,<1143,24>,<1159,25>)
```
 int eoThirdLine = sqlScriptBuffer.indexOf('\n');

                        if (eoThirdLine > 0) {
                            eoThirdLine = sqlScriptBuffer.indexOf('\n',
                                                                  eoThirdLine
                                                                  + 1);
                        }

                        if (eoThirdLine > 0) {
                            eoThirdLine = sqlScriptBuffer.indexOf('\n',
                                                                  eoThirdLine
                                                                  + 1);
                        }

                        if (eoThirdLine < 1) {
                            eoThirdLine = 100;
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestTextTables.java|(6293,228,<210,8>,<217,60>)
```
 st   = conn.createStatement();

        rs = st.executeQuery("select count(*) from tmsingle");

        assertTrue(rs.next());
        assertEquals(20, rs.getInt(1));

        rs = st.executeQuery("select count(*) from tident");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestTextTables.java|(6676,228,<226,8>,<233,60>)
```
 st   = conn.createStatement();

        rs = st.executeQuery("select count(*) from tmsingle");

        assertTrue(rs.next());
        assertEquals(20, rs.getInt(1));

        rs = st.executeQuery("select count(*) from tident");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(41622,883,<957,28>,<973,29>)
```
 if (statement != null) {
                                try {
                                    rs = statement.getResultSet();
                                } catch (SQLException se) {
                                    try {
                                        if (statement != null)
                                            statement.close();
                                    } catch (SQLException nse) {
                                        // Purposefully doing nothing
                                    } finally {
                                        statement = null;
                                    }
                                    throw se;  // rethrow
                                }
                                displaySqlResults(
                                        statement, rs, null, null, true);
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(44102,779,<1009,24>,<1024,25>)
```
 if (statement != null) {
                            try {
                                rs = statement.getResultSet();
                            } catch (SQLException se) {
                                try {
                                    if (statement != null) statement.close();
                                } catch (SQLException nse) {
                                    // Purposefully doing nothing
                                } finally {
                                    statement = null;
                                }
                                throw se;  // rethrow
                            }
                            displaySqlResults(
                                    statement, rs, null, null, true);
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(122417,395,<2979,16>,<2990,17>)
```
 granteeObject = (Grantee) grantees.get(i);

                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(table);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(table);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(139836,395,<3403,16>,<3414,17>)
```
 granteeObject = (Grantee) grantees.get(i);

                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(table);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(table);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89026,654,<2147,16>,<2163,53>)
```
 row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87960,552,<2115,8>,<2132,45>)
```
 // Do it.
        row[icat]       = cat;
        row[ischem]     = schem;
        row[iname]      = pName;
        row[icol_name]  = cName;
        row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(32470,390,<1004,8>,<1013,36>)
```
 /* Can't user the super constructor, since it does funny things when
         * constructing the SQL Buffer, which we don't need. */
        lines = (String[]) linesArray.toArray();

        int    closeCmd = lines[0].indexOf("*/");
        String cmd      = lines[0].substring(0, closeCmd);

        lines[0] = lines[0].substring(closeCmd + 2).trim();

        String trimmed = cmd.trim();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(35219,389,<1096,8>,<1105,36>)
```
 /* Can't use the super constructor, since it does funny things when
         * constructing the SQL Buffer, which we don't need. */
        lines = (String[]) linesArray.toArray();

        int    closeCmd = lines[0].indexOf("*/");
        String cmd      = lines[0].substring(0, closeCmd);

        lines[0] = lines[0].substring(closeCmd + 2).trim();

        String trimmed = cmd.trim();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(18285,296,<586,8>,<593,9>)
```
 if (map.containsKey(name.name)) {
            throw Error.error(ErrorCode.X_28503, name.name);
        }

        if (SqlInvariants.isLobsSchemaName(name.name)
                || SqlInvariants.isSystemSchemaName(name.name)) {
            throw Error.error(ErrorCode.X_28502, name.name);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(18797,296,<607,8>,<614,9>)
```
 if (map.containsKey(name.name)) {
            throw Error.error(ErrorCode.X_28503, name.name);
        }

        if (SqlInvariants.isLobsSchemaName(name.name)
                || SqlInvariants.isSystemSchemaName(name.name)) {
            throw Error.error(ErrorCode.X_28502, name.name);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(261466,222,<6284,12>,<6289,28>)
```
 isr = new InputStreamReader(is);
            while ((i = isr.read(readBfr)) > -1)
                sWriter.write(readBfr, 0, i);
            readBfr = null;
            str = sWriter.toString();
            sWriter.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(262916,206,<6323,12>,<6327,28>)
```
 isr = new InputStreamReader(is);
            while ((i = isr.read(readBfr)) > -1) sWriter.write(readBfr, 0, i);
            readBfr = null;
            str = sWriter.toString();
            sWriter.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(4532,215,<138,8>,<141,55>)
```
 joinConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, true) };
        whereConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, false) };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(5444,215,<165,8>,<168,55>)
```
 joinConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, true) };
        whereConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, false) };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(6207,215,<186,8>,<189,55>)
```
 joinConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, true) };
        whereConditions = new RangeVariableConditions[]{
            new RangeVariableConditions(this, false) };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2645,662,<74,62>,<96,5>)
```
 {

        int               rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);
        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting " + expected
                        + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }

            result += "\n";

            rows++;
        }

        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMultiInsert.java|(2528,634,<69,89>,<88,5>)
```
 {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting "
            + expected + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                           + rs.getString(i + 1) + ":";
            }
            result += "\n";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129523,697,<3148,8>,<3164,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133988,697,<3253,8>,<3269,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(71879,258,<2249,16>,<2256,17>)
```
 PersistentStore store =
                    rangeVar.rangeTable.getRowStore(session);

                cost = store.elementCount();

                if (cost < Index.minimumSelectivity) {
                    cost = Index.minimumSelectivity;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(72967,298,<2282,24>,<2289,25>)
```
 PersistentStore store =
                            rangeVar.rangeTable.getRowStore(session);

                        cost = store.elementCount();

                        if (cost < Index.minimumSelectivity) {
                            cost = Index.minimumSelectivity;
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(57676,265,<1781,16>,<1785,78>)
```
 lastrow   = index.lastRow(session, store, 0).getNextRow();
                lastdata  = lastrow.getData();

                Boolean comparefirst = compareValues(session, data, firstdata);
                Boolean comparelast  = compareValues(session, data, lastdata);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(60381,263,<1854,16>,<1858,78>)
```
 lastrow  = index.lastRow(session, store, 0).getNextRow();
                lastdata = lastrow.getData();

                Boolean comparefirst = compareValues(session, data, firstdata);
                Boolean comparelast  = compareValues(session, data, lastdata);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84370,194,<2028,16>,<2032,40>)
```
 row[ischem]        = schem;
                row[ipname]        = pName;
                row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
                row[iresult_sets]  = rs;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83734,162,<2009,8>,<2013,32>)
```
 row[ischem]        = schem;
        row[ipname]        = pName;
        row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
        row[iresult_sets]  = rs;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(7967,247,<274,56>,<289,5>)
```
 {

        String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        return ValuePool.getInt(Integer.parseInt(s));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(8271,247,<291,55>,<306,5>)
```
 {

        String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        return ValuePool.getInt(Integer.parseInt(s));
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(161711,529,<5185,74>,<5205,5>)
```
 {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(57145,529,<1483,29>,<1503,5>)
```
 {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(7505,455,<309,8>,<322,9>)
```
 if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(8257,455,<337,8>,<350,9>)
```
 if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }

        Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4367,229,<117,12>,<122,49>)
```
 assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9595,229,<257,12>,<262,49>)
```
 assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10941,229,<292,12>,<297,49>)
```
 assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(4287,526,<139,62>,<152,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7843,526,<251,62>,<264,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(6113,526,<189,62>,<202,5>)
```
 {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(12276,244,<370,12>,<378,27>)
```
 String       colname = column.getName().statementName;
            Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
            sb.append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(20263,244,<645,12>,<653,27>)
```
 String       colname = column.getName().statementName;
            Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
            sb.append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(6387,278,<190,8>,<193,68>)
```
 String       left  = getContextSQL(nodes.length > 0 ? nodes[LEFT]
                                                            : null);
        String       right = getContextSQL(nodes.length > 1 ? nodes[RIGHT]
                                                            : null);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(3491,254,<109,8>,<112,62>)
```
 String left  = getContextSQL(nodes.length > 0 ? nodes[LEFT]
                                                      : null);
        String right = getContextSQL(nodes.length > 1 ? nodes[RIGHT]
                                                      : null);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(50600,310,<1909,16>,<1918,36>)
```
 scanNext(errorCode);

                if (token.dataType == null
                        || token.dataType.typeCode != Types.SQL_INTEGER) {
                    throw Error.error(errorCode);
                }

                scale = ((Number) token.tokenValue).intValue();

                scanNext(errorCode);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(51449,286,<1941,12>,<1950,32>)
```
 scanNext(errorCode);

            if (token.dataType == null
                    || token.dataType.typeCode != Types.SQL_INTEGER) {
                throw Error.error(errorCode);
            }

            scale = ((Number) token.tokenValue).intValue();

            scanNext(errorCode);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(7600,399,<313,8>,<324,37>)
```
 Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }

        return new RowType(newTypes);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(8352,399,<341,8>,<352,37>)
```
 Type[] newTypes   = new Type[dataTypes.length];
        Type[] otherTypes = ((RowType) other).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }

        for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }

        return new RowType(newTypes);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/DbBackup.java|(8453,193,<208,8>,<210,62>)
```
 componentStreams = new InputStreamInterface[componentFiles.length];
        existList        = new boolean[componentFiles.length];
        ignoreList       = new boolean[componentFiles.length];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/DbBackup.java|(9075,193,<226,8>,<228,62>)
```
 componentStreams = new InputStreamInterface[componentFiles.length];
        existList        = new boolean[componentFiles.length];
        ignoreList       = new boolean[componentFiles.length];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(37298,358,<1060,12>,<1067,13>)
```
 Object[]        data         = navigator.getCurrentChangedData();
            Table           currentTable = ((Table) row.getTable());
            int[] changedColumns = navigator.getCurrentChangedColumns();
            PersistentStore store        = currentTable.getRowStore(session);

            if (data == null) {
                continue;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(45176,367,<1298,16>,<1305,17>)
```
 Object[]        data = navigator.getCurrentChangedData();
                Table           currentTable = ((Table) row.getTable());
                int[] changedColumns = navigator.getCurrentChangedColumns();
                PersistentStore store = currentTable.getRowStore(session);

                if (data == null) {
                    continue;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(8006,234,<215,12>,<220,42>)
```
 assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10079,234,<269,12>,<274,42>)
```
 assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11425,234,<304,12>,<309,42>)
```
 assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(6239,211,<168,8>,<172,45>)
```
 assertTrue("Not enough rows fetched", rs.next());
        assertEquals(3, rs.getInt(2));
        assertEquals(25, rs.getInt(1));
        assertNull(rs.getString(3));
        assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10221,227,<273,12>,<277,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11567,227,<308,12>,<312,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ArrayType.java|(4291,243,<145,8>,<158,39>)
```
 if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(3299,243,<119,8>,<132,39>)
```
 if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(8941,274,<362,8>,<376,39>)
```
 if (a == b) {
            return 0;
        }

        // not related to sort
        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(19053,283,<573,16>,<579,17>)
```
 ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(20241,283,<608,16>,<614,17>)
```
 ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(37769,633,<1017,16>,<1033,17>)
```
 Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;

                if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(41195,633,<1114,16>,<1130,17>)
```
 Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;

                if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4696,229,<125,12>,<130,42>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9924,229,<265,12>,<270,42>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11270,229,<300,12>,<305,42>)
```
 assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java|(7227,246,<200,8>,<208,47>)
```
 Object[][] expected = new Object[][] {
            {
                new Double(42500), new Integer(13)
            }, {
                new Double(45000), new Integer(23)
            },
        };

        compareResults(sql, expected, "00000");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestGroupByHaving.java|(8155,246,<227,8>,<235,47>)
```
 Object[][] expected = new Object[][] {
            {
                new Double(42500), new Integer(13)
            }, {
                new Double(45000), new Integer(23)
            },
        };

        compareResults(sql, expected, "00000");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(49416,388,<1250,28>,<1257,29>)
```
 Table refTable =
                                session.database.schemaManager.getUserTable(
                                    session, tableName);

                            if (!refTable.isEmpty(session)) {
                                throw Error.error(ErrorCode.X_23504,
                                                  refTable.getName().name);
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(41779,315,<1192,16>,<1199,17>)
```
 Table refTable =
                    session.database.schemaManager.getUserTable(session,
                        tableName);

                if (!refTable.isEmpty(session)) {
                    throw Error.error(ErrorCode.X_23504,
                                      refTable.getName().name);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4505,228,<121,12>,<125,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9733,228,<261,12>,<265,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11079,228,<296,12>,<300,49>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(3934,243,<124,12>,<130,13>)
```
 session.actionTimestamp = getNextGlobalChangeTimestamp();

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.prepareCommit(session);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(3335,243,<97,12>,<103,13>)
```
 session.actionTimestamp = getNextGlobalChangeTimestamp();

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.prepareCommit(session);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(18880,437,<617,47>,<634,5>)
```
 {

        rowActionMap.getWriteLock().lock();

        try {
            RowAction action = (RowAction) rowActionMap.get(id);

            synchronized (action) {

                // remove only if not changed
                if (action.type == RowActionBase.ACTION_NONE) {
                    rowActionMap.remove(id);
                }
            }
        } finally {
            rowActionMap.getWriteLock().unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(11781,437,<387,47>,<404,5>)
```
 {

        rowActionMap.getWriteLock().lock();

        try {
            RowAction action = (RowAction) rowActionMap.get(id);

            synchronized (action) {

                // remove only if not changed
                if (action.type == RowActionBase.ACTION_NONE) {
                    rowActionMap.remove(id);
                }
            }
        } finally {
            rowActionMap.getWriteLock().unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(37640,387,<1013,16>,<1023,32>)
```
 if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(41066,387,<1110,16>,<1120,32>)
```
 if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/Calculator.java|(8308,422,<216,12>,<224,74>)
```
 nextAtom = atoms.get(i + 1);
            if (nextAtom.op == null)
                throw new IllegalStateException(
                        "Operator expected but got value " + nextAtom.val);
            op = nextAtom.op;
            nextAtom = atoms.get(i + 2);
            if (nextAtom.op != null)
                throw new IllegalStateException(
                        "Value expected but got operator " + nextAtom.op);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/Calculator.java|(9760,422,<251,12>,<259,74>)
```
 nextAtom = atoms.get(i + 1);
            if (nextAtom.op == null)
                throw new IllegalStateException(
                        "Operator expected but got value " + nextAtom.val);
            op = nextAtom.op;
            nextAtom = atoms.get(i + 2);
            if (nextAtom.op != null)
                throw new IllegalStateException(
                        "Value expected but got operator " + nextAtom.op);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(63930,212,<1745,16>,<1749,17>)
```
 int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(64844,212,<1770,16>,<1774,17>)
```
 int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(3792,282,<124,8>,<129,32>)
```
 session.abortTransaction        = false;
        session.actionTimestamp         = getNextGlobalChangeTimestamp();
        session.transactionEndTimestamp = session.actionTimestamp;

        rollbackPartial(session, 0, session.transactionTimestamp);
        endTransaction(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7289,298,<235,12>,<240,36>)
```
 session.abortTransaction        = false;
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            rollbackPartial(session, 0, session.transactionTimestamp);
            endTransaction(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(5643,298,<177,12>,<182,36>)
```
 session.abortTransaction        = false;
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            rollbackPartial(session, 0, session.transactionTimestamp);
            endTransaction(session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(25830,276,<780,8>,<785,63>)
```
 long time = sw.elapsedTime();
        long rate = (i * 1000) / (time + 1);

        storeResult("update with random id", i, time, rate);
        System.out.println("update time with random id " + i + " rows  -- "
                           + time + " ms -- " + rate + " tps");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(27508,276,<826,8>,<831,63>)
```
 long time = sw.elapsedTime();
        long rate = (i * 1000) / (time + 1);

        storeResult("update with random id", i, time, rate);
        System.out.println("update time with random id " + i + " rows  -- "
                           + time + " ms -- " + rate + " tps");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62342,124,<1809,8>,<1815,21>)
```
 all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30433,124,<986,8>,<992,21>)
```
 all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(9703,201,<300,12>,<303,52>)
```
 int data1 = clob1.getSubString(1, data.length()).indexOf("insert");
            int data2 = clob2.getSubString(1, data.length()).indexOf("INSERT");

            assertTrue(data1 == data2 && data1 > 0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(12079,201,<379,12>,<382,52>)
```
 int data1 = clob1.getSubString(1, data.length()).indexOf("insert");
            int data2 = clob2.getSubString(1, data.length()).indexOf("INSERT");

            assertTrue(data1 == data2 && data1 > 0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(17352,369,<530,43>,<539,13>)
```
 {
                reader = dataClob.getCharacterStream();

                ps.setString(1, "test-id-1" + i);
                ps.setLong(2, 23456789123456L + i);
                ps.setCharacterStream(3, reader, dataClob.length());
                ps.setString(4, "test-scope-1" + i);
                ps.executeUpdate();
                connection.commit();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(19899,369,<603,42>,<612,13>)
```
 {
                reader = dataClob.getCharacterStream();

                ps.setString(1, "test-id-1" + i);
                ps.setLong(2, 23456789123456L + i);
                ps.setCharacterStream(3, reader, dataClob.length());
                ps.setString(4, "test-scope-1" + i);
                ps.executeUpdate();
                connection.commit();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(13396,379,<435,8>,<445,9>)
```
 conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(
            "select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");

        if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(14210,379,<455,8>,<465,9>)
```
 conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(
            "select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");

        if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(104901,241,<2769,16>,<2775,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(105273,241,<2782,16>,<2788,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(2969,271,<80,12>,<87,63>)
```
 int size = object.getRealSize(cache.rowOut);

            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;
            size = cache.rowOut.getStorageSize(size);

            object.setStorageSize(size);

            long pos = tableSpace.getFilePosition(size, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(4962,271,<159,12>,<166,63>)
```
 int size = object.getRealSize(cache.rowOut);

            size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;
            size = cache.rowOut.getStorageSize(size);

            object.setStorageSize(size);

            long pos = tableSpace.getFilePosition(size, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableJoined.java|(10030,271,<344,8>,<356,9>)
```
 sb = new StringBuffer();

        String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(27584,271,<930,8>,<942,9>)
```
 sb = new StringBuffer();

        String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(2127,262,<59,8>,<66,55>)
```
 ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        long lobID = ((ResultLob) resultIn).getLobID();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(3202,262,<100,8>,<107,55>)
```
 ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        long lobID = ((ResultLob) resultIn).getLobID();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(3952,370,<131,49>,<147,5>)
```
 {

        if (length > -1) {
            return length;
        }

        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        length = ((ResultLob) resultIn).getBlockLength();

        return length;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(2553,370,<72,49>,<88,5>)
```
 {

        if (length > -1) {
            return length;
        }

        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        length = ((ResultLob) resultIn).getBlockLength();

        return length;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(6081,208,<197,8>,<201,29>)
```
 sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);
        sb.append(' ').append('\'').append(password).append('\'');

        return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(6629,208,<217,8>,<221,29>)
```
 sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);
        sb.append(' ').append('\'').append(password).append('\'');

        return sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62173,271,<1801,8>,<1814,23>)
```
 for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30264,271,<978,8>,<991,23>)
```
 for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(16971,311,<518,12>,<526,47>)
```
 PreparedStatement ps = connection.prepareStatement(dml0);

            connection.setAutoCommit(false);

            //
            JDBCClob dataClob =
                new JDBCClob("the quick brown fox jumps on the lazy dog");
            Reader    reader = null;
            StopWatch sw     = new StopWatch();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(19519,311,<591,12>,<599,47>)
```
 PreparedStatement ps = connection.prepareStatement(dml0);

            connection.setAutoCommit(false);

            //
            JDBCClob dataClob =
                new JDBCClob("the quick brown fox jumps on the lazy dog");
            Reader    reader = null;
            StopWatch sw     = new StopWatch();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(138166,413,<4990,16>,<5001,17>)
```
 if (condition == null) {
                    condition = newCondition;
                } else {
                    condition = new ExpressionLogical(OpTypes.OR, condition,
                                                      newCondition);
                }

                if (token.tokenType == Tokens.COMMA) {
                    read();
                } else {
                    break;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(62062,413,<2036,16>,<2047,17>)
```
 if (condition == null) {
                    condition = newCondition;
                } else {
                    condition = new ExpressionLogical(OpTypes.OR, condition,
                                                      newCondition);
                }

                if (token.tokenType == Tokens.COMMA) {
                    read();
                } else {
                    break;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferCommon.java|(4554,249,<110,12>,<115,13>)
```
 for (int i = 0; i < tTable.size(); i++) {
                t          = (TransferTable) tTable.elementAt(i);
                t.tracer   = tracer;
                t.sourceDb = (TransferDb) sourceDb;
                t.destDb   = targetDb;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferCommon.java|(5391,249,<135,12>,<140,13>)
```
 for (int i = 0; i < tTable.size(); i++) {
                t          = (TransferTable) tTable.elementAt(i);
                t.tracer   = tracer;
                t.sourceDb = (TransferDb) sourceDb;
                t.destDb   = targetDb;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(31373,559,<690,16>,<699,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,
                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,
                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,
                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,
                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,
                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,
                    Tokens.CLOSEBRACKET
                };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(32063,559,<704,16>,<713,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,
                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,
                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,
                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,
                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,
                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,
                    Tokens.CLOSEBRACKET
                };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(19423,401,<639,16>,<648,45>)
```
 appendColumns(sb, updateColumnMap).append('\n');
                appendTable(sb).append('\n');
                appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(20921,401,<679,16>,<688,45>)
```
 appendColumns(sb, updateColumnMap).append('\n');
                appendTable(sb).append('\n');
                appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22584,899,<682,12>,<714,45>)
```
 ps.executeUpdate();

            String dq1   = "select CHARACTER_LENGTH(clobfield) from clobtest;";
            ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(24815,899,<759,12>,<791,45>)
```
 ps.executeUpdate();

            String dq1   = "select CHARACTER_LENGTH(clobfield) from clobtest;";
            ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3914,182,<124,8>,<132,68>)
```
 pstmt.setInt(2, 9);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(4299,182,<140,8>,<148,68>)
```
 pstmt.setInt(2, 9);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62642,494,<1825,12>,<1844,23>)
```
 int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30733,494,<1002,12>,<1021,23>)
```
 int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(38916,291,<1286,8>,<1291,9>)
```
 if (blockAddresses[i][LOBS.BLOCK_COUNT]
                + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {
            blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]
                           + blockAddresses[i][LOBS.BLOCK_OFFSET]
                           - blockLimit);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(40010,311,<1320,12>,<1325,13>)
```
 if (blockAddresses[i][LOBS.BLOCK_COUNT]
                    + blockAddresses[i][LOBS.BLOCK_OFFSET] > blockLimit) {
                blockCount -= (blockAddresses[i][LOBS.BLOCK_COUNT]
                               + blockAddresses[i][LOBS.BLOCK_OFFSET]
                               - blockLimit);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56741,270,<1833,8>,<1837,69>)
```
 Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(57347,270,<1850,8>,<1854,69>)
```
 Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(24068,209,<763,8>,<771,32>)
```
 StringBuffer sb;
        String       temp;
        StringBuffer b = new StringBuffer(blanks);

        for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }

        sb = new StringBuffer();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(62549,209,<1959,8>,<1967,32>)
```
 StringBuffer sb;
        String       temp;
        StringBuffer b = new StringBuffer(blanks);

        for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }

        sb = new StringBuffer();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(7339,356,<206,16>,<214,17>)
```
 if (table != baseTable) {
                    int[] baseColumnMap = table.getBaseTableColumnMap();
                    int[] newColumnMap  = new int[columnMap.length];

                    ArrayUtil.projectRow(baseColumnMap, columnMap,
                                         newColumnMap);

                    columnMap = newColumnMap;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(10412,275,<283,8>,<290,9>)
```
 if (table != baseTable) {
            int[] baseColumnMap = table.getBaseTableColumnMap();
            int[] newColumnMap  = new int[columnMap.length];

            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);

            columnMap = newColumnMap;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(24422,305,<692,63>,<698,21>)
```
 {
                        if (targetTable.colDefaults[columnMap[i]] == null
                                && targetTable.identityColumn
                                   != columnMap[i]) {
                            throw Error.error(ErrorCode.X_42544);
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(26178,250,<735,59>,<740,17>)
```
 {
                    if (targetTable.colDefaults[columnMap[i]] == null
                            && targetTable.identityColumn != columnMap[i]) {
                        throw Error.error(ErrorCode.X_42544);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(12065,515,<431,16>,<450,71>)
```
 readThis(Tokens.TYPE);

                int type = TableBase.MEMORY_TABLE;

                switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }

                read();

                Object[] args = new Object[]{ ValuePool.getInt(type) };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(20752,515,<726,16>,<745,71>)
```
 readThis(Tokens.TYPE);

                int type = TableBase.MEMORY_TABLE;

                switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }

                read();

                Object[] args = new Object[]{ ValuePool.getInt(type) };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(43708,158,<1486,12>,<1488,55>)
```
 Table t = getTable(session, name.parent.name,
                               name.parent.schema.name);
            TableWorks tw = new TableWorks(session, t);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(44167,158,<1504,12>,<1506,55>)
```
 Table t = getTable(session, name.parent.name,
                               name.parent.schema.name);
            TableWorks tw = new TableWorks(session, t);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(17329,552,<496,8>,<511,9>)
```
 if (condition != null) {
            rangeVariables[0].addJoinCondition(condition);

            RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);

            resolver.processConditions(session);

            rangeVariables = resolver.rangeVariables;
        }

        for (int i = 0; i < rangeVariables.length; i++) {
            rangeVariables[i].resolveRangeTableTypes(session,
                    RangeVariable.emptyArray);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(21525,552,<615,8>,<630,9>)
```
 if (condition != null) {
            rangeVariables[0].addJoinCondition(condition);

            RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);

            resolver.processConditions(session);

            rangeVariables = resolver.rangeVariables;
        }

        for (int i = 0; i < rangeVariables.length; i++) {
            rangeVariables[i].resolveRangeTableTypes(session,
                    RangeVariable.emptyArray);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5390,580,<191,8>,<207,9>)
```
 //
        sb.append(Tokens.T_START).append(' ');
        sb.append(Tokens.T_WITH).append(' ');
        sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6689,636,<236,12>,<252,13>)
```
 //
            sb.append(Tokens.T_START).append(' ');
            sb.append(Tokens.T_WITH).append(' ');
            sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(3770,209,<124,12>,<131,13>)
```
 int word = map[windex];

            if (set) {
                map[windex] = (word | mask);
            } else {
                mask        = ~mask;
                map[windex] = (word & mask);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(4068,185,<137,8>,<144,9>)
```
 int word = map[windex];

        if (set) {
            map[windex] = (word | mask);
        } else {
            mask        = ~mask;
            map[windex] = (word & mask);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(4773,226,<171,8>,<177,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(5336,226,<193,8>,<199,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(5907,226,<215,8>,<221,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(6435,226,<236,8>,<242,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(6753,226,<249,8>,<255,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(7084,226,<262,8>,<268,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10113,397,<257,12>,<266,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/OdbcUtil.java|(10593,397,<269,12>,<278,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new IllegalArgumentException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(11398,330,<297,8>,<311,48>)
```
 /*
         ** Barrier to complete this test session
         */
        e = vClient.elements();

        while (e.hasMoreElements()) {
            Client = (Thread) e.nextElement();

            Client.join();
        }

        vClient.removeAllElements();
        reportDone();

        guardian = connect(url, user, password);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(10271,330,<274,8>,<288,48>)
```
 /*
         ** Barrier to complete this test session
         */
        e = vClient.elements();

        while (e.hasMoreElements()) {
            Client = (Thread) e.nextElement();

            Client.join();
        }

        vClient.removeAllElements();
        reportDone();

        guardian = connect(url, user, password);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11042,287,<482,8>,<490,9>)
```
 int shift     = pos & 0x07;
        int mask      = (source & 0xff) >>> shift;
        int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(12973,287,<557,8>,<565,9>)
```
 int shift     = pos & 0x07;
        int mask      = (source & 0xff) >>> shift;
        int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(7094,206,<168,8>,<172,57>)
```
 System.out.println();
        System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(6266,206,<160,8>,<164,57>)
```
 System.out.println();
        System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(31684,198,<1130,8>,<1136,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(27882,198,<929,8>,<935,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(26656,231,<723,8>,<727,31>)
```
 assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
        assertFalse(rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(3437,231,<78,8>,<82,31>)
```
 assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
        assertFalse(rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23799,424,<585,8>,<600,22>)
```
 RowSetNavigatorClient navigator = new RowSetNavigatorClient();

        for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }

        Result result = Result.newDataResult(meta);

        result.setNavigator(navigator);

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(22460,424,<539,8>,<554,22>)
```
 RowSetNavigatorClient navigator = new RowSetNavigatorClient();

        for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }

        Result result = Result.newDataResult(meta);

        result.setNavigator(navigator);

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(114879,266,<3651,8>,<3655,31>)
```
 HsqlName indexname = database.nameManager.newAutoName("IDX",
            name.name, table.getSchemaName(), table.getName(),
            SchemaObject.INDEX);
        Index index = table.createIndexStructure(indexname, cols, null, null,
            true, true, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(23382,303,<651,8>,<656,31>)
```
 // create an autonamed index
        HsqlName indexname = database.nameManager.newAutoName("IDX",
            name.name, table.getSchemaName(), table.getName(),
            SchemaObject.INDEX);
        Index index = table.createIndexStructure(indexname, cols, null, null,
            true, true, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(31807,1025,<1068,12>,<1097,13>)
```
 Session session = database.sessionManager.getSysSession();

            for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }

            if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(33266,1025,<1116,12>,<1145,13>)
```
 Session session = database.sessionManager.getSysSession();

            for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }

            if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(16093,478,<462,12>,<474,13>)
```
 HsqlList unresolved = condition.resolveColumnReferences(session,
                rangeGroup, rangeGroups, null);

            ExpressionColumn.checkColumnsResolved(unresolved);
            condition.resolveTypes(session, null);

            if (condition.isUnresolvedParam()) {
                condition.dataType = Type.SQL_BOOLEAN;
            }

            if (condition.getDataType() != Type.SQL_BOOLEAN) {
                throw Error.error(ErrorCode.X_42568);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(20028,478,<575,12>,<587,13>)
```
 HsqlList unresolved = condition.resolveColumnReferences(session,
                rangeGroup, rangeGroups, null);

            ExpressionColumn.checkColumnsResolved(unresolved);
            condition.resolveTypes(session, null);

            if (condition.isUnresolvedParam()) {
                condition.dataType = Type.SQL_BOOLEAN;
            }

            if (condition.getDataType() != Type.SQL_BOOLEAN) {
                throw Error.error(ErrorCode.X_42568);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(33997,545,<1077,26>,<1096,9>)
```
 {

            while (keep_running) {
                long currentFree  = Runtime.getRuntime().freeMemory();
                long currentAlloc = Runtime.getRuntime().totalMemory();
                long used         = currentAlloc - currentFree;

                if (used < min) {
                    min = used;
                }

                if (used > max) {
                    max = used;
                }

                try {
                    sleep(100);
                } catch (InterruptedException E) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(33974,545,<1094,26>,<1113,9>)
```
 {

            while (keep_running) {
                long currentFree  = Runtime.getRuntime().freeMemory();
                long currentAlloc = Runtime.getRuntime().totalMemory();
                long used         = currentAlloc - currentFree;

                if (used < min) {
                    min = used;
                }

                if (used > max) {
                    max = used;
                }

                try {
                    sleep(100);
                } catch (InterruptedException E) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(6734,557,<179,20>,<191,54>)
```
 while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(8027,557,<211,20>,<223,54>)
```
 while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(9335,557,<243,20>,<255,54>)
```
 while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(15606,557,<426,20>,<438,54>)
```
 while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(27175,355,<914,8>,<929,9>)
```
 boolean ifNot = false;

        if (token.tokenType == Tokens.IF) {
            int position = getPosition();

            read();

            if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(51869,355,<1704,8>,<1719,9>)
```
 boolean ifNot = false;

        if (token.tokenType == Tokens.IF) {
            int position = getPosition();

            read();

            if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(2214,144,<57,8>,<59,57>)
```
 org.hsqldb.lib.IntKeyHashMap hIntMap =
            new org.hsqldb.lib.IntKeyHashMap();
        java.util.HashMap uMap = new java.util.HashMap();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(3392,144,<96,8>,<98,57>)
```
 org.hsqldb.lib.IntKeyHashMap hIntMap =
            new org.hsqldb.lib.IntKeyHashMap();
        java.util.HashMap uMap = new java.util.HashMap();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(97825,419,<3120,20>,<3128,75>)
```
 if (constName == null) {
                        constName = database.nameManager.newAutoName("CT",
                                table.getSchemaName(), table.getName(),
                                SchemaObject.CONSTRAINT);
                    }

                    Constraint c =
                        new Constraint(constName, null,
                                       SchemaObject.ConstraintTypes.CHECK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(99380,419,<3160,20>,<3168,75>)
```
 if (constName == null) {
                        constName = database.nameManager.newAutoName("CT",
                                table.getSchemaName(), table.getName(),
                                SchemaObject.CONSTRAINT);
                    }

                    Constraint c =
                        new Constraint(constName, null,
                                       SchemaObject.ConstraintTypes.CHECK);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(65349,446,<2147,41>,<2162,9>)
```
 {
            sqlState = parseSQLStateValue();

            if (readIfThis(Tokens.SET)) {
                readThis(Tokens.MESSAGE_TEXT);
                readThis(Tokens.EQUALS);

                message = XreadSimpleValueSpecificationOrNull();

                if (message == null) {
                    throw unexpectedToken();
                }

                resolveOuterReferencesAndTypes(routine, context, message);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(64503,386,<2117,8>,<2130,9>)
```
 sqlState = parseSQLStateValue();

        if (readIfThis(Tokens.SET)) {
            readThis(Tokens.MESSAGE_TEXT);
            readThis(Tokens.EQUALS);

            message = XreadSimpleValueSpecificationOrNull();

            if (message == null) {
                throw unexpectedToken();
            }

            resolveOuterReferencesAndTypes(routine, context, message);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(19271,185,<607,8>,<610,63>)
```
 StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TextTable.java|(9969,185,<338,8>,<341,63>)
```
 StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TextTable.java|(10587,185,<361,8>,<364,63>)
```
 StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(5556,143,<163,8>,<167,9>)
```
 int newcount = count + len;

        if (newcount > buf.length) {
            buf = copyOf(buf, Math.max(buf.length << 1, newcount));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(6761,143,<201,8>,<205,9>)
```
 int newcount = count + len;

        if (newcount > buf.length) {
            buf = copyOf(buf, Math.max(buf.length << 1, newcount));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchemaDefinition.java|(2319,314,<59,43>,<74,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSimple.java|(3972,314,<121,43>,<136,5>)
```
 {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(6931,216,<215,8>,<221,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(7484,216,<237,8>,<243,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(8045,216,<259,8>,<265,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(8563,216,<280,8>,<286,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(8871,216,<293,8>,<299,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(9192,216,<306,8>,<312,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(115288,266,<3658,8>,<3664,33>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(116498,266,<3692,8>,<3698,33>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(65032,396,<2133,24>,<2138,62>)
```
 HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);
                        Table transition = new Table(table, hsqlName);
                        RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(68052,396,<2206,24>,<2211,62>)
```
 HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);
                        Table transition = new Table(table, hsqlName);
                        RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8671,717,<299,8>,<314,47>)
```
 int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;

        if (startType == Types.SQL_INTERVAL_HOUR) {
            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                           : Types.SQL_TIME;
        } else {
            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                           : Types.SQL_TIMESTAMP;
        }

        return getDateTimeType(newType, scale);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10457,966,<348,16>,<365,55>)
```
 int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;

                if (startType == Types.SQL_INTERVAL_HOUR) {
                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                                   : Types.SQL_TIME;
                } else {
                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                                   : Types.SQL_TIMESTAMP;
                }

                return getDateTimeType(newType, scale);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(80834,424,<2584,24>,<2594,42>)
```
 sequence = new NumberSequence(null, typeObject);

                        sequence.setAlways(generatedAlways);

                        if (token.tokenType == Tokens.OPENBRACKET) {
                            read();
                            readSequenceOptions(sequence, false, false, true);
                            readThis(Tokens.CLOSEBRACKET);
                        }

                        isIdentity = true;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(84301,340,<2688,12>,<2698,30>)
```
 sequence = new NumberSequence(null, typeObject);

            sequence.setAlways(generatedAlways);

            if (token.tokenType == Tokens.OPENBRACKET) {
                read();
                readSequenceOptions(sequence, false, false, true);
                readThis(Tokens.CLOSEBRACKET);
            }

            isIdentity = true;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementResultUpdate.java|(3186,536,<99,16>,<111,65>)
```
 row = getRow(session, args);

                /**
                 * @todo - in 2PL mode isDeleted() always returns false.
                 * While write lock prevents delete by other transactions,
                 * same-transaction deletes are not caught
                 */
                if (row == null || row.isDeleted(session, store)) {
                    throw Error.error(ErrorCode.X_24521);
                }

                RowSetNavigatorDataChange list =
                    session.sessionContext.getRowSetDataChange();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementResultUpdate.java|(4615,289,<135,16>,<142,65>)
```
 row = getRow(session, args);

                if (row == null || row.isDeleted(session, store)) {
                    throw Error.error(ErrorCode.X_24521);
                }

                RowSetNavigatorDataChange list =
                    session.sessionContext.getRowSetDataChange();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(33717,1082,<844,66>,<865,29>)
```
 {
                                if (rowData[i] == null) {
                                    /*
                                    server.printWithThread("R" + rowNum + "C"
                                        + (i+1) + " => [null]");
                                    */
                                    outPacket.writeInt(-1);
                                } else {
                                    dataString =
                                        pgTypes[i].valueString(rowData[i]);

                                    outPacket.writeSized(dataString);

                                    if (server.isTrace()) {
                                        server.printWithThread(
                                            "R" + rowNum + "C" + (i + 1)
                                            + " => ("
                                            + rowData[i].getClass().getName()
                                            + ") [" + dataString + ']');
                                    }
                                }
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(56810,966,<1360,59>,<1380,25>)
```
 {
                            if (rowData[i] == null) {
                                /*
                                server.printWithThread("R" + rowNum + "C"
                                    + (i+1) + " => [null]");
                                */
                                outPacket.writeInt(-1);
                            } else {
                                dataString =
                                    pgTypes[i].valueString(rowData[i]);

                                outPacket.writeSized(dataString);

                                if (server.isTrace()) {
                                    server.printWithThread(
                                        "R" + rowNum + "C" + (i + 1) + " => ("
                                        + rowData[i].getClass().getName()
                                        + ") [" + dataString + ']');
                                }
                            }
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(11559,289,<380,16>,<388,17>)
```
 hashIndex.unlinkNode(index, lastLookup, lookup);

                if (accessTable != null) {
                    accessTable[lookup] = 0;
                }

                if (minimizeOnEmpty && hashIndex.elementCount == 0) {
                    rehash(initialCapacity);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(25660,289,<838,16>,<846,17>)
```
 hashIndex.unlinkNode(index, lastLookup, lookup);

                if (accessTable != null) {
                    accessTable[lookup] = 0;
                }

                if (minimizeOnEmpty && hashIndex.elementCount == 0) {
                    rehash(initialCapacity);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(2560,388,<64,8>,<73,9>)
```
 try {
            cryptOut = crypto.getOutputStream(fileStreamOut);
            fileStreamOut = new GZIPOutputStream(cryptOut);
            isCrypt       = true;
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(3145,388,<81,8>,<90,9>)
```
 try {
            cryptOut = crypto.getOutputStream(fileStreamOut);
            fileStreamOut = new GZIPOutputStream(cryptOut);
            isCrypt       = true;
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9545,725,<256,12>,<273,61>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10891,725,<291,12>,<308,61>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVLMemory.java|(7946,655,<219,16>,<229,17>)
```
 // after the first match and check, all compares are with row id
                if (compare == 0 && session != null && !compareRowId
                        && session.database.txManager.isMVRows()) {
                    if (!isEqualReadable(session, store, n)) {
                        compareRowId = true;
                        compare = compareRowForInsertOrDelete(session, row,
                                                              currentRow,
                                                              compareRowId,
                                                              colIndex.length);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(25701,655,<907,16>,<917,17>)
```
 // after the first match and check, all compares are with row id
                if (compare == 0 && session != null && !compareRowId
                        && session.database.txManager.isMVRows()) {
                    if (!isEqualReadable(session, store, n)) {
                        compareRowId = true;
                        compare = compareRowForInsertOrDelete(session, row,
                                                              currentRow,
                                                              compareRowId,
                                                              colIndex.length);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10029,733,<268,12>,<285,60>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11375,733,<303,12>,<320,60>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAFileNIO.java|(4847,264,<134,10>,<144,9>)
```
 catch (Throwable e) {
            database.logger.logWarningEvent(JVM_ERROR, e);

            IOException io = new IOException(e.toString());

            try {
                io.initCause(e);
            } catch (Throwable e1) {}

            throw io;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAFileNIO.java|(5784,264,<171,10>,<181,9>)
```
 catch (Throwable e) {
            database.logger.logWarningEvent(JVM_ERROR, e);

            IOException io = new IOException(e.toString());

            try {
                io.initCause(e);
            } catch (Throwable e1) {}

            throw io;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAFileNIO.java|(6225,264,<192,10>,<202,9>)
```
 catch (Throwable e) {
            database.logger.logWarningEvent(JVM_ERROR, e);

            IOException io = new IOException(e.toString());

            try {
                io.initCause(e);
            } catch (Throwable e1) {}

            throw io;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/TarReader.java|(4017,279,<102,8>,<110,9>)
```
 String[] patternStrings = null;

        if (sa.length > firstPatInd) {
            patternStrings = new String[sa.length - firstPatInd];

            for (int i = firstPatInd; i < sa.length; i++) {
                patternStrings[i - firstPatInd] = sa[i];
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/DbBackup.java|(5979,327,<147,16>,<155,17>)
```
 String[] patternStrings = null;

                if (sa.length > firstPatInd) {
                    patternStrings = new String[sa.length - firstPatInd];

                    for (int i = firstPatInd; i < sa.length; i++) {
                        patternStrings[i - firstPatInd] = sa[i];
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/pool/JDBCPooledDataSource.java|(3743,306,<105,8>,<111,19>)
```
 ref.add(new StringRefAddr("database", getDatabase()));
        ref.add(new StringRefAddr("user", getUser()));
        ref.add(new StringRefAddr("password", password));
        ref.add(new StringRefAddr("loginTimeout",
                                  Integer.toString(loginTimeout)));

        return ref;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCDataSource.java|(10409,306,<263,8>,<269,19>)
```
 ref.add(new StringRefAddr("database", getDatabase()));
        ref.add(new StringRefAddr("user", getUser()));
        ref.add(new StringRefAddr("password", password));
        ref.add(new StringRefAddr("loginTimeout",
                                  Integer.toString(loginTimeout)));

        return ref;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/pool/JDBCXADataSource.java|(5059,306,<144,8>,<150,19>)
```
 ref.add(new StringRefAddr("database", getDatabase()));
        ref.add(new StringRefAddr("user", getUser()));
        ref.add(new StringRefAddr("password", password));
        ref.add(new StringRefAddr("loginTimeout",
                                  Integer.toString(loginTimeout)));

        return ref;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(39224,277,<1114,16>,<1117,67>)
```
 Row      row            = navigator.getCurrentRow();
                Object[] changedData    = navigator.getCurrentChangedData();
                int[]    changedColumns = navigator.getCurrentChangedColumns();
                Table    currentTable   = ((Table) row.getTable());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(43513,265,<1253,12>,<1256,63>)
```
 Row      row            = navigator.getCurrentRow();
            Object[] changedData    = navigator.getCurrentChangedData();
            int[]    changedColumns = navigator.getCurrentChangedColumns();
            Table    currentTable   = ((Table) row.getTable());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(46100,277,<1323,16>,<1326,67>)
```
 Row      row            = navigator.getCurrentRow();
                Object[] changedData    = navigator.getCurrentChangedData();
                int[]    changedColumns = navigator.getCurrentChangedColumns();
                Table    currentTable   = ((Table) row.getTable());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SetFunction.java|(11636,698,<352,24>,<364,25>)
```
 if (!NumberType.isInLongLimits(bi)) {
                            throw Error.error(ErrorCode.X_22015);
                        }

                        if (((IntervalType) type).isDaySecondIntervalType()) {
                            return new IntervalSecondData(bi.longValue(),
                                                          currentLong,
                                                          (IntervalType) type,
                                                          true);
                        } else {
                            return IntervalMonthData.newIntervalMonth(
                                bi.longValue(), (IntervalType) type);
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SetFunction.java|(14026,698,<408,24>,<420,25>)
```
 if (!NumberType.isInLongLimits(bi)) {
                            throw Error.error(ErrorCode.X_22015);
                        }

                        if (((IntervalType) type).isDaySecondIntervalType()) {
                            return new IntervalSecondData(bi.longValue(),
                                                          currentLong,
                                                          (IntervalType) type,
                                                          true);
                        } else {
                            return IntervalMonthData.newIntervalMonth(
                                bi.longValue(), (IntervalType) type);
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(6579,612,<177,8>,<192,67>)
```
 iUpdateCount = insertStatement.executeUpdate();

        insertStatement.close();
        Assert.assertEquals(
            "Exactly one record with time data shoud have been inserted.",
            iUpdateCount, 1);

        // Now select it back to be sure it is there
        PreparedStatement selectStatement = null;
        PreparedStatement deleteStatement = null;
        ResultSet         results         = null;
        java.sql.Time     retrievedTime;
        int               iDeletedCount = 0;
        java.sql.Time     selectTime;

        selectStatement = connection.prepareStatement(SELECT_TIME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(10010,612,<272,8>,<287,67>)
```
 iUpdateCount = insertStatement.executeUpdate();

        insertStatement.close();
        Assert.assertEquals(
            "Exactly one record with time data shoud have been inserted.",
            iUpdateCount, 1);

        // Now select it back to be sure it is there
        PreparedStatement selectStatement = null;
        PreparedStatement deleteStatement = null;
        ResultSet         results         = null;
        java.sql.Time     retrievedTime;
        int               iDeletedCount = 0;
        java.sql.Time     selectTime;

        selectStatement = connection.prepareStatement(SELECT_TIME);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(3922,164,<115,8>,<122,9>)
```
 NodeAVL node  = ((RowAVL) row).getNode(0);
        int     count = 0;

        while (node != null) {
            count++;

            node = node.nNext;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(5722,164,<188,8>,<195,9>)
```
 NodeAVL node  = ((RowAVL) row).getNode(0);
        int     count = 0;

        while (node != null) {
            count++;

            node = node.nNext;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SetFunction.java|(5410,326,<164,28>,<170,29>)
```
 if (Math.abs(currentLong)
                                    >= DTIType.nanoScaleFactors[0]) {
                                addLong(currentLong
                                        / DTIType.nanoScaleFactors[0]);

                                currentLong %= DTIType.nanoScaleFactors[0];
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SetFunction.java|(6284,270,<184,24>,<189,25>)
```
 if (Math.abs(currentLong)
                                >= DTIType.nanoScaleFactors[0]) {
                            addLong(currentLong / DTIType.nanoScaleFactors[0]);

                            currentLong %= DTIType.nanoScaleFactors[0];
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(38118,316,<1085,12>,<1095,13>)
```
 if (file == null) {
                throw new NullPointerException("file");
            }

            if (pos < 0) {
                throw new IllegalArgumentException("pos: " + pos);
            }

            if (length < 0) {
                throw new IllegalArgumentException("length: " + length);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(31803,316,<865,12>,<875,13>)
```
 if (file == null) {
                throw new NullPointerException("file");
            }

            if (pos < 0) {
                throw new IllegalArgumentException("pos: " + pos);
            }

            if (length < 0) {
                throw new IllegalArgumentException("length: " + length);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(13721,351,<430,16>,<441,17>)
```
 if (idx < 0) {
                    e.isSingleColumnEqual     = true;
                    e.isSingleColumnCondition = true;

                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());

                    continue;
                }

                if (idx >= firstOuterJoinIndex) {
                    continue;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(14193,351,<446,16>,<457,17>)
```
 if (idx < 0) {
                    e.isSingleColumnEqual     = true;
                    e.isSingleColumnCondition = true;

                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());

                    continue;
                }

                if (idx >= firstOuterJoinIndex) {
                    continue;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21550,309,<614,16>,<618,62>)
```
 row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
                row[column_name]      = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(95805,309,<2676,16>,<2680,62>)
```
 row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
                row[column_name]      = column.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(96397,3176,<2685,16>,<2746,17>)
```
 row[data_type]        = type.getFullNameString();

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126786,2860,<3438,12>,<3495,13>)
```
 row[data_type]      = type.getFullNameString();

            // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(5245,415,<167,8>,<176,9>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(6303,415,<206,8>,<215,9>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(7163,415,<237,8>,<246,9>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(19342,689,<542,16>,<559,69>)
```
 stmnt.execute("drop table CDTYPE if exists");

                // test for the value MAX(column) in an empty table
                stmnt.execute(
                    "CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");

                rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");

                if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println("Max value for ID: " + max);
                } else {
                    System.out.println("Max value for ID not returned");
                }

                stmnt.executeUpdate(
                    "INSERT INTO cdType VALUES (10,'Test String');");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(18209,689,<467,16>,<484,69>)
```
 stmnt.execute("drop table CDTYPE if exists");

                // test for the value MAX(column) in an empty table
                stmnt.execute(
                    "CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");

                rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");

                if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println("Max value for ID: " + max);
                } else {
                    System.out.println("Max value for ID not returned");
                }

                stmnt.executeUpdate(
                    "INSERT INTO cdType VALUES (10,'Test String');");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(3751,206,<88,8>,<91,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(4172,206,<97,8>,<100,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(4631,206,<107,8>,<110,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(5106,206,<116,8>,<119,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(8119,206,<189,8>,<192,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(8467,206,<196,8>,<199,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(8867,206,<205,8>,<208,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(9284,206,<214,8>,<217,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(9661,206,<223,8>,<226,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(10047,206,<233,8>,<236,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(10454,206,<242,8>,<245,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(10861,206,<251,8>,<254,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(11271,206,<260,8>,<263,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(11663,206,<269,8>,<272,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java|(12055,206,<278,8>,<281,56>)
```
 if (!enumType.isInstance(key))
            throw new IllegalArgumentException(
                    "Key is a " + key.getClass().getName() + ",not a "
                    + enumType.getName() + ":  " + key);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191572,360,<5121,16>,<5128,44>)
```
 row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.parent.schema.name;
                row[table_name]       = refName.parent.name;
                row[column_name]      = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(259784,356,<6842,16>,<6849,44>)
```
 row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.parent.schema.name;
                row[table_name]      = refName.parent.name;
                row[column_name]     = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,357,<610,16>,<617,61>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(95694,357,<2672,16>,<2679,61>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(207896,292,<5587,16>,<5593,44>)
```
 row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(267188,292,<7062,16>,<7068,44>)
```
 row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40640,203,<1129,16>,<1135,17>)
```
 for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(41155,203,<1146,16>,<1152,17>)
```
 for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137525,346,<3711,16>,<3716,74>)
```
 row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(138681,346,<3742,16>,<3747,74>)
```
 row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(12140,234,<328,8>,<332,43>)
```
 StopWatch        sw        = new StopWatch();
        int              smallrows = 0xfff;
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(14270,234,<383,8>,<387,43>)
```
 StopWatch        sw        = new StopWatch();
        int              smallrows = 0xfff;
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(107558,344,<2954,28>,<2960,56>)
```
 row[constraint_catalog] = constraintCatalog;
                            row[constraint_schema]  = constraintSchema;
                            row[constraint_name]    = constraintName;

                            try {
                                t.insertSys(session, store, row);
                            } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(109045,344,<2984,28>,<2990,56>)
```
 row[constraint_catalog] = constraintCatalog;
                            row[constraint_schema]  = constraintSchema;
                            row[constraint_name]    = constraintName;

                            try {
                                t.insertSys(session, store, row);
                            } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312582,373,<8227,16>,<8234,61>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[view_catalog]     = database.getCatalogName().name;
                row[view_schema]      = table.getSchemaName().name;
                row[view_name]        = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(316754,361,<8346,16>,<8353,58>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                = t.getEmptyRowData();
                row[view_catalog]  = database.getCatalogName().name;
                row[view_schema]   = table.getSchemaName().name;
                row[view_name]     = table.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(17131,2000,<478,12>,<532,13>)
```
 ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(15998,2000,<403,12>,<457,13>)
```
 ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }

            rs = stmnt.executeQuery("SELECT MAX(i) FROM t1");

            if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println("Max value for i: " + max);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(190962,387,<5108,16>,<5117,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203844,385,<5472,16>,<5479,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(207494,385,<5579,16>,<5586,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211580,385,<5696,16>,<5703,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211353,209,<5689,16>,<5694,17>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(270381,209,<7162,16>,<7167,17>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2420,117,<67,8>,<70,36>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2763,117,<82,8>,<85,36>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(3095,125,<96,12>,<99,40>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
            tempBuffer[count++] = (byte) v;

            write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(3520,125,<113,12>,<116,40>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
            tempBuffer[count++] = (byte) v;

            write(tempBuffer, 0, count);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(32368,652,<1017,8>,<1033,9>)
```
 if (queryExpression.sortAndSlice == null) {
            queryExpression.addSortAndSlice(sortAndSlice);
        } else {
            if (queryExpression.sortAndSlice.hasLimit()) {
                if (sortAndSlice.hasLimit()) {
                    throw Error.error(ErrorCode.X_42549);
                }

                for (int i = 0; i < sortAndSlice.exprList.size(); i++) {
                    Expression e = (Expression) sortAndSlice.exprList.get(i);

                    queryExpression.sortAndSlice.addOrderExpression(e);
                }
            } else {
                queryExpression.addSortAndSlice(sortAndSlice);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(35008,828,<1109,16>,<1127,17>)
```
 if (queryExpression.sortAndSlice == null) {
                    queryExpression.addSortAndSlice(sortAndSlice);
                } else {
                    if (queryExpression.sortAndSlice.hasLimit()) {
                        if (sortAndSlice.hasLimit()) {
                            throw Error.error(ErrorCode.X_42549);
                        }

                        for (int i = 0; i < sortAndSlice.exprList.size();
                                i++) {
                            Expression e =
                                (Expression) sortAndSlice.exprList.get(i);

                            queryExpression.sortAndSlice.addOrderExpression(e);
                        }
                    } else {
                        queryExpression.addSortAndSlice(sortAndSlice);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(32851,302,<911,20>,<919,64>)
```
 t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
                    constraintNameSet.add(c.getRefName());
                    indexNameSet.add(c.getRefIndex().getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(28380,254,<956,12>,<964,56>)
```
 t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(8558,402,<286,12>,<296,67>)
```
 if (cs.getCompileTimestamp()
                    < database.schemaManager.getSchemaChangeTimestamp()) {
                cs = session.statementManager.getStatement(session, cs);
                session.sessionContext.currentStatement = cs;

                if (cs == null) {
                    return;
                }
            }

            boolean canProceed = setWaitedSessionsTPL(session, cs);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(14684,402,<491,12>,<501,67>)
```
 if (cs.getCompileTimestamp()
                    < database.schemaManager.getSchemaChangeTimestamp()) {
                cs = session.statementManager.getStatement(session, cs);
                session.sessionContext.currentStatement = cs;

                if (cs == null) {
                    return;
                }
            }

            boolean canProceed = setWaitedSessionsTPL(session, cs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(309285,185,<7281,8>,<7287,63>)
```
 Object[] rowData = getCurrent();
        Type     sourceType;
        Object   value;

        checkColumn(columnIndex);

        sourceType = resultMetaData.columnTypes[--columnIndex];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(318092,201,<7572,12>,<7578,67>)
```
 Object[] rowData = getCurrent();
            Type     sourceType;
            Object   value;

            checkColumn(columnIndex);

            sourceType = resultMetaData.columnTypes[--columnIndex];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(78101,293,<2667,20>,<2674,72>)
```
 String  spec    = readQuotedString();
                    Scanner scanner = session.getScanner();

                    scanner.reset(spec);
                    scanner.scanNext();

                    String schemaName =
                        session.getSchemaName(scanner.token.namePrefix);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(81636,221,<2789,8>,<2795,76>)
```
 String  spec    = readQuotedString();
        Scanner scanner = session.getScanner();

        scanner.reset(spec);
        scanner.scanNext();

        String schemaName = session.getSchemaName(scanner.token.namePrefix);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(148790,228,<5385,12>,<5391,13>)
```
 if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else if (token.tokenType == Tokens.CLOSEBRACKET) {
                readThis(Tokens.CLOSEBRACKET);

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(149658,228,<5425,12>,<5431,13>)
```
 if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else if (token.tokenType == Tokens.CLOSEBRACKET) {
                readThis(Tokens.CLOSEBRACKET);

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(57811,516,<1508,8>,<1522,9>)
```
 if (name.schema == null) {
            name.schema = schemaName == null
                          ? session.getCurrentSchemaHsqlName()
                          : schemaName;
        } else {
            name.schema = session.getSchemaHsqlName(name.schema.name);

            if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }

            if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(58670,516,<1537,8>,<1551,9>)
```
 if (name.schema == null) {
            name.schema = schemaName == null
                          ? session.getCurrentSchemaHsqlName()
                          : schemaName;
        } else {
            name.schema = session.getSchemaHsqlName(name.schema.name);

            if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }

            if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBug1191815.java|(3548,184,<107,8>,<111,36>)
```
 TestResult            result;
        TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBug785429.java|(5010,184,<164,8>,<168,36>)
```
 TestResult            result;
        TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(5739,349,<149,8>,<161,9>)
```
 String Statement = new String("");

        if (destDb.helper.needTransferTransaction()) {
            try {
                destDb.setAutoCommit(false);
            } catch (Exception e) {}
        }

        if (Stmts.bTransfer == false) {
            tracer.trace("Table " + Stmts.sSourceTable + " not transfered");

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(13292,349,<364,8>,<376,9>)
```
 String Statement = new String("");

        if (destDb.helper.needTransferTransaction()) {
            try {
                destDb.setAutoCommit(false);
            } catch (Exception e) {}
        }

        if (Stmts.bTransfer == false) {
            tracer.trace("Table " + Stmts.sSourceTable + " not transfered");

            return;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(32749,339,<907,20>,<918,58>)
```
 if (t != table) {
                        tableSet.add(t);
                    }

                    t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
                    constraintNameSet.add(c.getRefName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(28302,275,<952,12>,<963,50>)
```
 if (t != table) {
                tableSet.add(t);
            }

            t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java|(8441,604,<269,30>,<285,5>)
```
 {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(3812,604,<102,30>,<118,5>)
```
 {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(8736,291,<248,12>,<255,37>)
```
 sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

//            sStatement.execute("SET WRITE_DELAY " + writeDelay);
            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
            sStatement.execute(ddl3);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(6602,224,<171,12>,<177,37>)
```
 sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
            sStatement.execute(ddl3);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89431,530,<2157,16>,<2168,54>)
```
 row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
                row[iordinal_position] = ordinalPosition;
                row[iis_nullable]      = isNullable;
                row[ispecific_name]    = specificName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88303,450,<2126,8>,<2137,46>)
```
 row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
        row[iordinal_position] = ordinalPosition;
        row[iis_nullable]      = isNullable;
        row[ispecific_name]    = specificName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(256768,394,<6150,12>,<6159,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(257245,394,<6162,12>,<6171,13>)
```
 if (c >= 'a' && c <= 'f') {
                octet += 10 + c - 'a';
            } else if (c >= 'A' && c <= 'F') {
                octet += 10 + c - 'A';
            } else if (c >= '0' && c <= '9') {
                octet += c - '0';
            } else {
                throw new NumberFormatException(
                    "Non-hex character in input at offset " + i + ": " + c);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(109517,235,<2579,12>,<2582,73>)
```
 if (varName.indexOf(':') > -1)
                throw new BadSpecial(SqltoolRB.plvar_nocolon.getString());
            if (!varPattern.matcher(varName).matches())
                errprintln(SqltoolRB.varname_warning.getString(varName));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(124754,223,<2952,8>,<2955,69>)
```
 if (varName.indexOf(':') > -1)
            throw new BadSpecial(SqltoolRB.plvar_nocolon.getString());
        if (!varPattern.matcher(varName).matches())
            errprintln(SqltoolRB.varname_warning.getString(varName));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/TimeData.java|(1934,154,<49,8>,<55,9>)
```
 while (seconds < 0) {
            seconds += 24 * 60 * 60;
        }

        if (seconds > 24 * 60 * 60) {
            seconds %= 24 * 60 * 60;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(31850,154,<928,8>,<934,9>)
```
 while (seconds < 0) {
            seconds += 24 * 60 * 60;
        }

        if (seconds > 24 * 60 * 60) {
            seconds %= 24 * 60 * 60;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(28291,449,<912,68>,<922,17>)
```
 {
                    if (session.database.sqlEnforceTypes) {
                        throw Error.error(ErrorCode.X_42562);
                    }

                    if (nodes[LEFT].dataType.canConvertFrom(
                            nodes[RIGHT].dataType)) {
                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,
                                nodes[RIGHT], nodes[LEFT].dataType);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(29348,449,<933,64>,<943,17>)
```
 {
                    if (session.database.sqlEnforceTypes) {
                        throw Error.error(ErrorCode.X_42562);
                    }

                    if (nodes[LEFT].dataType.canConvertFrom(
                            nodes[RIGHT].dataType)) {
                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,
                                nodes[RIGHT], nodes[LEFT].dataType);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(10146,204,<321,16>,<327,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }

                    sb.append(nodes[i].getSQL());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(10492,204,<335,16>,<341,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }

                    sb.append(nodes[i].getSQL());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(10879,204,<351,16>,<357,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }

                    sb.append(nodes[i].getSQL());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(135729,164,<3679,8>,<3685,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (i > 0) {
                sb.append(',');
            }

            sb.append(nodes[i].getSQL());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84414,195,<2029,16>,<2033,44>)
```
 row[ipname]        = pName;
                row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
                row[iresult_sets]  = rs;
                row[iremark]       = remark;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83770,163,<2010,8>,<2014,36>)
```
 row[ipname]        = pName;
        row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
        row[iresult_sets]  = rs;
        row[iremark]       = remark;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(98112,359,<2331,43>,<2337,17>)
```
 {
                    shared.userVars.put(mathMatcher.group(1), Long.toString(
                            Calculator.reassignValue(mathMatcher.group(1),
                            shared.userVars, mathMatcher.group(2),
                            (mathMatcher.groupCount() < 3)
                            ? null : mathMatcher.group(3))));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(100168,481,<2372,51>,<2380,25>)
```
 {
                            shared.userVars.put(
                                    mathMatcher.group(1), Long.toString(
                                    Calculator.reassignValue(
                                    mathMatcher.group(1),
                                    shared.userVars, mathMatcher.group(2),
                                    (mathMatcher.groupCount() < 3)
                                    ? null : mathMatcher.group(3))));
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(96660,396,<2300,8>,<2309,55>)
```
 if (!m.matches())
            throw new BadSpecial(SqltoolRB.pl_malformat.getString());
            // I think it's impossible to get here, since the pattern is
            // so liberal.
        if (m.groupCount() < 1 || m.group(1) == null) {
            stdprintln(SqltoolRB.deprecated_noop.getString("*"));
            return;
        }

        String[] tokens = m.group(1).split("\\s+", -1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(117754,395,<2770,8>,<2778,55>)
```
 if (!m.matches())
            throw new BadSpecial(SqltoolRB.pl_malformat.getString());
            // I think it's impossible to get here, since the pattern is
            // so liberal.
        if (m.groupCount() < 1 || m.group(1) == null) {
            stdprintln(SqltoolRB.deprecated_noop.getString("*"));
            return;
        }
        String[] tokens = m.group(1).split("\\s+", -1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialog.java|(7961,276,<256,8>,<263,9>)
```
 // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            setLocation((d.width - size.width) / 2,
                        (d.height - size.height) / 2);
        } else {
            setLocation(0, 0);
            setSize(d);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java|(9280,276,<255,8>,<262,9>)
```
 // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            setLocation((d.width - size.width) / 2,
                        (d.height - size.height) / 2);
        } else {
            setLocation(0, 0);
            setSize(d);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(123627,325,<3007,28>,<3011,62>)
```
 row                 = t.getEmptyRowData();
                            row[grantor] = right.getGrantor().getName().name;
                            row[grantee] = right.getGrantee().getName().name;
                            row[table_catalog]  = tableCatalog;
                            row[table_schema]   = tableSchema;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(140743,309,<3426,24>,<3430,58>)
```
 row                 = t.getEmptyRowData();
                        row[grantor] = right.getGrantor().getName().name;
                        row[grantee] = right.getGrantee().getName().name;
                        row[table_catalog]  = tableCatalog;
                        row[table_schema]   = tableSchema;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89754,258,<2165,16>,<2170,49>)
```
 row[ichar_octet_len]   = charOctetLength;
                row[iordinal_position] = ordinalPosition;
                row[iis_nullable]      = isNullable;
                row[ispecific_name]    = specificName;

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88570,226,<2134,8>,<2139,41>)
```
 row[ichar_octet_len]   = charOctetLength;
        row[iordinal_position] = ordinalPosition;
        row[iis_nullable]      = isNullable;
        row[ispecific_name]    = specificName;

        t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(173812,252,<4108,24>,<4112,49>)
```
 condlPrint(SqlFile.htmlRow(((i % 2) == 0) ? COL_EVEN
                                                          : COL_ODD) + LS
                                                          + PRE_TD, true);

                        fieldArray = rows.get(i);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(189206,153,<4498,16>,<4501,41>)
```
 condlPrint(SqlFile.htmlRow( ((i % 2) == 0)
                        ? COL_EVEN : COL_ODD) + LS + PRE_TD, true);

                fieldArray = rows.get(i);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(28853,448,<923,69>,<933,17>)
```
 {
                    if (session.database.sqlEnforceTypes) {
                        throw Error.error(ErrorCode.X_42562);
                    }

                    if (nodes[RIGHT].dataType.canConvertFrom(
                            nodes[LEFT].dataType)) {
                        nodes[LEFT] = ExpressionOp.getCastExpression(session,
                                nodes[LEFT], nodes[RIGHT].dataType);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(29845,448,<943,65>,<953,17>)
```
 {
                    if (session.database.sqlEnforceTypes) {
                        throw Error.error(ErrorCode.X_42562);
                    }

                    if (nodes[RIGHT].dataType.canConvertFrom(
                            nodes[LEFT].dataType)) {
                        nodes[LEFT] = ExpressionOp.getCastExpression(session,
                                nodes[LEFT], nodes[RIGHT].dataType);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89106,689,<2149,16>,<2165,57>)
```
 row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88042,569,<2118,8>,<2134,49>)
```
 row[iname]      = pName;
        row[icol_name]  = cName;
        row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(58035,481,<1553,8>,<1562,9>)
```
 assertEquals("Retrieved bye array length wrong (1)",
            expectedBytes.length, ba1.length);
        for (int i = 0; i < ba1.length; i++) {
            assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
        }
        assertEquals("Retrieved bye array length wrong (2)",
            expectedBytes.length, ba2.length);
        for (int i = 0; i < ba2.length; i++) {
            assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(60050,481,<1605,8>,<1614,9>)
```
 assertEquals("Retrieved bye array length wrong (1)",
            expectedBytes.length, ba1.length);
        for (int i = 0; i < ba1.length; i++) {
            assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
        }
        assertEquals("Retrieved bye array length wrong (2)",
            expectedBytes.length, ba2.length);
        for (int i = 0; i < ba2.length; i++) {
            assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(40488,576,<1570,56>,<1587,17>)
```
 {
                    int pos = sqlString.indexOf('\r', currentPosition + 2);

                    if (pos == -1) {
                        pos = sqlString.indexOf('\n', currentPosition + 2);
                    }

                    if (pos == -1) {
                        pos = limit;
                    }

                    token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);
                    token.tokenType   = Tokens.X_REMARK;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(42133,576,<1618,56>,<1635,17>)
```
 {
                    int pos = sqlString.indexOf('\r', currentPosition + 2);

                    if (pos == -1) {
                        pos = sqlString.indexOf('\n', currentPosition + 2);
                    }

                    if (pos == -1) {
                        pos = limit;
                    }

                    token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);
                    token.tokenType   = Tokens.X_REMARK;
                    token.isDelimiter = true;

                    return;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java|(4525,411,<126,8>,<134,18>)
```
 if (Error.TRACESYSTEMOUT) {
            Error.printSystemOut("[" + this + "]: createServerSocket()");
            Error.printSystemOut("capabilities for " + ss + ":");
            Error.printSystemOut("----------------------------");
            dump("supported cipher suites", ss.getSupportedCipherSuites());
            dump("enabled cipher suites", ss.getEnabledCipherSuites());
        }

        return ss;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java|(5657,411,<156,8>,<164,18>)
```
 if (Error.TRACESYSTEMOUT) {
            Error.printSystemOut("[" + this + "]: createServerSocket()");
            Error.printSystemOut("capabilities for " + ss + ":");
            Error.printSystemOut("----------------------------");
            dump("supported cipher suites", ss.getSupportedCipherSuites());
            dump("enabled cipher suites", ss.getEnabledCipherSuites());
        }

        return ss;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(6192,292,<247,8>,<259,9>)
```
 if (otherType == null) {
            return true;
        }

        if (!otherType.isRowType()) {
            return false;
        }

        Type[] otherTypes = ((RowType) otherType).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            return false;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(6749,292,<272,8>,<284,9>)
```
 if (otherType == null) {
            return true;
        }

        if (!otherType.isRowType()) {
            return false;
        }

        Type[] otherTypes = ((RowType) otherType).getTypesArray();

        if (dataTypes.length != otherTypes.length) {
            return false;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(12343,226,<371,12>,<379,48>)
```
 Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
            sb.append(' ');
            sb.append(type.getTypeDefinition());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(20330,226,<646,12>,<654,48>)
```
 Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
            sb.append(' ');
            sb.append(type.getTypeDefinition());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(18347,240,<640,8>,<643,74>)
```
 result |= (updateColumnSet != null && !updateColumnSet.isEmpty());
        result |= referencesColumnSet != null
                  && !referencesColumnSet.isEmpty();
        result |= triggerColumnSet != null && !triggerColumnSet.isEmpty();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(20633,240,<721,8>,<724,74>)
```
 result |= (updateColumnSet != null && !updateColumnSet.isEmpty());
        result |= referencesColumnSet != null
                  && !referencesColumnSet.isEmpty();
        result |= triggerColumnSet != null && !triggerColumnSet.isEmpty();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(37228,355,<1059,12>,<1063,77>)
```
 Row             row          = navigator.getCurrentRow();
            Object[]        data         = navigator.getCurrentChangedData();
            Table           currentTable = ((Table) row.getTable());
            int[] changedColumns = navigator.getCurrentChangedColumns();
            PersistentStore store        = currentTable.getRowStore(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(45102,356,<1297,16>,<1301,74>)
```
 Row             row          = navigator.getCurrentRow();
                Object[]        data = navigator.getCurrentChangedData();
                Table           currentTable = ((Table) row.getTable());
                int[] changedColumns = navigator.getCurrentChangedColumns();
                PersistentStore store = currentTable.getRowStore(session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4317,229,<116,12>,<121,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9545,229,<256,12>,<261,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10891,229,<291,12>,<296,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(3548,214,<94,12>,<99,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4226,214,<113,12>,<118,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9454,214,<253,12>,<258,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10800,214,<288,12>,<293,42>)
```
 rs = ps.executeQuery();

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(18198,293,<586,56>,<599,5>)
```
 {

        if (object.isMemory()) {
            return;
        }

        Row row = (Row) object;

        if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(11209,293,<360,56>,<373,5>)
```
 {

        if (object.isMemory()) {
            return;
        }

        Row row = (Row) object;

        if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(25773,507,<938,12>,<954,13>)
```
 if (existing == null) {
                existing = add.duplicate();

                fullRightsMap.put(key, existing);
            } else {
                existing.add(add);
            }

            if (add.grantableRights == null) {
                continue;
            }

            if (existing.grantableRights == null) {
                existing.grantableRights = add.grantableRights.duplicate();
            } else {
                existing.grantableRights.add(add.grantableRights);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(26765,559,<973,16>,<989,17>)
```
 if (existing == null) {
                    existing = add.duplicate();

                    fullRightsMap.put(key, existing);
                } else {
                    existing.add(add);
                }

                if (add.grantableRights == null) {
                    continue;
                }

                if (existing.grantableRights == null) {
                    existing.grantableRights = add.grantableRights.duplicate();
                } else {
                    existing.grantableRights.add(add.grantableRights);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/Calculator.java|(8141,428,<213,12>,<221,40>)
```
 if (startAtomIndex + remaining < i + 3)
                throw new IllegalStateException(
                        "No operator/operand pairing remaining");
            nextAtom = atoms.get(i + 1);
            if (nextAtom.op == null)
                throw new IllegalStateException(
                        "Operator expected but got value " + nextAtom.val);
            op = nextAtom.op;
            nextAtom = atoms.get(i + 2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/Calculator.java|(9593,428,<248,12>,<256,40>)
```
 if (startAtomIndex + remaining < i + 3)
                throw new IllegalStateException(
                        "No operator/operand pairing remaining");
            nextAtom = atoms.get(i + 1);
            if (nextAtom.op == null)
                throw new IllegalStateException(
                        "Operator expected but got value " + nextAtom.val);
            op = nextAtom.op;
            nextAtom = atoms.get(i + 2);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(34321,368,<913,16>,<923,32>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[1],
                                                      nodes[1].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(38714,368,<1043,16>,<1053,32>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object value;

                value = Type.SQL_BIGINT.convertToType(session, data[1],
                                                      nodes[1].dataType);

                long offset = ((Number) value).longValue() - 1;
                long length = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(51937,241,<1423,16>,<1429,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(52668,241,<1447,16>,<1453,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4653,229,<124,12>,<129,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9881,229,<264,12>,<269,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11227,229,<299,12>,<304,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(3889,238,<103,12>,<108,60>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10524,238,<280,12>,<285,60>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11870,238,<315,12>,<320,60>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(36009,265,<1026,12>,<1031,13>)
```
 int[]    changedColumns = navigator.getCurrentChangedColumns();
            Table    currentTable   = ((Table) row.getTable());

            if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(43651,265,<1255,12>,<1260,13>)
```
 int[]    changedColumns = navigator.getCurrentChangedColumns();
            Table    currentTable   = ((Table) row.getTable());

            if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(4887,155,<146,8>,<148,29>)
```
 int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));
        int  lookup     = hashIndex.hashTable[index];
        int  lastLookup = -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(10507,159,<335,8>,<337,31>)
```
 int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionContext.java|(3943,255,<114,8>,<118,48>)
```
 diagnosticsVariables =
            new Object[ExpressionColumn.diagnosticsVariableTokens.length];
        rangeIterators        = new RangeIterator[8];
        savepoints            = new HashMappedList(4);
        savepointTimestamps   = new LongDeque();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionContext.java|(5555,249,<161,8>,<165,46>)
```
 diagnosticsVariables =
            new Object[ExpressionColumn.diagnosticsVariableTokens.length];
        rangeIterators      = new RangeIterator[8];
        savepoints          = new HashMappedList(4);
        savepointTimestamps = new LongDeque();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(4055,194,<123,12>,<129,49>)
```
 Blob blob1 = rs.getBlob(2);

            rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
            byte[] data2 = blob2.getBytes(1, 10);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(28434,194,<886,12>,<892,49>)
```
 Blob blob1 = rs.getBlob(2);

            rs.next();

            Blob   blob2 = rs.getBlob(2);
            byte[] data1 = blob1.getBytes(1, 10);
            byte[] data2 = blob2.getBytes(1, 10);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(25413,521,<773,66>,<792,9>)
```
 {

            System.out.println(number_of_txns);

            ntrans = number_of_txns;
            Conn   = connect(url, user, password);

            if (Conn == null) {
                return;
            }

            try {
                Conn.setAutoCommit(false);
                Conn.setTransactionIsolation(transactionMode);
                prepareStatements();
            } catch (Exception E) {
                System.out.println(E.getMessage());
                E.printStackTrace();
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(30552,521,<944,58>,<963,9>)
```
 {

            System.out.println(number_of_txns);

            ntrans = number_of_txns;
            Conn   = connect(url, user, password);

            if (Conn == null) {
                return;
            }

            try {
                Conn.setAutoCommit(false);
                Conn.setTransactionIsolation(transactionMode);
                prepareStatements();
            } catch (Exception E) {
                System.out.println(E.getMessage());
                E.printStackTrace();
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22778,992,<689,12>,<725,13>)
```
 int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(25009,992,<766,12>,<802,13>)
```
 int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(48315,386,<1563,12>,<1576,62>)
```
 if (result.isError()) {
                return result;
            }

            if (offset + dataLength > length) {
                length = offset + dataLength;
                result = setLength(lobID, length);

                if (result.isError()) {
                    return result;
                }
            }

            return ResultLob.newLobSetResponse(lobID, length);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(50203,386,<1633,12>,<1646,62>)
```
 if (result.isError()) {
                return result;
            }

            if (offset + dataLength > length) {
                length = offset + dataLength;
                result = setLength(lobID, length);

                if (result.isError()) {
                    return result;
                }
            }

            return ResultLob.newLobSetResponse(lobID, length);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(6009,468,<183,12>,<195,23>)
```
 if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len "
                           + baOut.length, false);
            }

            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length
                               + ", got len " + baOut.length, false);
                }
            }

            rs.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(7800,468,<238,12>,<250,23>)
```
 if (baOut.length != baR1.length) {
                assertTrue("Expected array len " + baR1.length + ", got len "
                           + baOut.length, false);
            }

            for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue("Expected array len " + baR1.length
                               + ", got len " + baOut.length, false);
                }
            }

            rs.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(25016,277,<811,16>,<818,17>)
```
 long aLimit =
                    aLength
                    - ((long) aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset)
                      * lobBlockSize / 2;

                if (aLimit > lobBlockSize / 2) {
                    aLimit = lobBlockSize / 2;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30031,253,<981,12>,<988,13>)
```
 long aLimit =
                aLength
                - ((long) aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset)
                  * lobBlockSize / 2;

            if (aLimit > lobBlockSize / 2) {
                aLimit = lobBlockSize / 2;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(5441,280,<186,56>,<196,5>)
```
 {

        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getBlockLength();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(6933,280,<221,57>,<231,5>)
```
 {

        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getBlockLength();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(27177,554,<889,8>,<906,9>)
```
 data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;

        if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }

        if (bLength == 0) {
            return 1;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29130,554,<957,8>,<974,9>)
```
 data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;

        if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }

        if (bLength == 0) {
            return 1;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62683,478,<1826,12>,<1846,23>)
```
 String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;

            long l = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30774,478,<1003,12>,<1023,23>)
```
 String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = "";
            }

            if (sql.startsWith("--#")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith("--")) {
                continue;
            }

            g[2] = sql;

            long l = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(3661,191,<104,8>,<110,9>)
```
 Object[] data = ((Row) object).getData();

        for (int i = 0; i < nullsList.length; i++) {
            if (data[i] == null) {
                nullsList[i] = true;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(5317,191,<172,8>,<178,9>)
```
 Object[] data = ((Row) object).getData();

        for (int i = 0; i < nullsList.length; i++) {
            if (data[i] == null) {
                nullsList[i] = true;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(28222,394,<919,12>,<936,13>)
```
 aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30967,394,<1009,12>,<1026,13>)
```
 aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(106208,245,<2813,16>,<2819,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(108402,245,<2880,16>,<2886,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(109594,245,<2920,16>,<2926,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(112128,245,<2991,16>,<2997,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62091,307,<1798,8>,<1811,35>)
```
 StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30182,307,<975,8>,<988,35>)
```
 StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(45595,329,<1536,16>,<1545,48>)
```
 if (!(a instanceof BigDecimal)) {
                    a = convertToDefaultType(null, a);
                }

                if (!(b instanceof BigDecimal)) {
                    b = convertToDefaultType(null, b);
                }

                BigDecimal abd = (BigDecimal) a;
                BigDecimal bbd = (BigDecimal) b;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(47441,329,<1593,16>,<1602,48>)
```
 if (!(a instanceof BigDecimal)) {
                    a = convertToDefaultType(null, a);
                }

                if (!(b instanceof BigDecimal)) {
                    b = convertToDefaultType(null, b);
                }

                BigDecimal abd = (BigDecimal) a;
                BigDecimal bbd = (BigDecimal) b;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(27768,297,<909,12>,<912,76>)
```
 int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;
            int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;
            byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);
            byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29721,297,<977,12>,<980,76>)
```
 int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;
            int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;
            byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);
            byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(22697,867,<685,12>,<718,55>)
```
 ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(24928,867,<762,12>,<795,55>)
```
 ResultSet rs = statement.executeQuery(dq1);

            rs.next();

            int length = rs.getInt(1);

            assertTrue(value.length() == length);
            rs.close();

            String dq3 = "delete from clobtest;";

            statement.execute(dq3);

            char[] testChars = new char[11111];

            for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }

            ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);
            ps.executeUpdate();

            String dq2 = "select clobfield from clobtest;";

            rs = statement.executeQuery(dq2);

            rs.next();

            Reader reader   = rs.getCharacterStream(1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3529,182,<108,8>,<116,68>)
```
 pstmt.setInt(1, 0);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(4673,182,<155,8>,<163,68>)
```
 pstmt.setInt(1, 0);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ArrayType.java|(4346,227,<149,8>,<159,38>)
```
 if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
        int      length = arra.length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(3354,227,<123,8>,<133,38>)
```
 if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
        int      length = arra.length;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11750,183,<512,12>,<515,44>)
```
 mask           = ((source & 0xff) << 8) >>> shift;
            innermask      = 0xff00 >>> shift;
            innermask      = ~innermask;
            b              = map[index + 1];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13635,183,<586,12>,<589,44>)
```
 mask           = ((source & 0xff) << 8) >>> shift;
            innermask      = 0xff00 >>> shift;
            innermask      = ~innermask;
            b              = map[index + 1];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25522,175,<932,8>,<936,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(rangeVariables, set);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(29025,175,<974,8>,<978,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(rangeVariables, set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ArrayType.java|(4405,249,<153,8>,<163,9>)
```
 if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
        int      length = arra.length;

        if (arrb.length < length) {
            length = arrb.length;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(3413,249,<127,8>,<137,9>)
```
 if (b == null) {
            return 1;
        }

        Object[] arra   = (Object[]) a;
        Object[] arrb   = (Object[]) b;
        int      length = arra.length;

        if (arrb.length < length) {
            length = arrb.length;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(25315,1332,<696,8>,<722,51>)
```
 st.execute(
            "CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))");
        st.execute(
            "CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))");
        st.execute("INSERT INTO t1 values(1,1,1)");
        st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2096,1332,<51,8>,<77,51>)
```
 st.execute(
            "CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))");
        st.execute(
            "CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))");
        st.execute("INSERT INTO t1 values(1,1,1)");
        st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(28671,857,<887,16>,<912,40>)
```
 pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);

                ResultSet RS = pstmt2.executeQuery();

                pstmt2.clearWarnings();

                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }

                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(29915,941,<965,20>,<990,44>)
```
 pstmt1.setInt(1, delta);
                    pstmt1.setInt(2, aid);
                    pstmt1.executeUpdate();
                    pstmt1.clearWarnings();
                    pstmt2.setInt(1, aid);

                    ResultSet RS = pstmt2.executeQuery();

                    pstmt2.clearWarnings();

                    while (RS.next()) {
                        aBalance = RS.getInt(1);
                    }

                    pstmt3.setInt(1, delta);
                    pstmt3.setInt(2, tid);
                    pstmt3.executeUpdate();
                    pstmt3.clearWarnings();
                    pstmt4.setInt(1, delta);
                    pstmt4.setInt(2, bid);
                    pstmt4.executeUpdate();
                    pstmt4.clearWarnings();
                    pstmt5.setInt(1, tid);
                    pstmt5.setInt(2, bid);
                    pstmt5.setInt(3, aid);
                    pstmt5.setInt(4, delta);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(8383,645,<205,12>,<220,61>)
```
 java.util.Date start = new java.util.Date();

            if (init) {
                System.out.println("Start: " + start.toString());
                System.out.print("Initializing dataset...");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println("done. in " + seconds + " seconds\n");
                System.out.println("Complete: "
                                   + (new java.util.Date()).toString());
            }

            System.out.println("* Starting Benchmark Run *");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(7255,645,<189,12>,<204,61>)
```
 java.util.Date start = new java.util.Date();

            if (init) {
                System.out.println("Start: " + start.toString());
                System.out.print("Initializing dataset...");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println("done. in " + seconds + " seconds\n");
                System.out.println("Complete: "
                                   + (new java.util.Date()).toString());
            }

            System.out.println("* Starting Benchmark Run *");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(26155,700,<712,8>,<726,62>)
```
 assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2936,700,<67,8>,<81,62>)
```
 assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
        assertEquals(3, rs.getInt("value3"));    //this fails!
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23028,307,<555,8>,<564,76>)
```
 if (!JDBCClobClient.isInLimits(data.length, position, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }

        Type[] types = new Type[2];

        types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(21739,307,<512,8>,<521,76>)
```
 if (!JDBCClobClient.isInLimits(data.length, position, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }

        Type[] types = new Type[2];

        types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23160,253,<559,8>,<568,10>)
```
 Type[] types = new Type[2];

        types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(21871,253,<516,8>,<525,10>)
```
 Type[] types = new Type[2];

        types[0] = Type.SQL_INTEGER;
        types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(12515,298,<334,8>,<340,70>)
```
 System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(12261,298,<343,8>,<349,70>)
```
 System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25048,159,<916,8>,<920,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(set);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(28518,159,<954,8>,<958,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(24647,228,<899,8>,<906,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(29751,228,<1000,8>,<1007,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(5015,195,<180,8>,<184,44>)
```
 int windex = pos >> 5;
        int mask   = 0x80000000 >>> (pos & 0x1F);
        int word   = map[windex];
        int result = (word & mask) == 0 ? 0
                                        : 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(5549,195,<206,8>,<210,44>)
```
 int windex = pos >> 5;
        int mask   = 0x80000000 >>> (pos & 0x1F);
        int word   = map[windex];
        int result = (word & mask) == 0 ? 0
                                        : 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(94094,305,<3263,12>,<3275,29>)
```
 int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95767,305,<3345,12>,<3357,29>)
```
 int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(96346,305,<3371,12>,<3383,29>)
```
 int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(18888,359,<526,12>,<541,33>)
```
 Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM branches";

            Stmt.execute(Query);
            Stmt.clearWarnings();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(18630,359,<563,12>,<578,33>)
```
 Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM branches";

            Stmt.execute(Query);
            Stmt.clearWarnings();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(11660,195,<419,16>,<424,53>)
```
 read();
                readThis(Tokens.MEMORY);
                readThis(Tokens.ROWS);

                Integer  size = readIntegerObject();
                Object[] args = new Object[]{ size };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(55879,195,<1897,16>,<1902,53>)
```
 read();
                readThis(Tokens.MEMORY);
                readThis(Tokens.ROWS);

                Integer  size = readIntegerObject();
                Object[] args = new Object[]{ size };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11168,292,<485,8>,<497,9>)
```
 int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;

        if (index >= map.length) {
            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13099,292,<560,8>,<572,9>)
```
 int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;

        if (index >= map.length) {
            return;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(67779,394,<2301,20>,<2312,26>)
```
 RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);

                    object = routine;

                    Routine[] specifics = routine.getSpecificRoutines();

                    for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }

                    break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(68309,394,<2317,20>,<2328,26>)
```
 RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);

                    object = routine;

                    Routine[] specifics = routine.getSpecificRoutines();

                    for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }

                    break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(28926,642,<895,16>,<913,39>)
```
 pstmt2.clearWarnings();

                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }

                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(30194,706,<973,20>,<991,43>)
```
 pstmt2.clearWarnings();

                    while (RS.next()) {
                        aBalance = RS.getInt(1);
                    }

                    pstmt3.setInt(1, delta);
                    pstmt3.setInt(2, tid);
                    pstmt3.executeUpdate();
                    pstmt3.clearWarnings();
                    pstmt4.setInt(1, delta);
                    pstmt4.setInt(2, bid);
                    pstmt4.executeUpdate();
                    pstmt4.clearWarnings();
                    pstmt5.setInt(1, tid);
                    pstmt5.setInt(2, bid);
                    pstmt5.setInt(3, aid);
                    pstmt5.setInt(4, delta);
                    pstmt5.executeUpdate();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(7124,239,<169,8>,<173,62>)
```
 System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
        System.out.println("Number of clients: " + n_clients);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(6296,239,<161,8>,<165,62>)
```
 System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
        System.out.println("Number of clients: " + n_clients);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(31130,442,<1059,8>,<1074,9>)
```
 if (token.tokenType == Tokens.ON) {
            if (!table.isTemp()) {
                throw unexpectedToken();
            }

            read();
            readThis(Tokens.COMMIT);

            if (token.tokenType == Tokens.DELETE) {}
            else if (token.tokenType == Tokens.PRESERVE) {
                table.persistenceScope = TableBase.SCOPE_SESSION;
            }

            read();
            readThis(Tokens.ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(35915,442,<1225,8>,<1240,9>)
```
 if (token.tokenType == Tokens.ON) {
            if (!table.isTemp()) {
                throw unexpectedToken();
            }

            read();
            readThis(Tokens.COMMIT);

            if (token.tokenType == Tokens.DELETE) {}
            else if (token.tokenType == Tokens.PRESERVE) {
                table.persistenceScope = TableBase.SCOPE_SESSION;
            }

            read();
            readThis(Tokens.ROWS);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(12857,351,<393,8>,<403,64>)
```
 Expression expression = (Expression) exprList.get(0);

        if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(14929,351,<454,8>,<464,64>)
```
 Expression expression = (Expression) exprList.get(0);

        if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85576,647,<2126,8>,<2147,9>)
```
 if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88709,647,<2215,8>,<2236,9>)
```
 if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(44524,165,<1338,8>,<1341,43>)
```
 HsqlDateTime.setTimeInMillis(cal, millis);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(45376,165,<1365,8>,<1368,43>)
```
 HsqlDateTime.setTimeInMillis(cal, millis);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(151524,376,<4814,8>,<4830,9>)
```
 if (grant) {
            readThis(Tokens.TO);
        } else {
            readThis(Tokens.FROM);
        }

        while (true) {
            checkIsSimpleName();
            granteeList.add(token.tokenString);
            read();

            if (token.tokenType == Tokens.COMMA) {
                read();
            } else {
                break;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(154224,376,<4915,8>,<4931,9>)
```
 if (grant) {
            readThis(Tokens.TO);
        } else {
            readThis(Tokens.FROM);
        }

        while (true) {
            checkIsSimpleName();
            granteeList.add(token.tokenString);
            read();

            if (token.tokenType == Tokens.COMMA) {
                read();
            } else {
                break;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(12386,303,<418,16>,<424,17>)
```
 if (slen > precision) {
                    if (getRightTrimSise((String) a, ' ') <= precision) {
                        return ((String) a).substring(0, (int) precision);
                    } else {
                        throw Error.error(ErrorCode.X_22001);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(13067,303,<439,16>,<445,17>)
```
 if (slen > precision) {
                    if (getRightTrimSise((String) a, ' ') <= precision) {
                        return ((String) a).substring(0, (int) precision);
                    } else {
                        throw Error.error(ErrorCode.X_22001);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(11916,366,<391,16>,<402,17>)
```
 currentLine = currentLine.trim() + ";";
                Tokenizer   = new StringTokenizer(currentLine);

                try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }

                if (Token == null) {
                    continue;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(14359,366,<458,16>,<469,17>)
```
 currentLine = currentLine.trim() + ";";
                Tokenizer   = new StringTokenizer(currentLine);

                try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }

                if (Token == null) {
                    continue;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(23530,366,<717,16>,<728,17>)
```
 currentLine = currentLine.trim() + ";";
                Tokenizer   = new StringTokenizer(currentLine);

                try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }

                if (Token == null) {
                    continue;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(45746,218,<1266,12>,<1269,53>)
```
 row               = t.getEmptyRowData();
            row[itable_cat]   = database.getCatalogName().name;
            row[itable_schem] = table.getSchemaName().name;
            row[itable_name]  = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(96967,218,<2356,12>,<2359,53>)
```
 row               = t.getEmptyRowData();
            row[itable_cat]   = database.getCatalogName().name;
            row[itable_schem] = table.getSchemaName().name;
            row[itable_name]  = table.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(83996,291,<2676,12>,<2686,38>)
```
 if (token.tokenType == Tokens.BY) {
                read();
                readThis(Tokens.DEFAULT);
            } else {
                readThis(Tokens.ALWAYS);

                generatedAlways = true;
            }

            readThis(Tokens.AS);
            readThis(Tokens.IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(131110,259,<4131,8>,<4141,34>)
```
 if (token.tokenType == Tokens.BY) {
            read();
            readThis(Tokens.DEFAULT);
        } else {
            readThis(Tokens.ALWAYS);

            generatedAlways = true;
        }

        readThis(Tokens.AS);
        readThis(Tokens.IDENTITY);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85663,771,<2130,8>,<2154,9>)
```
 if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88796,771,<2219,8>,<2243,9>)
```
 if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }

        if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(6742,235,<228,51>,<237,5>)
```
 {

        if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        byte[] bytes = b.getBytes(session, offset, (int) length);

        setBytes(session, pos, bytes, 0, bytes.length);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryData.java|(6545,235,<200,51>,<209,5>)
```
 {

        if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        byte[] bytes = b.getBytes(session, offset, (int) length);

        setBytes(session, pos, bytes, 0, bytes.length);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(32171,301,<1007,12>,<1015,44>)
```
 if (statement == null) {
                throw unexpectedToken();
            }

            Token[] tokenisedStatement = getRecordedStatement();
            String  sql                = Token.getSQL(tokenisedStatement);

            statement.setSQL(sql);
            routine.setProcedure(statement);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(75312,277,<2415,8>,<2423,40>)
```
 if (statement == null) {
            throw unexpectedToken();
        }

        Token[] tokenisedStatement = getRecordedStatement();
        String  sql                = Token.getSQL(tokenisedStatement);

        statement.setSQL(sql);
        routine.setProcedure(statement);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(9908,221,<332,8>,<338,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(10586,221,<359,8>,<365,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11112,221,<382,8>,<388,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11741,221,<407,8>,<413,9>)
```
 NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(30394,299,<949,20>,<956,43>)
```
 if (routine.getType() == SchemaObject.FUNCTION
                            || !set.add(Tokens.SAVEPOINT)) {
                        throw unexpectedToken();
                    }

                    read();
                    readThis(Tokens.SAVEPOINT);
                    readThis(Tokens.LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(30852,299,<962,20>,<969,43>)
```
 if (routine.getType() == SchemaObject.FUNCTION
                            || !set.add(Tokens.SAVEPOINT)) {
                        throw unexpectedToken();
                    }

                    read();
                    readThis(Tokens.SAVEPOINT);
                    readThis(Tokens.LEVEL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(8410,631,<292,8>,<304,54>)
```
 // DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }

        int     newType = typeCode;
        int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;
        boolean zone    = withTimeZone || otherType.withTimeZone;
        int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(10148,864,<341,16>,<355,75>)
```
 // DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }

                int     newType = typeCode;
                int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;
                boolean zone    = withTimeZone || otherType.withTimeZone;
                int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(11367,325,<374,8>,<384,40>)
```
 StringTokenizer Tokenizer;

        if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }

        String        currentLine  = "";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(23090,319,<702,8>,<712,32>)
```
 StringTokenizer   Tokenizer;

        if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }

        String currentLine = "";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArrayAggregate.java|(4804,196,<154,8>,<160,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAggregate.java|(6242,196,<195,8>,<201,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(6551,182,<221,8>,<226,9>)
```
 if (indexList.length == 0 || accessorList[0] == null) {
            indexList    = keys;
            accessorList = new CachedObject[indexList.length];

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java|(10214,182,<354,8>,<359,9>)
```
 if (indexList.length == 0 || accessorList[0] == null) {
            indexList    = keys;
            accessorList = new CachedObject[indexList.length];

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVL.java|(8855,182,<312,8>,<317,9>)
```
 if (indexList.length == 0 || accessorList[0] == null) {
            indexList    = keys;
            accessorList = new CachedObject[indexList.length];

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(9559,182,<356,8>,<361,9>)
```
 if (indexList.length == 0 || accessorList[0] == null) {
            indexList    = keys;
            accessorList = new CachedObject[indexList.length];

            return;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(42149,305,<1369,8>,<1379,9>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53861,305,<1749,8>,<1759,9>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55050,305,<1791,8>,<1801,9>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55914,305,<1823,8>,<1833,9>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(57461,305,<1875,8>,<1885,9>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(321041,317,<8450,12>,<8457,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(143890,317,<3506,12>,<3513,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(88329,436,<2825,20>,<2833,21>)
```
 if (token.tokenType == Tokens.MAXVALUE) {
                        sequence.setDefaultMaxValue();
                    } else if (token.tokenType == Tokens.MINVALUE) {
                        sequence.setDefaultMinValue();
                    } else if (token.tokenType == Tokens.CYCLE) {
                        sequence.setCycle(false);
                    } else {
                        throw unexpectedToken();
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(133209,500,<4205,28>,<4213,29>)
```
 if (token.tokenType == Tokens.MAXVALUE) {
                                sequence.setDefaultMaxValue();
                            } else if (token.tokenType == Tokens.MINVALUE) {
                                sequence.setDefaultMinValue();
                            } else if (token.tokenType == Tokens.CYCLE) {
                                sequence.setCycle(false);
                            } else {
                                throw unexpectedToken();
                            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/StringConverter.java|(7112,152,<224,45>,<229,9>)
```
 {
            int c = ((int) b[i]) & 0xff;

            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];
            s[j++] = (char) HEXBYTES[c & 0xf];
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/StringConverter.java|(7691,152,<252,38>,<257,9>)
```
 {
            int c = ((int) b[i]) & 0xff;

            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];
            s[j++] = (char) HEXBYTES[c & 0xf];
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(7682,522,<211,8>,<224,58>)
```
 iDeletedCount = deleteStatement.executeUpdate();

        Assert.assertEquals(
            "Exactly one record with time data shoud have been deleted.",
            iDeletedCount, 1);

        // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDateTime.java|(11417,522,<311,8>,<324,58>)
```
 iDeletedCount = deleteStatement.executeUpdate();

        Assert.assertEquals(
            "Exactly one record with time data shoud have been deleted.",
            iDeletedCount, 1);

        // And now test the date
        Assert.assertNotNull(
            "The inserted time shouldn't be retrieved as null from the database",
            retrievedTime);

        // Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();
        String retrievedString = retrievedTime.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(10948,384,<328,8>,<340,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg_left=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        if (getRightNode() != null) {
            sb.append(" arg_right=[");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(18032,384,<614,8>,<626,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg_left=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        if (getRightNode() != null) {
            sb.append(" arg_right=[");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(6582,384,<217,8>,<229,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg_left=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        if (getRightNode() != null) {
            sb.append(" arg_right=[");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(23343,230,<708,8>,<712,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(24666,230,<748,8>,<752,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(26153,230,<790,8>,<794,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(27829,230,<836,8>,<840,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(29280,230,<878,8>,<882,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(30988,230,<929,8>,<933,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9837,717,<263,12>,<280,42>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11183,717,<298,12>,<315,42>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(20715,433,<775,8>,<787,9>)
```
 String tokenS;

        if (token.charsetSchema != null) {
            tokenS = token.charsetSchema;
        } else if (token.charsetName != null) {
            tokenS = token.charsetName;
        } else if (token.namePrePrefix != null) {
            tokenS = token.namePrePrefix;
        } else if (token.namePrefix != null) {
            tokenS = token.namePrefix;
        } else {
            tokenS = token.tokenString;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(21580,433,<802,8>,<814,9>)
```
 String tokenS;

        if (token.charsetSchema != null) {
            tokenS = token.charsetSchema;
        } else if (token.charsetName != null) {
            tokenS = token.charsetName;
        } else if (token.namePrePrefix != null) {
            tokenS = token.namePrePrefix;
        } else if (token.namePrefix != null) {
            tokenS = token.namePrefix;
        } else {
            tokenS = token.tokenString;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10326,460,<275,12>,<286,23>)
```
 assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
            rs.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11672,460,<310,12>,<321,23>)
```
 assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertFalse("Too many rows fetched", rs.next());
            rs.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(6813,185,<214,8>,<218,36>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(7236,185,<228,8>,<232,36>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(119074,241,<3196,16>,<3202,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(48774,241,<1324,16>,<1330,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(49158,241,<1337,16>,<1343,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(49537,241,<1350,16>,<1356,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(34554,663,<963,78>,<989,5>)
```
 {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(29191,663,<770,78>,<796,5>)
```
 {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(17188,190,<524,8>,<527,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(18571,190,<562,8>,<565,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(19785,190,<597,8>,<600,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(23343,190,<708,8>,<711,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(24666,190,<748,8>,<751,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(26153,190,<790,8>,<793,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(27829,190,<836,8>,<839,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(29280,190,<878,8>,<881,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(30988,190,<929,8>,<932,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(57134,230,<1886,8>,<1894,9>)
```
 if (readIfThis(Tokens.NO)) {
            readThis(Tokens.PAD);

            padSpace = Boolean.FALSE;
        } else if (readIfThis(Tokens.PAD)) {
            readThis(Tokens.SPACE);

            padSpace = Boolean.TRUE;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(29495,278,<1023,16>,<1031,17>)
```
 if (readIfThis(Tokens.NO)) {
                    readThis(Tokens.PAD);

                    padSpace = Boolean.FALSE;
                } else if (readIfThis(Tokens.PAD)) {
                    readThis(Tokens.SPACE);

                    padSpace = Boolean.TRUE;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVLMemory.java|(5854,485,<156,8>,<170,9>)
```
 if (l != null && l.getBalance(store) == -2) {
            System.out.print("broken index - deleted");
        }

        if (r != null && r.getBalance(store) == -2) {
            System.out.print("broken index -deleted");
        }

        if (l != null && !p.equals(l.getParent(store))) {
            System.out.print("broken index - no parent");
        }

        if (r != null && !p.equals(r.getParent(store))) {
            System.out.print("broken index - no parent");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(18890,485,<670,8>,<684,9>)
```
 if (l != null && l.getBalance(store) == -2) {
            System.out.print("broken index - deleted");
        }

        if (r != null && r.getBalance(store) == -2) {
            System.out.print("broken index -deleted");
        }

        if (l != null && !p.equals(l.getParent(store))) {
            System.out.print("broken index - no parent");
        }

        if (r != null && !p.equals(r.getParent(store))) {
            System.out.print("broken index - no parent");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(9334,467,<310,8>,<326,32>)
```
 int hash = (int) longKey;

        if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }

        int    index       = hashIndex.getHashIndex(hash);
        int    lookup      = hashIndex.hashTable[index];
        int    lastLookup  = -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(14161,470,<469,8>,<485,33>)
```
 int hash = (int) longKey;

        if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }

        int     index       = hashIndex.getHashIndex(hash);
        int     lookup      = hashIndex.hashTable[index];
        int     lastLookup  = -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16485,209,<505,12>,<509,67>)
```
 StringBuffer sb = new StringBuffer(64);

            sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(18097,184,<567,8>,<570,63>)
```
 StringBuffer sb = new StringBuffer(64);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(18606,184,<583,8>,<586,63>)
```
 StringBuffer sb = new StringBuffer(64);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4787,164,<139,8>,<144,22>)
```
 result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5850,164,<178,8>,<183,22>)
```
 result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(15390,298,<508,24>,<514,56>)
```
 objectKeyTable[lookup]   = null;
                        returnValue              = objectValueTable[lookup];
                        objectValueTable[lookup] = null;

                        hashIndex.unlinkNode(index, lastLookup, lookup);

                        multiValueTable[lookup] = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(16151,301,<525,28>,<531,60>)
```
 objectKeyTable[lookup]   = null;
                            returnValue = objectValueTable[lookup];
                            objectValueTable[lookup] = null;

                            hashIndex.unlinkNode(index, lastLookup, lookup);

                            multiValueTable[lookup] = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(285776,404,<7551,16>,<7561,17>)
```
 Grantee granteeObject = (Grantee) grantees.get(i);
                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(293405,404,<7745,16>,<7755,17>)
```
 Grantee granteeObject = (Grantee) grantees.get(i);
                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(15749,2847,<445,12>,<514,13>)
```
 stmnt.execute(ddl1);

            PreparedStatement ps = connection.prepareStatement(
                "INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");

            ps.setString(1, "0.2");
            ps.setDouble(2, 0.2);
            ps.setLong(3, java.lang.Long.MAX_VALUE);
            ps.setInt(4, Integer.MAX_VALUE);
            ps.setInt(5, Short.MAX_VALUE);
            ps.setInt(6, 0);
            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));
            ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));
            ps.execute();
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(14616,2847,<370,12>,<439,13>)
```
 stmnt.execute(ddl1);

            PreparedStatement ps = connection.prepareStatement(
                "INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)");

            ps.setString(1, "0.2");
            ps.setDouble(2, 0.2);
            ps.setLong(3, java.lang.Long.MAX_VALUE);
            ps.setInt(4, Integer.MAX_VALUE);
            ps.setInt(5, Short.MAX_VALUE);
            ps.setInt(6, 0);
            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));
            ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));
            ps.execute();
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,339,<5691,16>,<5700,60>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(316586,336,<8341,16>,<8350,57>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                = t.getEmptyRowData();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(11011,561,<406,12>,<420,62>)
```
 Object[] currentData = getNext();
            boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;

            if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }

            otherRow  = it.getNextRow();
            otherData = otherRow == null ? null
                                         : otherRow.getData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(12645,561,<465,12>,<479,62>)
```
 Object[] currentData = getNext();
            boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;

            if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }

            otherRow  = it.getNextRow();
            otherData = otherRow == null ? null
                                         : otherRow.getData();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(33204,174,<993,43>,<1004,5>)
```
 {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(17776,174,<540,43>,<551,5>)
```
 {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(16408,174,<436,43>,<447,5>)
```
 {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157372,619,<4267,12>,<4276,64>)
```
 addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(297753,619,<7845,12>,<7854,64>)
```
 addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191133,358,<5114,16>,<5119,69>)
```
 //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(196751,355,<5262,20>,<5266,73>)
```
 row[specific_catalog] = database.getCatalogName().name;
                    row[specific_schema]  = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[routine_catalog]  = database.getCatalogName().name;
                    row[routine_schema]   = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211768,339,<5701,16>,<5705,69>)
```
 row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(225272,338,<5947,12>,<5952,65>)
```
 //
            row[specific_catalog] = database.getCatalogName().name;
            row[specific_schema]  = routine.getSchemaName().name;
            row[specific_name]    = routine.getSpecificName().name;
            row[routine_catalog]  = database.getCatalogName().name;
            row[routine_schema]   = routine.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137605,388,<3712,16>,<3720,44>)
```
 row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(138761,388,<3743,16>,<3751,44>)
```
 row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(134632,253,<3629,16>,<3635,44>)
```
 row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(136546,237,<3682,12>,<3688,40>)
```
 row[collection_type_identifier] = type.getDefinition();

            addTypeInfo(row, ((ArrayType) type).collectionBaseType());

            try {
                t.insertSys(session, store, row);
            } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137740,253,<3714,16>,<3720,44>)
```
 row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(138896,253,<3745,16>,<3751,44>)
```
 row[collection_type_identifier] = type.getDefinition();

                addTypeInfo(row, ((ArrayType) type).collectionBaseType());

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(277823,214,<7332,12>,<7334,74>)
```
 row[event_object_catalog] = database.getCatalogName().name;
            row[event_object_schema] = trigger.getTable().getSchemaName().name;
            row[event_object_table]   = trigger.getTable().getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(282552,241,<7455,16>,<7458,77>)
```
 row[event_object_catalog] = database.getCatalogName().name;
                row[event_object_schema] =
                    trigger.getTable().getSchemaName().name;
                row[event_object_table]  = trigger.getTable().getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(16448,2472,<461,12>,<524,13>)
```
 ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(15315,2472,<386,12>,<449,13>)
```
 ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.NaN);
            ps.setLong(3, java.lang.Long.MIN_VALUE);
            ps.setInt(4, Integer.MIN_VALUE);
            ps.setInt(5, Short.MIN_VALUE);
            ps.setInt(6, 0);

            // allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));
            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));
            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));
            ps.execute();

            //
            ps.setInt(1, 0);
            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);
            ps.setInt(4, Integer.MIN_VALUE);

            // test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);
            ps.setObject(6, new Integer(2), Types.TINYINT);

            // allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));
            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));
            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));
            ps.execute();
            ps.setObject(1, new Float(0), Types.INTEGER);
            ps.setObject(4, new Float(1), Types.INTEGER);
            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);
            ps.execute();

            ResultSet rs =
                stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1");
            boolean result = rs.next();

            value = rs.getDouble(2);

//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);

            if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }

            if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(9771,226,<328,8>,<334,42>)
```
 if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3315,226,<102,8>,<108,42>)
```
 if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementProcedure.java|(9227,226,<301,8>,<307,42>)
```
 if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(4901,226,<136,8>,<142,42>)
```
 if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(135199,373,<3649,12>,<3656,66>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
            row[object_name]                = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(136093,373,<3673,12>,<3680,66>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
            row[object_name]                = type.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191224,331,<5116,16>,<5120,63>)
```
 row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(196827,347,<5263,20>,<5267,67>)
```
 row[specific_schema]  = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[routine_catalog]  = database.getCatalogName().name;
                    row[routine_schema]   = routine.getSchemaName().name;
                    row[routine_name]     = routine.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211840,331,<5702,16>,<5706,63>)
```
 row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(225355,315,<5949,12>,<5953,59>)
```
 row[specific_schema]  = routine.getSchemaName().name;
            row[specific_name]    = routine.getSpecificName().name;
            row[routine_catalog]  = database.getCatalogName().name;
            row[routine_schema]   = routine.getSchemaName().name;
            row[routine_name]     = routine.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(123310,947,<3360,12>,<3374,64>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130806,947,<3535,12>,<3549,64>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3749,233,<117,59>,<130,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSimple.java|(3694,233,<106,59>,<119,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(7117,233,<201,59>,<214,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(8838,233,<270,59>,<283,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDbBackup.java|(10352,333,<304,8>,<312,11>)
```
 if (!destDir.mkdir()) {
            throw new IOException("Failed to make new dir. to restore to: "
                                  + destDir.getAbsolutePath());
        }

        DbBackup.main(new String[] {
            "--extract", baseDir.getAbsolutePath() + '/' + baseTarName,
            destDir.getAbsolutePath()
        });
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDbBackup.java|(11495,333,<339,8>,<347,11>)
```
 if (!destDir.mkdir()) {
            throw new IOException("Failed to make new dir. to restore to: "
                                  + destDir.getAbsolutePath());
        }

        DbBackup.main(new String[] {
            "--extract", baseDir.getAbsolutePath() + '/' + baseTarName,
            destDir.getAbsolutePath()
        });
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(15731,306,<641,34>,<652,5>)
```
 {

        if (size == table.length) {
            int        newSize  = size == 0 ? 4
                                            : size * 2;
            Object[][] newTable = new Object[newSize][];

            System.arraycopy(table, 0, newTable, 0, size);

            table = newTable;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(7065,306,<262,34>,<273,5>)
```
 {

        if (size == table.length) {
            int        newSize  = size == 0 ? 4
                                            : size * 2;
            Object[][] newTable = new Object[newSize][];

            System.arraycopy(table, 0, newTable, 0, size);

            table = newTable;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBug1191815.java|(3586,182,<108,8>,<113,34>)
```
 TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBug785429.java|(5048,182,<165,8>,<170,34>)
```
 TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(3031,468,<96,12>,<108,13>)
```
 int limit = session.rowActionList.size();

            // new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(3861,468,<120,12>,<132,13>)
```
 int limit = session.rowActionList.size();

            // new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(82415,781,<1924,8>,<1945,28>)
```
 RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }

        return updateCounts;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(44352,781,<1097,8>,<1118,28>)
```
 RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }

        return updateCounts;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(309326,187,<7282,8>,<7288,42>)
```
 Type     sourceType;
        Object   value;

        checkColumn(columnIndex);

        sourceType = resultMetaData.columnTypes[--columnIndex];
        value      = rowData[columnIndex];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(318137,203,<7573,12>,<7579,46>)
```
 Type     sourceType;
            Object   value;

            checkColumn(columnIndex);

            sourceType = resultMetaData.columnTypes[--columnIndex];
            value      = rowData[columnIndex];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(136079,262,<4906,56>,<4919,5>)
```
 {

        if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(86715,245,<2968,8>,<2978,17>)
```
 if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }

        return e;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/SimpleLog.java|(4313,272,<138,8>,<150,9>)
```
 if (level < atLevel) {
            return;
        }

        if (writer == null) {
            return;
        }

        sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

        if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/SimpleLog.java|(4860,272,<161,8>,<173,9>)
```
 if (level < atLevel) {
            return;
        }

        if (writer == null) {
            return;
        }

        sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

        if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java|(11220,306,<419,8>,<431,35>)
```
 readFieldPrefix();

        if (scanner.scanNull()) {
            return null;
        }

        scanner.scanBinaryStringWithQuote();

        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {
            throw Error.error(ErrorCode.X_42587);
        }

        value = scanner.getValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java|(12080,306,<457,8>,<469,35>)
```
 readFieldPrefix();

        if (scanner.scanNull()) {
            return null;
        }

        scanner.scanBinaryStringWithQuote();

        if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {
            throw Error.error(ErrorCode.X_42587);
        }

        value = scanner.getValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/SimpleLog.java|(4375,239,<142,8>,<152,27>)
```
 if (writer == null) {
            return;
        }

        sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

        if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }

        sb.append(message);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/SimpleLog.java|(5520,239,<189,8>,<199,27>)
```
 if (writer == null) {
            return;
        }

        sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

        if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }

        sb.append(message);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java|(7669,169,<283,8>,<292,16>)
```
 hasChanged = true;

        if (count != i) {
            moveRows(i, i + 1, count - i);
        }

        keys[i]   = key;
        values[i] = value;

        count++;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java|(8930,169,<340,8>,<349,16>)
```
 hasChanged = true;

        if (count != i) {
            moveRows(i, i + 1, count - i);
        }

        keys[i]   = key;
        values[i] = value;

        count++;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(3224,349,<100,12>,<111,35>)
```
 session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

            adjustLobUsage(session);
            persistCommit(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(4054,349,<124,12>,<135,35>)
```
 session.transactionEndTimestamp = session.actionTimestamp;

            endTransaction(session);

            for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

            adjustLobUsage(session);
            persistCommit(session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(130720,181,<4696,19>,<4700,13>)
```
 {
                r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,
                        r.nodes.length + 1);
                r.nodes[r.nodes.length - 1] = e;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(136852,197,<4936,23>,<4940,17>)
```
 {
                    r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,
                            r.nodes.length + 1);
                    r.nodes[r.nodes.length - 1] = e;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(24214,477,<818,20>,<827,21>)
```
 if (mode == TransactionManager.ACTION_READ) {
                        actionType = action.ACTION_DELETE;
                    } else if (mode == TransactionManager.ACTION_DUP) {
                        actionType = ACTION_INSERT;

                        session.tempSet.clear();
                        session.tempSet.add(action);
                    } else if (mode == TransactionManager.ACTION_REF) {
                        actionType = ACTION_DELETE;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(25481,477,<850,20>,<859,21>)
```
 if (mode == TransactionManager.ACTION_READ) {
                        actionType = action.ACTION_DELETE;
                    } else if (mode == TransactionManager.ACTION_DUP) {
                        actionType = ACTION_INSERT;

                        session.tempSet.clear();
                        session.tempSet.add(action);
                    } else if (mode == TransactionManager.ACTION_REF) {
                        actionType = ACTION_DELETE;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(29557,145,<839,12>,<847,32>)
```
 r = sStatement.executeQuery(s);

            r.next();

            b1n = r.getBytes(1);

            r.next();

            b1n = r.getBytes(1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(29854,145,<852,12>,<860,32>)
```
 r = sStatement.executeQuery(s);

            r.next();

            b1n = r.getBytes(1);

            r.next();

            b1n = r.getBytes(1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3146,542,<94,50>,<115,5>)
```
 {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(4732,542,<128,50>,<149,5>)
```
 {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129623,2460,<3150,8>,<3204,9>)
```
 final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(134088,2460,<3255,8>,<3309,9>)
```
 final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(9386,430,<292,54>,<307,5>)
```
 {

        RowAction action = row.rowAction;

        if (action == null) {
/*
            System.out.println("null insert action " + session + " "
                               + session.actionTimestamp);
*/
            throw Error.runtimeError(ErrorCode.GENERAL_ERROR,
                                     "null insert action ");
        }

        store.indexRow(session, row);
        session.rowActionList.add(action);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(6771,413,<223,8>,<235,42>)
```
 RowAction action = row.rowAction;

        if (action == null) {
/*
            System.out.println("null insert action " + session + " "
                               + session.actionTimestamp);
*/
            throw Error.runtimeError(ErrorCode.GENERAL_ERROR,
                                     "null insert action ");
        }

        store.indexRow(session, row);
        session.rowActionList.add(action);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(173262,383,<4096,24>,<4103,25>)
```
 if (!htmlMode) {
                            for (int i = 0; i < headerArray.length; i++)
                                condlPrint(((i > 0) ? "  "
                                                    : "") + SqlFile.divider(
                                                        maxWidth[i]), false);

                            condlPrintln("", false);
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(188882,254,<4489,12>,<4495,13>)
```
 if (!htmlMode) {
                for (int i = 0; i < headerArray.length; i++)
                    condlPrint(((i > 0) ? "  " : "")
                            + SqlFile.divider(maxWidth[i]), false);

                condlPrintln("", false);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84214,183,<2025,16>,<2028,43>)
```
 row                = t.getEmptyRowData();
                pName              = (String) l.get(i);
                row[icat]          = cat;
                row[ischem]        = schem;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88918,171,<2145,16>,<2148,40>)
```
 row             = t.getEmptyRowData();
                pName           = (String) l.get(i);
                row[icat]       = cat;
                row[ischem]     = schem;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(23280,547,<724,12>,<738,13>)
```
 try {

                //execute the SQL
                aStatement.execute(getSql());
            } catch (SQLException s) {
                throw new Exception("Expected a ResultSet, but got the error: "
                                    + s.getMessage());
            }

            //check that update count != -1
            if (aStatement.getUpdateCount() != -1) {
                throw new Exception(
                    "Expected a ResultSet, but got an update count of "
                    + aStatement.getUpdateCount());
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(28903,547,<886,12>,<900,13>)
```
 try {

                //execute the SQL
                aStatement.execute(getSql());
            } catch (SQLException s) {
                throw new Exception("Expected a ResultSet, but got the error: "
                                    + s.getMessage());
            }

            //check that update count != -1
            if (aStatement.getUpdateCount() != -1) {
                throw new Exception(
                    "Expected a ResultSet, but got an update count of "
                    + aStatement.getUpdateCount());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84458,195,<2030,16>,<2034,43>)
```
 row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
                row[iresult_sets]  = rs;
                row[iremark]       = remark;
                row[iptype]        = pType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83806,163,<2011,8>,<2015,35>)
```
 row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
        row[iresult_sets]  = rs;
        row[iremark]       = remark;
        row[iptype]        = pType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/DataFileCache.java|(29332,392,<991,8>,<1011,9>)
```
 CachedObject object;

        if (pos < 0) {
            return null;
        }

        readLock.lock();

        try {
            object = cache.get(pos);

            if (object != null) {
                if (keep) {
                    object.keepInMemory(true);
                }

                return object;
            }
        } finally {
            readLock.unlock();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/DataFileCache.java|(29871,392,<1018,8>,<1038,9>)
```
 CachedObject object;

        if (pos < 0) {
            return null;
        }

        readLock.lock();

        try {
            object = cache.get(pos);

            if (object != null) {
                if (keep) {
                    object.keepInMemory(true);
                }

                return object;
            }
        } finally {
            readLock.unlock();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLibSpeed.java|(6145,411,<180,12>,<193,22>)
```
 sw.zero();

            for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }

            System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());
            sw.zero();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLibSpeed.java|(7308,411,<218,12>,<231,22>)
```
 sw.zero();

            for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }

            System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());
            sw.zero();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(15380,432,<545,12>,<554,57>)
```
 ColumnSchema column = table.getColumn(i);
            String columnName = columnAliases == null ? column.getName().name
                                                      : (String) columnAliases
                                                          .get(i);

            if (exclude != null && exclude.contains(columnName)) {
                continue;
            }

            Expression e = new ExpressionColumn(this, i);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(16678,432,<589,12>,<598,57>)
```
 ColumnSchema column = table.getColumn(i);
            String columnName = columnAliases == null ? column.getName().name
                                                      : (String) columnAliases
                                                          .get(i);

            if (exclude != null && exclude.contains(columnName)) {
                continue;
            }

            Expression e = new ExpressionColumn(this, i);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(123698,315,<3008,28>,<3012,60>)
```
 row[grantor] = right.getGrantor().getName().name;
                            row[grantee] = right.getGrantee().getName().name;
                            row[table_catalog]  = tableCatalog;
                            row[table_schema]   = tableSchema;
                            row[table_name]     = tableName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(140810,299,<3427,24>,<3431,56>)
```
 row[grantor] = right.getGrantor().getName().name;
                        row[grantee] = right.getGrantee().getName().name;
                        row[table_catalog]  = tableCatalog;
                        row[table_schema]   = tableSchema;
                        row[table_name]     = tableName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(127963,932,<3113,12>,<3129,55>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(132405,932,<3217,12>,<3233,55>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(25935,338,<643,12>,<647,60>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(34149,373,<837,12>,<841,72>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);            // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);           // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);              // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);          // 6
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);        // 7
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobClient.java|(24924,292,<746,8>,<757,9>)
```
 String csn = charsetName;

        if (csn == null) {
            csn = Charset.defaultCharset().name();
        }

        try {
            if (Charset.isSupported(csn)) {
                return Charset.forName(csn);
            }
        } catch (IllegalCharsetNameException x) {
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(34131,283,<948,8>,<958,50>)
```
 String csn = charsetName;

        if (csn == null) {
            csn = Charset.defaultCharset().name();
        }

        try {
            if (Charset.isSupported(csn)) {
                return Charset.forName(csn);
            }
        } catch (IllegalCharsetNameException x) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33819,400,<1042,39>,<1061,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(42075,400,<1350,39>,<1369,5>)
```
 {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(26225,300,<647,12>,<651,56>)
```
 addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115845,543,<2801,12>,<2809,56>)
```
 addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(98573,381,<2339,20>,<2344,75>)
```
 if (mathMatcher.matches())
                        shared.userVars.put(mathMatcher.group(1), Long.toString(
                                new Calculator(((mathMatcher.groupCount() > 1
                                && mathMatcher.group(2) != null)
                                ? mathMatcher.group(2)
                                : ""), shared.userVars).reduce(0, false)));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(100807,543,<2383,28>,<2391,76>)
```
 if (mathMatcher.matches())
                                shared.userVars.put(
                                        mathMatcher.group(1), Long.toString(
                                        new Calculator(
                                        ((mathMatcher.groupCount() > 1
                                        && mathMatcher.group(2) != null)
                                        ? mathMatcher.group(2)
                                        : ""),
                                        shared.userVars).reduce(0, false)));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133888,736,<3251,8>,<3267,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(5193,461,<146,12>,<158,13>)
```
 addrs = InetAddress.getAllByName(addr.getHostAddress());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

            addrs = InetAddress.getAllByName(addr.getHostName());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(5764,461,<163,12>,<175,13>)
```
 addrs = InetAddress.getAllByName(addr.getHostAddress());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

            addrs = InetAddress.getAllByName(addr.getHostName());

            for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(5875,284,<181,10>,<189,9>)
```
 catch (Exception e) {
            Object[] messages = new Object[] {
                new Integer(field), e.toString()
            };

            throw new IOException(
                Error.getMessage(
                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java|(4833,284,<140,10>,<148,9>)
```
 catch (Exception e) {
            Object[] messages = new Object[] {
                new Integer(field), e.toString()
            };

            throw new IOException(
                Error.getMessage(
                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(44898,183,<1581,16>,<1587,29>)
```
 Object[] value = table.getValues(session);

                if (value.length == 1) {
                    return ((Object[]) value)[0];
                }

                return value;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionTable.java|(5683,183,<189,16>,<195,29>)
```
 Object[] value = table.getValues(session);

                if (value.length == 1) {
                    return ((Object[]) value)[0];
                }

                return value;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(4169,590,<120,8>,<135,9>)
```
 if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3576,590,<98,8>,<113,9>)
```
 if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(34442,222,<873,20>,<876,77>)
```
 Table table =
                        session.database.schemaManager.getTable(session,
                            name.name, name.schema.name);
                    DataFileCache cache = session.database.logger.getCache();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(36390,222,<921,20>,<924,77>)
```
 Table table =
                        session.database.schemaManager.getTable(session,
                            name.name, name.schema.name);
                    DataFileCache cache = session.database.logger.getCache();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(3827,238,<102,12>,<106,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10462,238,<279,12>,<283,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11808,238,<314,12>,<318,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(12285,213,<510,8>,<522,36>)
```
 String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        long id = Long.parseLong(s);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(12606,213,<529,8>,<541,36>)
```
 String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        long id = Long.parseLong(s);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4609,229,<123,12>,<128,49>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9837,229,<263,12>,<268,49>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11183,229,<298,12>,<303,49>)
```
 assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4453,230,<119,12>,<124,42>)
```
 assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9681,230,<259,12>,<264,42>)
```
 assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11027,230,<294,12>,<299,42>)
```
 assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(8665,331,<302,8>,<314,21>)
```
 try {
            if (result != null) {
                while (result.next()) {
                    ret.addElement(result.getString(1));
                }

                result.close();
            }
        } catch (SQLException e) {
            throw new DataAccessPointException(e.toString());
        }

        return (ret);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(9434,331,<334,8>,<346,21>)
```
 try {
            if (result != null) {
                while (result.next()) {
                    ret.addElement(result.getString(1));
                }

                result.close();
            }
        } catch (SQLException e) {
            throw new DataAccessPointException(e.toString());
        }

        return (ret);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(11723,328,<347,16>,<355,69>)
```
 // small rows
                long nextrandom   = randomgen.nextLong();
                int  randomlength = (int) nextrandom & 0x7f;

                if (randomlength > filler.length()) {
                    randomlength = filler.length();
                }

                String varfiller = filler.substring(0, randomlength);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(14999,278,<446,12>,<453,65>)
```
 long nextrandom   = randomgen.nextLong();
            int  randomlength = (int) nextrandom & 0x7f;

            if (randomlength > filler.length()) {
                randomlength = filler.length();
            }

            String varfiller = filler.substring(0, randomlength);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(47684,249,<1290,16>,<1297,22>)
```
 if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_BIGINT;

                break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(48456,249,<1314,16>,<1321,22>)
```
 if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_BIGINT;

                break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(17010,284,<542,37>,<555,5>)
```
 {

        if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }

        RowAction action = (RowAction) rowActionMap.get(id);

        if (action == null) {
            return true;
        }

        return action.canRead(session, mode);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(10390,284,<327,37>,<340,5>)
```
 {

        if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }

        RowAction action = (RowAction) rowActionMap.get(id);

        if (action == null) {
            return true;
        }

        return action.canRead(session, mode);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4747,232,<127,12>,<131,53>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9975,232,<267,12>,<271,53>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11321,232,<302,12>,<306,53>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(27762,225,<740,8>,<744,9>)
```
 assertEquals("Retrieved bye array length wrong",
            expectedBytes.length, ba.length);
        for (int i = 0; i < ba.length; i++) {
            assertEquals("Byte " + i + " wrong", expectedBytes[i], ba[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(29124,225,<776,8>,<780,9>)
```
 assertEquals("Retrieved bye array length wrong",
            expectedBytes.length, ba.length);
        for (int i = 0; i < ba.length; i++) {
            assertEquals("Byte " + i + " wrong", expectedBytes[i], ba[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(42987,253,<1131,8>,<1138,9>)
```
 checkGetParameterIndex(parameterIndex);

        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(44748,253,<1179,8>,<1186,9>)
```
 checkGetParameterIndex(parameterIndex);

        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(166727,253,<4261,8>,<4268,9>)
```
 checkGetParameterIndex(parameterIndex);

        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(64410,217,<1758,16>,<1762,17>)
```
 int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(65261,217,<1782,16>,<1786,17>)
```
 int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63379,454,<2199,56>,<2218,5>)
```
 {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63938,454,<2221,46>,<2240,5>)
```
 {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(20229,654,<667,12>,<684,62>)
```
 synchronized (committedTransactionTimestamps) {
                if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }

                commitTimestamp = committedTransactionTimestamps.getFirst();

                if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }
            }

            mergeTransaction(actions, 0, actions.length, commitTimestamp);
            finaliseRows(session, actions, 0, actions.length);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(13149,654,<437,12>,<454,62>)
```
 synchronized (committedTransactionTimestamps) {
                if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }

                commitTimestamp = committedTransactionTimestamps.getFirst();

                if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }
            }

            mergeTransaction(actions, 0, actions.length, commitTimestamp);
            finaliseRows(session, actions, 0, actions.length);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16372,451,<585,74>,<602,5>)
```
 {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16896,451,<604,71>,<621,5>)
```
 {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(48756,343,<1323,36>,<1335,13>)
```
 {
                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_INTEGER;

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(49140,343,<1336,40>,<1348,13>)
```
 {
                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_INTEGER;

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(55175,419,<1515,38>,<1526,17>)
```
 {
                    if (nodes[2].dataType == null) {
                        nodes[2].dataType = Type.SQL_NUMERIC;
                    }

                    if (!nodes[2].dataType.isNumberType()) {
                        throw Error.error(ErrorCode.X_42563);
                    }

                    nodes[2].dataType =
                        ((NumberType) nodes[2].dataType).getIntegralType();
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(62123,351,<1688,16>,<1697,71>)
```
 if (nodes[2].dataType == null) {
                    nodes[2].dataType = Type.SQL_NUMERIC;
                }

                if (!nodes[2].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                nodes[2].dataType =
                    ((NumberType) nodes[2].dataType).getIntegralType();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(19534,391,<641,16>,<651,37>)
```
 appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');

                return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(20133,391,<657,16>,<667,37>)
```
 appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');

                return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(21032,391,<681,16>,<691,37>)
```
 appendCondition(session, sb);

                for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\n');
                }

                appendParms(sb).append('\n');
                appendSubqueries(session, sb, 2).append(']');

                return sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(14403,391,<445,12>,<455,36>)
```
 try {
                InputStream fis =
                    getClass().getResourceAsStream(resourceFileName);

                fis    = getClass().getResourceAsStream(resourceFileName);
                reader = new InputStreamReader(fis, "ISO-8859-1");

                for (int i = 0; i < 100; i++) {
                    reader.read();
                }
            } catch (Exception e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(15290,406,<471,12>,<482,36>)
```
 //
            try {
                InputStream fis =
                    getClass().getResourceAsStream(resourceFileName);

                fis    = getClass().getResourceAsStream(resourceFileName);
                reader = new InputStreamReader(fis, "ISO-8859-1");

                for (int i = 0; i < 100; i++) {
                    reader.read();
                }
            } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62371,119,<1811,8>,<1816,23>)
```
 String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30462,119,<988,8>,<993,23>)
```
 String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(79478,385,<2060,16>,<2067,76>)
```
 Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
                int typeCode = IntervalType.getFieldNameTypeForToken(token);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(80572,385,<2090,16>,<2097,76>)
```
 Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
                int typeCode = IntervalType.getFieldNameTypeForToken(token);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(42621,184,<1440,16>,<1444,48>)
```
 a = convertToDefaultType(null, a);
                b = convertToDefaultType(null, b);

                BigDecimal abd = (BigDecimal) a;
                BigDecimal bbd = (BigDecimal) b;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/NumberType.java|(44139,184,<1488,16>,<1492,48>)
```
 a = convertToDefaultType(null, a);
                b = convertToDefaultType(null, b);

                BigDecimal abd = (BigDecimal) a;
                BigDecimal bbd = (BigDecimal) b;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(26788,420,<816,12>,<826,13>)
```
 int count = ntrans;

            while (count-- > 0) {
                int account = TestBench.getRandomID(ACCOUNT);
                int branch  = TestBench.getRandomID(BRANCH);
                int teller  = TestBench.getRandomID(TELLER);
                int delta   = TestBench.getRandomInt(-1000, 1000);

                doOne(branch, teller, account, delta);
                incrementTransactionCount();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(31312,420,<975,12>,<985,13>)
```
 int count = ntrans;

            while (count-- > 0) {
                int account = TestBench.getRandomID(ACCOUNT);
                int branch  = TestBench.getRandomID(BRANCH);
                int teller  = TestBench.getRandomID(TELLER);
                int delta   = TestBench.getRandomInt(-1000, 1000);

                doOne(branch, teller, account, delta);
                incrementTransactionCount();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(27056,501,<886,8>,<897,31>)
```
 Object[] data    = getLobHeader(aID);
        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

        data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29009,501,<954,8>,<965,31>)
```
 Object[] data    = getLobHeader(aID);
        long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

        data = getLobHeader(bID);

        long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
        int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);
        int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);
        int     aIndex     = 0;
        int     bIndex     = 0;
        int     aOffset    = 0;
        int     bOffset    = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(23497,456,<716,12>,<731,13>)
```
 rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }

            for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail("test failure");
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLobs.java|(25728,456,<793,12>,<808,13>)
```
 rs.next();

            Reader reader   = rs.getCharacterStream(1);
            char[] newChars = new char[testChars.length];

            try {
                reader.read(newChars);
            } catch (IOException e) {
                fail("test failure");
            }

            for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail("test failure");
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(3027,246,<82,12>,<89,31>)
```
 size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;
            size = cache.rowOut.getStorageSize(size);

            object.setStorageSize(size);

            long pos = tableSpace.getFilePosition(size, false);

            object.setPos(pos);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(5020,246,<161,12>,<168,31>)
```
 size += indexList.length * NodeAVLDisk.SIZE_IN_BYTE;
            size = cache.rowOut.getStorageSize(size);

            object.setStorageSize(size);

            long pos = tableSpace.getFilePosition(size, false);

            object.setPos(pos);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(20962,372,<672,12>,<683,9>)
```
 {
            Object[] data = getLobHeader(lobID);

            if (data == null) {
                throw Error.error(ErrorCode.X_0F502);
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();

            return ResultLob.newLobSetResponse(lobID, length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(35121,372,<1154,12>,<1165,9>)
```
 {
            Object[] data = getLobHeader(lobID);

            if (data == null) {
                throw Error.error(ErrorCode.X_0F502);
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();

            return ResultLob.newLobSetResponse(lobID, length);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62140,280,<1799,8>,<1813,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30231,280,<976,8>,<990,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(79368,418,<2056,16>,<2066,55>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(80462,418,<2086,16>,<2096,55>)
```
 if (data[0] == null || data[1] == null) {
                    return null;
                }

                Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);

                st = Type.SQL_VARCHAR.upper(session, st);
                st = Type.SQL_VARCHAR.convertToDefaultType(session, st);

                int token    = Tokens.get((String) st);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(8324,438,<306,40>,<324,5>)
```
 {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(7846,438,<290,40>,<308,5>)
```
 {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAShadowFile.java|(8682,215,<282,12>,<288,13>)
```
 if (fetchedSize == limitSize) {
                return -1;
            }

            if (limitSize >= 0 && limitSize - fetchedSize < length) {
                length = (int) (limitSize - fetchedSize);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InputStreamWrapper.java|(2691,195,<80,8>,<86,9>)
```
 if (fetchedSize == limitSize) {
            return -1;
        }

        if (limitSize >= 0 && limitSize - fetchedSize < length) {
            length = (int) (limitSize - fetchedSize);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(18887,2504,<472,8>,<539,9>)
```
 String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            currentArg = arg[i];
            lowerArg = arg[i].toLowerCase();

            if (lowerArg.startsWith("--")) {
                lowerArg = lowerArg.substring(1);
            }

            if (lowerArg.equals("-noexit") || lowerArg.equals("-help")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException("No value for argument "
                                                   + currentArg);
            }

            i++;

            if (lowerArg.equals("-driver")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-url")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-user")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-password")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-urlid")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-rcfile")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-dir")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals("-script")) {
                defScript = arg[i];
            } else if (lowerArg.equals("-noexit")) {
                bMustExit = false;

                i--;
            } else if (lowerArg.equals("-help")) {
                showUsage();

                return;
            } else {
                /* Syntax ERRORS should either throw or exit with non-0 status.
                 * In our case, it may be unsafe to exit, so we throw.
                 * (I.e. should provide easy way for caller to programmatically
                 * determine that there was an invocation problem).
                 */
                throw new IllegalArgumentException(
                    "invalid argrument " + currentArg + " try:  java... "
                    + DatabaseManagerSwing.class.getName() + " --help");

                // No reason to localize, since the main syntax message is
                // not localized.
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(8363,2506,<250,8>,<317,9>)
```
 String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            currentArg = arg[i];
            lowerArg   = arg[i].toLowerCase();

            if (lowerArg.startsWith("--")) {
                lowerArg = lowerArg.substring(1);
            }

            if (lowerArg.equals("-noexit") || lowerArg.equals("-help")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException("No value for argument "
                                                   + currentArg);
            }

            i++;

            if (lowerArg.equals("-driver")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-url")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-user")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-password")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals("-urlid")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-rcfile")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals("-dir")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals("-script")) {
                defScript = arg[i];
            } else if (lowerArg.equals("-noexit")) {
                bMustExit = false;

                i--;
            } else if (lowerArg.equals("-help")) {
                showUsage();

                return;
            } else {
                /* Syntax ERRORS should either throw or exit with non-0 status.
                 * In our case, it may be unsafe to exit, so we throw.
                 * (I.e. should provide easy way for caller to programmatically
                 * determine that there was an invocation problem).
                 */
                throw new IllegalArgumentException(
                    "invalid argrument " + currentArg + " try:  java... "
                    + DatabaseManagerSwing.class.getName() + " --help");

                // No reason to localize, since the main syntax message is
                // not localized.
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(28554,243,<609,16>,<613,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.CLOSEBRACKET
                };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(29308,243,<632,16>,<636,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.CLOSEBRACKET
                };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(28245,456,<920,12>,<940,13>)
```
 bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }

            if (bIndex == bAddresses.length) {
                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30990,456,<1010,12>,<1030,13>)
```
 bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }

            if (aIndex == aAddresses.length) {
                break;
            }

            if (bIndex == bAddresses.length) {
                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(15986,313,<507,12>,<512,72>)
```
 Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(16809,313,<532,12>,<537,72>)
```
 Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(7084,441,<172,12>,<181,9>)
```
 {
            Class c = Class.forName("sun.security.action.GetPropertyAction");
            Constructor constructor = c.getConstructor(new Class[]{
                String.class });
            java.security.PrivilegedAction a =
                (java.security.PrivilegedAction) constructor.newInstance(
                    new Object[]{ "user.home" });

            homedir = (String) java.security.AccessController.doPrivileged(a);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java|(10567,513,<315,16>,<326,13>)
```
 {
                Class c =
                    Class.forName("sun.security.action.GetPropertyAction");
                Constructor constructor = c.getConstructor(new Class[]{
                    String.class });
                java.security.PrivilegedAction a =
                    (java.security.PrivilegedAction) constructor.newInstance(
                        new Object[]{ "user.home" });

                homedir =
                    (String) java.security.AccessController.doPrivileged(a);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(21816,584,<766,50>,<788,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[colIndex[j]]);

            if (i != 0) {
                if (isSimpleOrder) {
                    return i;
                }

                boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;

                if (colDesc[j] && !nulls) {
                    i = -i;
                }

                if (nullsLast[j] && nulls) {
                    i = -i;
                }

                return i;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(23070,584,<811,54>,<833,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[colIndex[j]]);

            if (i != 0) {
                if (isSimpleOrder) {
                    return i;
                }

                boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;

                if (colDesc[j] && !nulls) {
                    i = -i;
                }

                if (nullsLast[j] && nulls) {
                    i = -i;
                }

                return i;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(12105,596,<433,16>,<453,74>)
```
 int type = TableBase.MEMORY_TABLE;

                switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }

                read();

                Object[] args = new Object[]{ ValuePool.getInt(type) };

                return new StatementCommand(
                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(20792,596,<728,16>,<748,74>)
```
 int type = TableBase.MEMORY_TABLE;

                switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }

                read();

                Object[] args = new Object[]{ ValuePool.getInt(type) };

                return new StatementCommand(
                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(16642,569,<591,16>,<610,17>)
```
 HsqlArrayList charsets = null;

                if (readIfThis(Tokens.FOR)) {
                    charsets = new HsqlArrayList();

                    while (true) {
                        SchemaObject charset =
                            readSchemaObjectName(SchemaObject.CHARSET);

                        charsets.add(charset);

                        if (token.tokenType == Tokens.COMMA) {
                            read();

                            continue;
                        }

                        break;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(17761,569,<628,16>,<647,17>)
```
 HsqlArrayList charsets = null;

                if (readIfThis(Tokens.FOR)) {
                    charsets = new HsqlArrayList();

                    while (true) {
                        SchemaObject charset =
                            readSchemaObjectName(SchemaObject.CHARSET);

                        charsets.add(charset);

                        if (token.tokenType == Tokens.COMMA) {
                            read();

                            continue;
                        }

                        break;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(50300,241,<1685,8>,<1695,9>)
```
 if (token.tokenType == Tokens.AND) {
            read();

            if (token.tokenType == Tokens.NO) {
                read();
            } else {
                chain = true;
            }

            readThis(Tokens.CHAIN);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(53247,273,<1800,12>,<1810,13>)
```
 if (token.tokenType == Tokens.AND) {
                read();

                if (token.tokenType == Tokens.NO) {
                    read();
                } else {
                    chain = true;
                }

                readThis(Tokens.CHAIN);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(18180,346,<621,50>,<633,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(17363,322,<592,12>,<602,13>)
```
 HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(166929,406,<4266,8>,<4278,55>)
```
 if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(81128,406,<1924,8>,<1936,55>)
```
 if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(7177,299,<170,8>,<175,47>)
```
 System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
        System.out.println("Number of clients: " + n_clients);
        System.out.println("Number of transactions per client: "
                           + n_txn_per_client);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(6349,299,<162,8>,<167,47>)
```
 System.out.println("URL:" + DBUrl);
        System.out.println();
        System.out.println("Scale factor value: " + tps);
        System.out.println("Number of clients: " + n_clients);
        System.out.println("Number of transactions per client: "
                           + n_txn_per_client);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10347,759,<279,8>,<302,9>)
```
 for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowOutputText.java|(3358,523,<87,8>,<101,9>)
```
 //-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith("\n")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith("\n")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith("\n")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(3507,523,<97,8>,<111,9>)
```
 //-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith("\n")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith("\n")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith("\n")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(8603,379,<320,8>,<332,30>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9139,379,<343,8>,<355,30>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9878,379,<373,8>,<385,30>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(20115,201,<704,45>,<711,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[rowColMap[j]]);

            if (i != 0) {
                return i;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(20535,201,<719,45>,<726,9>)
```
 {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[rowColMap[j]]);

            if (i != 0) {
                return i;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(43284,230,<1040,8>,<1047,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(80949,230,<1919,8>,<1926,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(186423,230,<4411,8>,<4418,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(188744,230,<4473,8>,<4480,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(319467,250,<7616,12>,<7623,13>)
```
 checkColumn(columnIndex);

            Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
            Object o          = getColumnInType(columnIndex, sourceType);

            if (o == null) {
                return null;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(320050,250,<7636,12>,<7643,13>)
```
 checkColumn(columnIndex);

            Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
            Object o          = getColumnInType(columnIndex, sourceType);

            if (o == null) {
                return null;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(25573,1219,<701,8>,<725,51>)
```
 st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNullInUnion.java|(2354,1219,<56,8>,<80,51>)
```
 st.execute("INSERT INTO t1 values(2,2,2)");
        st.execute("INSERT INTO t2 values(1,3,3)");

        ResultSet rs = st.executeQuery(
            "select t as atable, a as idvalue, b as value1, c as value2, d as value3 from("
            + "(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union"
            + "(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue");

        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(1, rs.getInt("value1"));
        assertEquals(1, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t1", rs.getObject("atable"));
        assertEquals(2, rs.getInt("idvalue"));
        assertEquals(2, rs.getInt("value1"));
        assertEquals(2, rs.getInt("value2"));
        assertEquals(null, rs.getObject("value3"));
        assertTrue(rs.next());
        assertEquals("t2", rs.getObject("atable"));
        assertEquals(1, rs.getInt("idvalue"));
        assertEquals(3, rs.getInt("value1"));
        assertEquals(null, rs.getObject("value2"));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(5448,609,<193,8>,<211,9>)
```
 sb.append(Tokens.T_WITH).append(' ');
        sb.append(startValue);

        if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }

        if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }

        if (isCycle()) {
            sb.append(' ').append(Tokens.T_CYCLE);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(6755,669,<238,12>,<256,13>)
```
 sb.append(Tokens.T_WITH).append(' ');
            sb.append(startValue);

            if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }

            if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }

            if (isCycle()) {
                sb.append(' ').append(Tokens.T_CYCLE);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(18811,368,<523,12>,<538,43>)
```
 Query = "DELETE FROM history";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM branches";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(18553,368,<560,12>,<575,43>)
```
 Query = "DELETE FROM history";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM accounts";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM tellers";

            Stmt.execute(Query);
            Stmt.clearWarnings();

            Query = "DELETE FROM branches";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStressInsert.java|(5229,193,<159,12>,<165,13>)
```
 if (i % 100 == 0) {
                long t3 = System.currentTimeMillis();

                System.out.println("inserted " + i + ", 100 in " + (t3 - t2));

                t2 = t3;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStressInsert.java|(5835,193,<182,12>,<188,13>)
```
 if (i % 100 == 0) {
                long t3 = System.currentTimeMillis();

                System.out.println("inserted " + i + ", 100 in " + (t3 - t2));

                t2 = t3;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(39953,367,<1377,12>,<1391,13>)
```
 if (x == null) {
                return x;
            }

            if (session == null) {
                return x;
            }

            Row row = x.getRow(store);

            if (session.database.txManager.canRead(
                    session, store, row, TransactionManager.ACTION_READ,
                    null)) {
                return x;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(40696,367,<1409,12>,<1423,13>)
```
 if (x == null) {
                return x;
            }

            if (session == null) {
                return x;
            }

            Row row = x.getRow(store);

            if (session.database.txManager.canRead(
                    session, store, row, TransactionManager.ACTION_READ,
                    null)) {
                return x;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(11129,265,<484,8>,<493,31>)
```
 int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(13060,265,<559,8>,<568,31>)
```
 int innermask = 0xff >> shift;
        int index     = pos / 8;

        if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }

        mask      &= innermask;
        innermask = ~innermask;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDatetimeSimple.java|(3076,201,<83,8>,<89,9>)
```
 pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));

        set = pstmt.executeQuery();

        if (set.next()) {
            System.out.println("pstmt res=" + set.getInt(1));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDatetimeSimple.java|(3420,201,<94,8>,<100,9>)
```
 pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));

        set = pstmt.executeQuery();

        if (set.next()) {
            System.out.println("pstmt res=" + set.getInt(1));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(6992,250,<166,8>,<171,29>)
```
 System.out.println(
            "*********************************************************");
        System.out.println();
        System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(6164,250,<158,8>,<163,29>)
```
 System.out.println(
            "*********************************************************");
        System.out.println();
        System.out.println("Driver: " + DriverName);
        System.out.println("URL:" + DBUrl);
        System.out.println();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(44084,549,<1567,12>,<1587,18>)
```
 if (c == null) {
                break;
            }

            nodeData = c.getData(store);

            if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }

            break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(44728,549,<1593,12>,<1613,18>)
```
 if (c == null) {
                break;
            }

            nodeData = c.getData(store);

            if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }

            break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(21554,331,<761,50>,<773,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(20895,307,<736,12>,<746,13>)
```
 HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(23234,296,<562,8>,<572,46>)
```
 types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
        meta.colIndexes   = new int[] {
            -1, -1
        };
        meta.columns      = new ColumnBase[2];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(21945,296,<519,8>,<529,46>)
```
 types[1] = elementType;

        ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);

        meta.columnLabels = new String[] {
            "C1", "C2"
        };
        meta.colIndexes   = new int[] {
            -1, -1
        };
        meta.columns      = new ColumnBase[2];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(73384,507,<2480,12>,<2496,13>)
```
 while (true) {
                Iterator it = unresolved.iterator();

                if (!it.hasNext()) {
                    break;
                }

                OrderedHashSet newResolved = new OrderedHashSet();

                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,
                                          newResolved);
                unresolved.removeAll(newResolved);

                if (newResolved.size() == 0) {
                    break;
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(74397,507,<2514,12>,<2530,13>)
```
 while (true) {
                Iterator it = unresolved.iterator();

                if (!it.hasNext()) {
                    break;
                }

                OrderedHashSet newResolved = new OrderedHashSet();

                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,
                                          newResolved);
                unresolved.removeAll(newResolved);

                if (newResolved.size() == 0) {
                    break;
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(43234,200,<1433,8>,<1437,40>)
```
 c.core.uniqueName = uniqueConstraint.getName();
        c.core.mainName   = mainName;
        c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(8379,200,<221,8>,<225,40>)
```
 c.core.uniqueName = uniqueConstraint.getName();
        c.core.mainName   = mainName;
        c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(6430,309,<154,12>,<158,77>)
```
 System.out.println();
            System.out.println("-v          verbose error messages");
            System.out.println("-init       initialize the tables");
            System.out.println("-tpc        transactions per client");
            System.out.println("-clients    number of simultaneous clients");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(5602,309,<146,12>,<150,77>)
```
 System.out.println();
            System.out.println("-v          verbose error messages");
            System.out.println("-init       initialize the tables");
            System.out.println("-tpc        transactions per client");
            System.out.println("-clients    number of simultaneous clients");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(21574,666,<756,16>,<778,17>)
```
 int delay = 0;

                if (token.tokenType == Tokens.TRUE) {
                    delay = database.getProperties().getDefaultWriteDelay();

                    read();
                } else if (token.tokenType == Tokens.FALSE) {
                    delay = 0;

                    read();
                } else {
                    delay = this.readInteger();

                    if (delay < 0) {
                        delay = 0;
                    }

                    if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(45685,666,<1514,16>,<1536,17>)
```
 int delay = 0;

                if (token.tokenType == Tokens.TRUE) {
                    delay = database.getProperties().getDefaultWriteDelay();

                    read();
                } else if (token.tokenType == Tokens.FALSE) {
                    delay = 0;

                    read();
                } else {
                    delay = this.readInteger();

                    if (delay < 0) {
                        delay = 0;
                    }

                    if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(14467,554,<612,8>,<624,9>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];

        if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BitMap.java|(15212,554,<635,8>,<647,9>)
```
 int    length      = a.length > b.length ? a.length
                                                 : b.length;
        int    shortLength = a.length > b.length ? b.length
                                                 : a.length;
        byte[] map         = new byte[length];

        if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(22114,406,<638,44>,<659,5>)
```
 {

        int min = 0,
            max = 0;

        switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }

        return (getRandomInt(min, max));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(23508,406,<730,44>,<751,5>)
```
 {

        int min = 0,
            max = 0;

        switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }

        return (getRandomInt(min, max));
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(7815,231,<288,8>,<294,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(8603,231,<320,8>,<326,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9139,231,<343,8>,<349,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9878,231,<373,8>,<379,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(10952,231,<420,8>,<426,9>)
```
 NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(14450,413,<411,8>,<421,9>)
```
 Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = fMain.getSize();

        // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(15881,413,<476,8>,<486,9>)
```
 Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = fMain.getSize();

        // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(21900,487,<658,42>,<667,21>)
```
 {
                        TimeData ti = (TimeData) a;
                        long seconds = session.getCurrentDate().getSeconds()
                                       + ti.getSeconds()
                                       - session.getZoneSeconds();

                        return new TimestampData(seconds,
                                                 scaleNanos(ti.getNanos()),
                                                 session.getZoneSeconds());
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(23508,487,<692,57>,<701,21>)
```
 {
                        TimeData ti = (TimeData) a;
                        long seconds = session.getCurrentDate().getSeconds()
                                       + ti.getSeconds()
                                       - session.getZoneSeconds();

                        return new TimestampData(seconds,
                                                 scaleNanos(ti.getNanos()),
                                                 session.getZoneSeconds());
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(11403,414,<376,8>,<387,42>)
```
 if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }

        String        currentLine  = "";
        String        Token        = "";
        String        name         = "";
        TransferTable relatedTable = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(13846,414,<443,8>,<454,42>)
```
 if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }

        String        currentLine  = "";
        String        Token        = "";
        String        name         = "";
        TransferTable relatedTable = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(32069,358,<1004,12>,<1014,34>)
```
 Statement statement = compileSQLProcedureStatementOrNull(routine,
                null);

            if (statement == null) {
                throw unexpectedToken();
            }

            Token[] tokenisedStatement = getRecordedStatement();
            String  sql                = Token.getSQL(tokenisedStatement);

            statement.setSQL(sql);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(75218,330,<2412,8>,<2422,30>)
```
 Statement statement = compileSQLProcedureStatementOrNull(routine,
            null);

        if (statement == null) {
            throw unexpectedToken();
        }

        Token[] tokenisedStatement = getRecordedStatement();
        String  sql                = Token.getSQL(tokenisedStatement);

        statement.setSQL(sql);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(31075,593,<791,28>,<802,77>)
```
 // table ID  [relid]:
                            outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,
                                    md));

                            // column id  [attid]
                            outPacket.writeShort(OdbcUtil.getIdForColumn(i,
                                    md));
                            outPacket.writeInt(pgTypes[i].getOid());

                            // Datatype size  [adtsize]
                            outPacket.writeShort(pgTypes[i].getTypeWidth());
                            outPacket.writeInt(pgTypes[i].getLPConstraint());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(47320,525,<1152,24>,<1162,73>)
```
 // table ID  [relid]:
                        outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,
                                md));

                        // column id  [attid]
                        outPacket.writeShort(OdbcUtil.getIdForColumn(i, md));
                        outPacket.writeInt(pgTypes[i].getOid());

                        // Datatype size  [adtsize]
                        outPacket.writeShort(pgTypes[i].getTypeWidth());
                        outPacket.writeInt(pgTypes[i].getLPConstraint());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(4591,279,<118,34>,<132,5>)
```
 {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BitType.java|(3252,279,<93,34>,<107,5>)
```
 {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(5031,279,<165,34>,<179,5>)
```
 {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(12707,239,<426,16>,<434,37>)
```
 char[] b = new char[(int) precision];

                ((String) a).getChars(0, slen, b, 0);

                for (int i = slen; i < precision; i++) {
                    b[i] = ' ';
                }

                return new String(b);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(20421,239,<670,16>,<678,37>)
```
 char[] b = new char[(int) precision];

                ((String) a).getChars(0, slen, b, 0);

                for (int i = slen; i < precision; i++) {
                    b[i] = ' ';
                }

                return new String(b);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(4051,200,<130,8>,<137,68>)
```
 pstmt = conn.prepareStatement(sql);
        rs    = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(4879,216,<160,8>,<167,68>)
```
 pstmt         = conn.prepareStatement(sql);
        rs            = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(5726,216,<192,8>,<199,68>)
```
 pstmt         = conn.prepareStatement(sql);
        rs            = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(6222,216,<209,8>,<216,68>)
```
 pstmt         = conn.prepareStatement(sql);
        rs            = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(6725,216,<226,8>,<233,68>)
```
 pstmt         = conn.prepareStatement(sql);
        rs            = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(7164,216,<242,8>,<249,68>)
```
 pstmt         = conn.prepareStatement(sql);
        rs            = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(152144,549,<4841,12>,<4859,13>)
```
 /** @todo - implement */
            if (token.tokenType == Tokens.GRANTED) {
                read();
                readThis(Tokens.BY);

                if (token.tokenType == Tokens.CURRENT_USER) {
                    read();

                    //
                } else {
                    readThis(Tokens.CURRENT_ROLE);

                    if (session.getRole() == null) {
                        throw Error.error(ErrorCode.X_0P000);
                    }

                    grantor = session.getRole();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(154859,460,<4944,8>,<4961,9>)
```
 if (token.tokenType == Tokens.GRANTED) {
            read();
            readThis(Tokens.BY);

            if (token.tokenType == Tokens.CURRENT_USER) {
                read();

                //
            } else {
                readThis(Tokens.CURRENT_ROLE);

                if (session.getRole() == null) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                grantor = session.getRole();
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(178840,175,<4358,40>,<4364,9>)
```
 {
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(181039,175,<4430,45>,<4436,9>)
```
 {
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(178648,151,<4353,12>,<4357,19>)
```
 parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(180784,209,<4424,12>,<4429,19>)
```
 // in the same database ? see if it blocks in
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59391,212,<1942,12>,<1948,13>)
```
 list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(60720,212,<1989,12>,<1995,13>)
```
 list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(10332,286,<378,8>,<388,9>)
```
 removeDuplicates(session);
        other.sortFull(session);

        while (hasNext()) {
            Object[] currentData = getNext();
            boolean  hasRow      = other.containsRow(currentData);

            if (!hasRow) {
                removeCurrent();
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(9325,286,<368,8>,<378,9>)
```
 removeDuplicates(session);
        other.sortFull(session);

        while (hasNext()) {
            Object[] currentData = getNext();
            boolean  hasRow      = other.containsRow(currentData);

            if (!hasRow) {
                removeCurrent();
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(31248,725,<795,28>,<808,52>)
```
 // column id  [attid]
                            outPacket.writeShort(OdbcUtil.getIdForColumn(i,
                                    md));
                            outPacket.writeInt(pgTypes[i].getOid());

                            // Datatype size  [adtsize]
                            outPacket.writeShort(pgTypes[i].getTypeWidth());
                            outPacket.writeInt(pgTypes[i].getLPConstraint());

                            // Var size [atttypmod]
                            // This is the size constraint integer
                            // like VARCHAR(12) or DECIMAL(4).
                            // -1 if none specified for this column.
                            outPacket.writeShort(0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(47481,649,<1156,24>,<1168,48>)
```
 // column id  [attid]
                        outPacket.writeShort(OdbcUtil.getIdForColumn(i, md));
                        outPacket.writeInt(pgTypes[i].getOid());

                        // Datatype size  [adtsize]
                        outPacket.writeShort(pgTypes[i].getTypeWidth());
                        outPacket.writeInt(pgTypes[i].getLPConstraint());

                        // Var size [atttypmod]
                        // This is the size constraint integer
                        // like VARCHAR(12) or DECIMAL(4).
                        // -1 if none specified for this column.
                        outPacket.writeShort(0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59683,238,<1954,8>,<1963,22>)
```
 statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);

        result.setStatements(statements);

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(61014,238,<2001,8>,<2010,22>)
```
 statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);

        result.setStatements(statements);

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(14628,319,<540,8>,<557,9>)
```
 if (size == 0) {
            return;
        }

        if (limitstart >= size) {
            clear();

            return;
        }

        if (limitstart != 0) {
            reset();

            for (int i = 0; i < limitstart; i++) {
                next();
                removeCurrent();
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(13785,319,<540,8>,<557,9>)
```
 if (size == 0) {
            return;
        }

        if (limitstart >= size) {
            clear();

            return;
        }

        if (limitstart != 0) {
            reset();

            for (int i = 0; i < limitstart; i++) {
                next();
                removeCurrent();
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(12690,452,<388,8>,<401,40>)
```
 if (exprList.size() > 1) {
            throw Error.parseError(ErrorCode.X_42602, null,
                                   scanner.getLineNumber());
        }

        Expression expression = (Expression) exprList.get(0);

        if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(14762,452,<449,8>,<462,40>)
```
 if (exprList.size() > 1) {
            throw Error.parseError(ErrorCode.X_42602, null,
                                   scanner.getLineNumber());
        }

        Expression expression = (Expression) exprList.get(0);

        if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }

        int[] columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(8735,363,<312,62>,<328,5>)
```
 {

        reset();
        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }

        reset();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(7667,363,<296,62>,<312,5>)
```
 {

        reset();
        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }

        reset();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(58863,247,<1925,12>,<1932,13>)
```
 list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(62725,247,<2054,12>,<2061,13>)
```
 list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(63801,247,<2090,12>,<2097,13>)
```
 list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(23656,309,<806,8>,<812,33>)
```
 Object[] args = new Object[] {
            object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),
            Boolean.valueOf(cascade), Boolean.valueOf(false)
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(25012,315,<846,8>,<852,33>)
```
 Object[]     args   = new Object[] {
            object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),
            Boolean.valueOf(cascade), Boolean.valueOf(false)
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongValueHashMap.java|(2248,239,<61,8>,<70,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return longValueTable[lookup];
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongValueHashMap.java|(2601,239,<77,8>,<86,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return longValueTable[lookup];
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(80376,337,<2568,20>,<2579,40>)
```
 read();

                    if (token.tokenType == Tokens.BY) {
                        read();
                        readThis(Tokens.DEFAULT);
                    } else {
                        readThis(Tokens.ALWAYS);

                        generatedAlways = true;
                    }

                    readThis(Tokens.AS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(83975,273,<2674,12>,<2685,32>)
```
 read();

            if (token.tokenType == Tokens.BY) {
                read();
                readThis(Tokens.DEFAULT);
            } else {
                readThis(Tokens.ALWAYS);

                generatedAlways = true;
            }

            readThis(Tokens.AS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9638,719,<258,12>,<275,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10984,719,<293,12>,<310,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(12807,827,<423,8>,<450,9>)
```
 lookup = hashIndex.linkNode(index, lastLookup);

        // type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }

        if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(19484,827,<618,8>,<645,9>)
```
 lookup = hashIndex.linkNode(index, lastLookup);

        // type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }

        if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java|(5623,259,<172,8>,<183,9>)
```
 ps  = conn1.prepareStatement(sql);

        ps.setString(2, "Mary");
        ps.setString(3, "Peterson-Clancy");

        i = 0;

        for (; i < 10; i++) {
            ps.setInt(1, i);
            ps.setInt(4, i);
            ps.executeUpdate();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java|(16905,259,<508,8>,<519,9>)
```
 ps  = conn1.prepareStatement(sql);

        ps.setString(2, "Mary");
        ps.setString(3, "Peterson-Clancy");

        i = 0;

        for (; i < 10; i++) {
            ps.setInt(1, i);
            ps.setInt(4, i);
            ps.executeUpdate();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAccessor.java|(2402,336,<63,88>,<75,5>)
```
 {

        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);
        }

        return unresolvedSet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(28971,403,<1047,16>,<1057,37>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i] == null) {
                        continue;
                    }

                    unresolvedSet = nodes[i].resolveColumnReferences(session,
                            rangeGroup, rangeCount, rangeGroups,
                            unresolvedSet, acceptsSequences);
                }

                return unresolvedSet;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(11774,339,<358,8>,<368,29>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,
                    acceptsSequences);
        }

        return unresolvedSet;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(7269,339,<240,8>,<250,29>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,
                    acceptsSequences);
        }

        return unresolvedSet;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(23397,216,<709,8>,<713,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(24720,216,<749,8>,<753,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(26207,216,<791,8>,<795,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(27883,216,<837,8>,<841,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(29334,216,<879,8>,<883,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(31042,216,<930,8>,<934,39>)
```
 java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
        int              random    = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(24473,887,<660,56>,<699,5>)
```
 {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(21865,887,<549,56>,<588,5>)
```
 {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestViewAsterisks.java|(22450,327,<539,12>,<549,9>)
```
 new Object[][] {
            new Object[] {
                new Integer(1), "first A"
            }, new Object[] {
                new Integer(1), "first B"
            }, new Object[] {
                new Integer(2), "second A"
            }, new Object[] {
                new Integer(2), "second B"
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestViewAsterisks.java|(23123,327,<554,12>,<564,9>)
```
 new Object[][] {
            new Object[] {
                new Integer(1), "first A"
            }, new Object[] {
                new Integer(1), "first B"
            }, new Object[] {
                new Integer(2), "second A"
            }, new Object[] {
                new Integer(2), "second B"
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(131198,1227,<3541,12>,<3560,68>)
```
 addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157436,1227,<4268,12>,<4287,68>)
```
 addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2669,522,<72,12>,<86,58>)
```
 String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);

            ResultSet rs = statement.executeQuery(select);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4210,522,<129,12>,<143,58>)
```
 String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);

            ResultSet rs = statement.executeQuery(select);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(11290,187,<301,12>,<305,69>)
```
 rs = sStatement.getResultSet();

            rs.next();
            System.out.println("Row Count: " + rs.getInt(1));
            System.out.println("Time to count: " + sw.elapsedTime());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(11623,187,<311,12>,<315,69>)
```
 rs = sStatement.getResultSet();

            rs.next();
            System.out.println("Row Count: " + rs.getInt(1));
            System.out.println("Time to count: " + sw.elapsedTime());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java|(19405,677,<544,16>,<560,50>)
```
 // test for the value MAX(column) in an empty table
                stmnt.execute(
                    "CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");

                rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");

                if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println("Max value for ID: " + max);
                } else {
                    System.out.println("Max value for ID not returned");
                }

                stmnt.executeUpdate(
                    "INSERT INTO cdType VALUES (10,'Test String');");
                stmnt.execute("CALL IDENTITY();");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(18272,677,<469,16>,<485,50>)
```
 // test for the value MAX(column) in an empty table
                stmnt.execute(
                    "CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))");

                rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType");

                if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println("Max value for ID: " + max);
                } else {
                    System.out.println("Max value for ID not returned");
                }

                stmnt.executeUpdate(
                    "INSERT INTO cdType VALUES (10,'Test String');");
                stmnt.execute("CALL IDENTITY();");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2479,606,<68,12>,<82,13>)
```
 statement.execute(
                "create table t1 (i int primary key, c varchar(10), t varbinary(3))");

            String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4020,606,<125,12>,<139,13>)
```
 statement.execute(
                "create table t1 (i int primary key, c varchar(10), t varbinary(3))");

            String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)
```
 {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2914,<3440,12>,<3498,53>)
```
 // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
            row[declared_data_type] = row[data_type];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191089,332,<5112,16>,<5118,71>)
```
 row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203971,330,<5476,16>,<5480,71>)
```
 row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211707,330,<5700,16>,<5704,71>)
```
 row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(58754,208,<1830,12>,<1833,30>)
```
 printError("Database [index=" + i + ", db=" + dbType[i]
                       + dbPath[i] + ", alias=" + dbAlias[i]
                       + "] did not open: " + e.toString());
            setServerError(e);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(60252,220,<1882,16>,<1885,34>)
```
 printError("Database [index=" + i + ", db=" + dbType[i]
                           + dbPath[i] + ", alias=" + dbAlias[i]
                           + "] did not open: " + e.toString());
                setServerError(e);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(5379,336,<183,54>,<194,5>)
```
 {

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementProcedure.java|(11726,371,<377,15>,<387,9>)
```
 {
            for (int i = 0; i < subqueries.length; i++) {
                if (subqueries[i].queryExpression != null) {
                    subqueries[i].queryExpression.getBaseTableNames(set);
                }
            }

            for (int i = 0; i < routines.length; i++) {
                set.addAll(routines[i].getTableNamesForRead());
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementQuery.java|(3331,319,<94,8>,<102,9>)
```
 for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10787,319,<294,8>,<302,9>)
```
 for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10861,319,<344,8>,<352,9>)
```
 for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(3578,237,<105,12>,<115,32>)
```
 connection.rollback();

            rs = statement.executeQuery(select);

            while (rs.next()) {
                String s = rs.getString(2);

                System.out.println(s);
            }

            connection.commit();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(5040,237,<159,12>,<169,32>)
```
 connection.rollback();

            rs = statement.executeQuery(select);

            while (rs.next()) {
                String s = rs.getString(2);

                System.out.println(s);
            }

            connection.commit();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2728,158,<78,52>,<86,5>)
```
 {

        int count = 0;

        tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(3067,153,<94,12>,<99,40>)
```
 int count = 0;

            tempBuffer[count++] = (byte) (v >>> 8);
            tempBuffer[count++] = (byte) v;

            write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(3492,153,<111,12>,<116,40>)
```
 int count = 0;

            tempBuffer[count++] = (byte) (v >>> 8);
            tempBuffer[count++] = (byte) v;

            write(tempBuffer, 0, count);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(166039,259,<4450,20>,<4454,21>)
```
 if (type.isDistinctType()) {
                        row[udt_catalog] = database.getCatalogName().name;
                        row[udt_schema]  = type.getSchemaName().name;
                        row[udt_name]    = type.getName().name;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23933,226,<690,16>,<693,56>)
```
 row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
                row[name]        = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(24565,198,<706,12>,<709,48>)
```
 row          = t.getEmptyRowData();
            row[catalog] = database.getCatalogName().name;
            row[schema]  = table.getSchemaName().name;
            row[name]    = table.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212188,292,<5707,16>,<5713,44>)
```
 row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(270871,289,<7173,16>,<7179,44>)
```
 row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.schema.name;
                row[table_name]      = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(317132,283,<8354,16>,<8360,44>)
```
 row[table_catalog] = database.getCatalogName().name;
                row[table_schema]  = refName.schema.name;
                row[table_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(2598,533,<71,12>,<84,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(4139,533,<128,12>,<141,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java|(7158,533,<223,12>,<236,44>)
```
 String            insert = "insert into t1 values(?,?,?)";
            String            select = "select i, c, t from t1";
            PreparedStatement ps     = connection.prepareStatement(insert);

            for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + " s");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }

            connection.setAutoCommit(false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137384,339,<3709,16>,<3713,60>)
```
 row                             = t.getEmptyRowData();
                row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(138540,339,<3740,16>,<3744,60>)
```
 row                             = t.getEmptyRowData();
                row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84150,281,<2384,16>,<2389,49>)
```
 row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(88000,277,<2502,16>,<2507,49>)
```
 row[table_catalog] = database.getCatalogName().name;
                row[table_schema]  = tableName.schema.name;
                row[table_name]    = tableName.name;
                row[column_name]   = column.getNameString();

                t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobType.java|(3427,207,<99,8>,<107,9>)
```
 StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(factor);

        if (multiplier != null) {
            sb.append(multiplier);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobType.java|(3435,207,<98,8>,<106,9>)
```
 StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(factor);

        if (multiplier != null) {
            sb.append(multiplier);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionData.java|(7749,215,<230,8>,<235,9>)
```
 Result          result = (Result) resultMap.get(id);
        RowSetNavigator source = result.getNavigator();

        if (offset + count > source.getSize()) {
            count = source.getSize() - offset;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionData.java|(8241,215,<249,8>,<254,9>)
```
 Result          result = (Result) resultMap.get(id);
        RowSetNavigator source = result.getNavigator();

        if (offset + count > source.getSize()) {
            count = source.getSize() - offset;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(4518,303,<118,78>,<128,3>)
```
 {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(10189,303,<267,81>,<277,3>)
```
 {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(39999,634,<1149,16>,<1169,17>)
```
 HsqlArrayList list = new HsqlArrayList();

                readThis(Tokens.OPENBRACKET);

                if (token.tokenType == Tokens.CLOSEBRACKET) {
                    read();
                } else {
                    while (true) {
                        Expression e = XreadValueExpression();

                        list.add(e);

                        if (token.tokenType == Tokens.COMMA) {
                            read();
                        } else {
                            readThis(Tokens.CLOSEBRACKET);

                            break;
                        }
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(144992,514,<5232,8>,<5252,9>)
```
 HsqlArrayList list = new HsqlArrayList();

        readThis(Tokens.OPENBRACKET);

        if (token.tokenType == Tokens.CLOSEBRACKET) {
            read();
        } else {
            while (true) {
                Expression e = XreadValueExpression();

                list.add(e);

                if (token.tokenType == Tokens.COMMA) {
                    read();
                } else {
                    readThis(Tokens.CLOSEBRACKET);

                    break;
                }
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(16939,405,<557,53>,<567,13>)
```
 {
                if (action.type == ACTION_DELETE) {
                    if (actionType == ACTION_INSERT) {
                        actionType = ACTION_INSERT_DELETE;
                    } else {
                        actionType = action.type;
                    }
                } else if (action.type == ACTION_INSERT) {
                    actionType = action.type;
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(17806,405,<589,64>,<599,13>)
```
 {
                if (action.type == ACTION_DELETE) {
                    if (actionType == ACTION_INSERT) {
                        actionType = ACTION_INSERT_DELETE;
                    } else {
                        actionType = action.type;
                    }
                } else if (action.type == ACTION_INSERT) {
                    actionType = action.type;
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(25467,285,<685,20>,<688,79>)
```
 HsqlName name       = (HsqlName) arguments[0];
                    int      objectType = ((Integer) arguments[1]).intValue();
                    boolean  cascade = ((Boolean) arguments[2]).booleanValue();
                    boolean ifExists = ((Boolean) arguments[3]).booleanValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(27444,285,<729,20>,<732,79>)
```
 HsqlName name       = (HsqlName) arguments[0];
                    int      objectType = ((Integer) arguments[1]).intValue();
                    boolean  cascade = ((Boolean) arguments[2]).booleanValue();
                    boolean ifExists = ((Boolean) arguments[3]).booleanValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(2457,348,<62,12>,<68,13>)
```
 byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);
            int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(3606,348,<94,12>,<100,13>)
```
 byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);
            int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(309355,226,<7283,8>,<7292,9>)
```
 Object   value;

        checkColumn(columnIndex);

        sourceType = resultMetaData.columnTypes[--columnIndex];
        value      = rowData[columnIndex];

        if (trackNull(value)) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(318170,250,<7574,12>,<7583,13>)
```
 Object   value;

            checkColumn(columnIndex);

            sourceType = resultMetaData.columnTypes[--columnIndex];
            value      = rowData[columnIndex];

            if (trackNull(value)) {
                return null;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(6541,267,<247,33>,<258,5>)
```
 {

        if (currentPos < 0 || currentPos >= size) {
            return null;
        }

        if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }

        return table[currentPos - currentOffset];
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(3583,267,<111,33>,<122,5>)
```
 {

        if (currentPos < 0 || currentPos >= size) {
            return null;
        }

        if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }

        return table[currentPos - currentOffset];
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(32700,329,<905,20>,<917,59>)
```
 Table      t = c.getMain();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(28261,265,<950,12>,<962,51>)
```
 Table      t = c.getMain();

            if (t != table) {
                tableSet.add(t);
            }

            t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java|(4731,268,<164,8>,<170,9>)
```
 if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {
            throw new java.lang.IllegalArgumentException();
        }

        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {
            throw new java.lang.IllegalArgumentException();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DoubleIntIndex.java|(7920,268,<299,8>,<305,9>)
```
 if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {
            throw new java.lang.IllegalArgumentException();
        }

        if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {
            throw new java.lang.IllegalArgumentException();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(8712,277,<246,12>,<254,37>)
```
 sw.zero();

            sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

//            sStatement.execute("SET WRITE_DELAY " + writeDelay);
            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(6578,210,<169,12>,<176,37>)
```
 sw.zero();

            sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(26286,316,<648,12>,<652,76>)
```
 addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115906,559,<2802,12>,<2810,76>)
```
 addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(89188,718,<2151,16>,<2167,52>)
```
 row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
                row[ilength]    = len;
                row[iscale]     = scale;
                row[iradix]     = radix;
                row[inullable]  = nullability;
                row[iremark]    = remark;

                // JDBC 4.0
                row[icol_default]      = colDefault;
                row[isql_data_type]    = sqlDataType;
                row[isql_datetime_sub] = sqlDateTimeSub;
                row[ichar_octet_len]   = charOctetLength;
                row[iordinal_position] = ordinalPosition;
                row[iis_nullable]      = isNullable;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88108,598,<2120,8>,<2136,44>)
```
 row[icol_type]  = cType;
        row[idata_type] = dType;
        row[itype_name] = tName;
        row[iprec]      = prec;
        row[ilength]    = len;
        row[iscale]     = scale;
        row[iradix]     = radix;
        row[inullable]  = nullability;
        row[iremark]    = remark;

        // JDBC 4.0
        row[icol_default]      = colDefault;
        row[isql_data_type]    = sqlDataType;
        row[isql_datetime_sub] = sqlDateTimeSub;
        row[ichar_octet_len]   = charOctetLength;
        row[iordinal_position] = ordinalPosition;
        row[iis_nullable]      = isNullable;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129312,757,<3143,8>,<3158,50>)
```
 //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133777,757,<3248,8>,<3263,50>)
```
 //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(30137,417,<754,16>,<763,58>)
```
 if (translateTTI) {
                    if (type.isIntervalType()) {
                        type = ((IntervalType) type).getCharacterType();
                    } else if (type.isDateTimeTypeWithZone()) {
                        type = ((DateTimeType) type)
                            .getDateTimeTypeWithoutZone();
                    }
                }

                row                 = t.getEmptyRowData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(38821,401,<949,16>,<958,42>)
```
 if (translateTTI) {
                    if (type.isIntervalType()) {
                        type = ((IntervalType) type).getCharacterType();
                    } else if (type.isDateTimeTypeWithZone()) {
                        type = ((DateTimeType) type)
                            .getDateTimeTypeWithoutZone();
                    }
                }

                row = t.getEmptyRowData();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(106363,356,<2573,12>,<2581,50>)
```
 if (translateTTI) {
                if (type.isIntervalType()) {
                    type = ((IntervalType) type).getCharacterType();
                } else if (type.isDateTimeTypeWithZone()) {
                    type = ((DateTimeType) type).getDateTimeTypeWithoutZone();
                }
            }

            row             = t.getEmptyRowData();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(4027,418,<132,43>,<151,5>)
```
 {

        Result result;

        try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(9116,418,<285,43>,<304,5>)
```
 {

        Result result;

        try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(174594,455,<4122,28>,<4129,45>)
```
 condlPrint(((j > 0) ? "  " : "")
                                    + ((j < fieldArray.length - 1
                                        || rightJust[j])
                                       ? StringUtil.toPaddedString(
                                         fieldArray[j], maxWidth[j],
                                         ' ', !rightJust[j])
                                       : fieldArray[j])
                                    , false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(189675,334,<4508,20>,<4513,37>)
```
 condlPrint(((j > 0) ? "  " : "")
                            + ((j < fieldArray.length - 1 || rightJust[j])
                               ? StringUtil.toPaddedString(
                                 fieldArray[j], maxWidth[j], ' ', !rightJust[j])
                               : fieldArray[j])
                            , false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(172387,849,<4079,24>,<4094,48>)
```
 for (int i = 0; i < headerArray.length; i++) {
                            condlPrint("<TH>"
                                    + SqlFile.escapeHtml(headerArray[i])
                                    + "</TH>", true);
                            condlPrint(((i > 0) ? "  " : "")
                                    + ((i < headerArray.length - 1
                                        || rightJust[i])
                                       ? StringUtil.toPaddedString(
                                         headerArray[i], maxWidth[i],
                                         ' ', !rightJust[i])
                                       : headerArray[i])
                                    , false);
                        }

                        condlPrintln(LS + PRE_TR + "</TR>", true);
                        condlPrintln("", false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(188217,600,<4474,12>,<4486,36>)
```
 for (int i = 0; i < headerArray.length; i++) {
                condlPrint("<TH>"
                        + SqlFile.escapeHtml(headerArray[i]) + "</TH>", true);
                condlPrint(((i > 0) ? "  " : "")
                        + ((i < headerArray.length - 1 || rightJust[i])
                           ? StringUtil.toPaddedString(
                             headerArray[i], maxWidth[i], ' ', !rightJust[i])
                           : headerArray[i])
                        , false);
            }

            condlPrintln(LS + PRE_TR + "</TR>", true);
            condlPrintln("", false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33063,560,<1020,16>,<1034,13>)
```
 {

                // Would like to use String.split(), but don't know if Java 4
                // is allowed here.
                // Until we can use Java 4, prohibit tabs as white space.
                int index = trimmed.indexOf(' ');

                if (index < 0) {
                    throw new IllegalArgumentException();
                }

                enforceSequence = Boolean.valueOf(trimmed.substring(0,
                        index)).booleanValue();
                waiter = Waiter.getWaiter(trimmed.substring(index).trim());
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(35622,516,<1107,12>,<1121,9>)
```
 {

            // Would like to use String.split(), but don't know if Java 4
            // is allowed here.
            // Until we can use Java 4, prohibit tabs as white space.
            int index = trimmed.indexOf(' ');

            if (index < 0) {
                throw new IllegalArgumentException();
            }

            enforceSequence = Boolean.valueOf(trimmed.substring(0,
                    index)).booleanValue();
            waiter = Waiter.getWaiter(trimmed.substring(index).trim());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130168,1934,<3163,8>,<3206,17>)
```
 Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(134633,1934,<3268,8>,<3311,17>)
```
 Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(134418,437,<3216,18>,<3231,9>)
```
 {
            if (rs != null) try {
                rs.close();
            } catch (SQLException se) {
                // Purposefully doing nothing
            } finally {
                rs = null;
            }
            if (st != null) try {
                st.close();
            } catch (SQLException se) {
                // Purposefully doing nothing
            } finally {
                st = null;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(72944,553,<1688,24>,<1701,25>)
```
 if (rs != null) try {
                            rs.close();
                        } catch (SQLException se) {
                            // Purposefully empty
                        } finally {
                            rs = null;
                        }
                        if (st != null) try {
                            st.close();
                        } catch (SQLException se) {
                            // Purposefully empty
                        } finally {
                            st = null;
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84328,195,<2027,16>,<2031,40>)
```
 row[icat]          = cat;
                row[ischem]        = schem;
                row[ipname]        = pName;
                row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83700,163,<2008,8>,<2012,32>)
```
 row[icat]          = cat;
        row[ischem]        = schem;
        row[ipname]        = pName;
        row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(12585,165,<418,16>,<421,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    sb.append(nodes[i].describe(session, blanks + 1));
                    sb.append(' ');
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(12870,165,<427,16>,<430,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    sb.append(nodes[i].describe(session, blanks + 1));
                    sb.append(' ');
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(10287,165,<306,16>,<309,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    sb.append(nodes[i].describe(session, blanks + 1));
                    sb.append(' ');
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(7656,416,<157,16>,<169,44>)
```
 ResultSetMetaData rsmd    = rs.getMetaData();
                String            result0 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + ":";
                    }

                    result0 += "\n";
                }

                rs.close();
                System.out.println(result0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(8225,416,<177,16>,<189,44>)
```
 ResultSetMetaData rsmd    = rs.getMetaData();
                String            result0 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + ":";
                    }

                    result0 += "\n";
                }

                rs.close();
                System.out.println(result0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(7688,263,<232,8>,<241,25>)
```
 lookup                 = hashIndex.linkNode(index, lastLookup);
        objectKeyTable[lookup] = testValue;

        if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }

        accessTable[lookup] = accessCount++;

        return testValue;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(8922,263,<277,8>,<286,25>)
```
 lookup                 = hashIndex.linkNode(index, lastLookup);
        objectKeyTable[lookup] = testValue;

        if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }

        accessTable[lookup] = accessCount++;

        return testValue;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(12227,265,<369,12>,<377,31>)
```
 ColumnSchema column  = getColumn(j);
            String       colname = column.getName().statementName;
            Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(20214,265,<644,12>,<652,31>)
```
 ColumnSchema column  = getColumn(j);
            String       colname = column.getName().statementName;
            Type         type    = column.getDataType();

            if (j > 0) {
                sb.append(',');
            }

            sb.append(colname);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(77142,248,<2662,8>,<2668,9>)
```
 while (nav.hasNext()) {
            Object[] data = (Object[]) nav.getNext();
            Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);

            insertData(session, store, newData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(78377,248,<2710,8>,<2716,9>)
```
 while (nav.hasNext()) {
            Object[] data = (Object[]) nav.getNext();
            Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);

            insertData(session, store, newData);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(25247,403,<763,16>,<771,17>)
```
 ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Update " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(28372,403,<851,16>,<859,17>)
```
 ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Update " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(29791,685,<892,0>,<910,17>)
```
 //                random = i;
                ps.setInt(1, random);

                count += ps.executeUpdate();

/*
                if ((i + 1) % 10000 == 0) {
                    Statement st = cConnection.createStatement();

                    st.execute("CHECKPOINT DEFRAG");
                    st.close();
                }
*/
                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("delete " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(31543,419,<945,16>,<954,17>)
```
 ps.setInt(1, random);

                count += ps.executeUpdate();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("delete " + (i + 1) + " : "
                                       + sw.elapsedTime() + " rps: "
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7342,285,<236,12>,<241,39>)
```
 session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            rollbackPartial(session, 0, session.transactionTimestamp);
            endTransaction(session);
            endTransactionTPL(session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(5696,285,<178,12>,<183,39>)
```
 session.actionTimestamp         = getNextGlobalChangeTimestamp();
            session.transactionEndTimestamp = session.actionTimestamp;

            rollbackPartial(session, 0, session.transactionTimestamp);
            endTransaction(session);
            endTransactionTPL(session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4410,230,<118,12>,<123,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9638,230,<258,12>,<263,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10984,230,<293,12>,<298,43>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(9214,399,<294,8>,<306,45>)
```
 // rolled back transactions can always be merged as they have never been
        // seen by other sessions
        writeLock.lock();

        try {
            Object[] list = session.rowActionList.getArray();

            mergeRolledBackTransaction(session, timestamp, list, start, limit);
        } finally {
            writeLock.unlock();
        }

        session.rowActionList.setSize(start);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(7638,399,<238,8>,<250,45>)
```
 // rolled back transactions can always be merged as they have never been
        // seen by other sessions
        writeLock.lock();

        try {
            Object[] list = session.rowActionList.getArray();

            mergeRolledBackTransaction(session, timestamp, list, start, limit);
        } finally {
            writeLock.unlock();
        }

        session.rowActionList.setSize(start);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlProperties.java|(13790,244,<449,8>,<454,64>)
```
 Object[] row = new Object[indexLimit];

        row[indexName]         = name;
        row[indexType]         = ValuePool.getInt(type);
        row[indexClass]        = "Integer";
        row[indexDefaultValue] = ValuePool.getInt(defaultValue);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlProperties.java|(14255,244,<463,8>,<468,64>)
```
 Object[] row = new Object[indexLimit];

        row[indexName]         = name;
        row[indexType]         = ValuePool.getInt(type);
        row[indexClass]        = "Integer";
        row[indexDefaultValue] = ValuePool.getInt(defaultValue);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(17740,323,<499,8>,<506,9>)
```
 Result          resultOut          = null;
        RowSetNavigator generatedNavigator = null;

        if (generatedIndexes != null) {
            resultOut = Result.newUpdateCountResult(generatedResultMetaData,
                    0);
            generatedNavigator = resultOut.getChainedResult().getNavigator();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(23548,323,<671,8>,<678,9>)
```
 Result          resultOut          = null;
        RowSetNavigator generatedNavigator = null;

        if (generatedIndexes != null) {
            resultOut = Result.newUpdateCountResult(generatedResultMetaData,
                    0);
            generatedNavigator = resultOut.getChainedResult().getNavigator();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(6297,212,<169,8>,<174,57>)
```
 assertEquals(3, rs.getInt(2));
        assertEquals(25, rs.getInt(1));
        assertNull(rs.getString(3));
        assertEquals("str", rs.getString(4));

        assertTrue("Not enough rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10283,228,<274,12>,<279,61>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11629,228,<309,12>,<314,61>)
```
 assertEquals(3, rs.getInt(2));
            assertEquals(25, rs.getInt(1));
            assertNull(rs.getString(3));
            assertEquals("str", rs.getString(4));

            assertTrue("Not enough rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(3585,228,<96,12>,<100,50>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4263,228,<115,12>,<119,50>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9491,228,<255,12>,<259,50>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(10837,228,<290,12>,<294,50>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(5, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("five", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(5805,467,<186,12>,<198,13>)
```
 adjustLobUsage(session);
            persistCommit(session);

            int newLimit = session.rowActionList.size();

            if (newLimit > limit) {
                Object[] list = session.rowActionList.getArray();

                mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);
                finaliseRows(session, list, limit, newLimit);
                session.rowActionList.setSize(limit);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(4343,467,<134,12>,<146,13>)
```
 adjustLobUsage(session);
            persistCommit(session);

            int newLimit = session.rowActionList.size();

            if (newLimit > limit) {
                Object[] list = session.rowActionList.getArray();

                mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);
                finaliseRows(session, list, limit, newLimit);
                session.rowActionList.setSize(limit);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(13668,251,<544,16>,<553,23>)
```
 read();

                if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }

                String s = token.tokenString;

                read();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(14100,251,<560,16>,<569,23>)
```
 read();

                if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }

                String s = token.tokenString;

                read();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(14597,251,<577,16>,<586,23>)
```
 read();

                if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }

                String s = token.tokenString;

                read();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(50172,557,<1371,16>,<1386,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }

                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(51079,557,<1397,16>,<1412,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }

                if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(39855,320,<1129,8>,<1136,9>)
```
 if (extraUpdateTables != null) {
            for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(48678,320,<1387,8>,<1394,9>)
```
 if (extraUpdateTables != null) {
            for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(23148,237,<591,16>,<597,49>)
```
 if (nodes[2] != null
                        && ((Number) nodes[2].valueData).intValue()
                           == Tokens.OCTETS) {
                    result *= 2;
                }

                return ValuePool.getLong(result);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(23786,237,<609,16>,<615,49>)
```
 if (nodes[2] != null
                        && ((Number) nodes[2].valueData).intValue()
                           == Tokens.OCTETS) {
                    result *= 2;
                }

                return ValuePool.getLong(result);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4559,229,<122,12>,<127,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(9787,229,<262,12>,<267,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(11133,229,<297,12>,<302,53>)
```
 assertEquals("str", rs.getString(4));
            assertEquals(10, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("ten", rs.getString(3));

            assertTrue("No rows fetched", rs.next());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(16082,621,<514,28>,<526,38>)
```
 if (foreignKeyName.length() > 0) {
                                alterCreate +=
                                    " ("
                                    + Dest.helper.formatIdentifier(
                                        foreignKeyName.substring(
                                            0, foreignKeyName.length()
                                            - 1)) + ")";
                            }

                            alterCreate += ";";
                            alterDrop =
                                alterDrop.substring(0, alterDrop.length() - 1)
                                + ";";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(18960,445,<579,16>,<589,34>)
```
 if (foreignKeyName.length() > 0) {
                    alterCreate +=
                        " ("
                        + Dest.helper.formatIdentifier(
                            foreignKeyName.substring(
                                0, foreignKeyName.length() - 1)) + ")";
                }

                alterCreate += ";";
                alterDrop = alterDrop.substring(0, alterDrop.length() - 1)
                            + ";";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Session.java|(43693,823,<1461,19>,<1478,13>)
```
 if (in.isData()) {

                // FIXME:  we don't have what it takes yet
                // to differentiate between things like
                // stored procedure calls to methods with
                // void return type and select statements with
                // a single row/column containg null
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.CALL_RESPONSE) {
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.ERROR) {
                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
                error        = in;

                break;
            } else {
                throw Error.runtimeError(ErrorCode.U_S0500, "Session");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Session.java|(45745,823,<1521,19>,<1538,13>)
```
 if (in.isData()) {

                // FIXME:  we don't have what it takes yet
                // to differentiate between things like
                // stored procedure calls to methods with
                // void return type and select statements with
                // a single row/column containg null
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.CALL_RESPONSE) {
                updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
            } else if (in.mode == ResultConstants.ERROR) {
                updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
                error        = in;

                break;
            } else {
                throw Error.runtimeError(ErrorCode.U_S0500, "Session");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(37904,258,<1489,56>,<1496,17>)
```
 {
                    token.tokenString = Tokens.T_NOT_EQUALS;
                    token.tokenType   = Tokens.NOT_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(38490,258,<1506,56>,<1513,17>)
```
 {
                    token.tokenString = Tokens.T_NOT_EQUALS;
                    token.tokenType   = Tokens.NOT_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(37376,390,<1061,12>,<1070,32>)
```
 Table           currentTable = ((Table) row.getTable());
            int[] changedColumns = navigator.getCurrentChangedColumns();
            PersistentStore store        = currentTable.getRowStore(session);

            if (data == null) {
                continue;
            }

            Row newRow = currentTable.insertSingleRow(session, store, data,
                changedColumns);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(45250,411,<1299,16>,<1308,42>)
```
 Table           currentTable = ((Table) row.getTable());
                int[] changedColumns = navigator.getCurrentChangedColumns();
                PersistentStore store = currentTable.getRowStore(session);

                if (data == null) {
                    continue;
                }

                Row newRow = currentTable.insertSingleRow(session, store,
                    data, changedColumns);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(85634,236,<2247,16>,<2253,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(50172,236,<1371,16>,<1377,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(51079,236,<1397,16>,<1403,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(2791,331,<81,8>,<88,9>)
```
 String SeqName   = new String("_" + columnDesc.getString(4) + "_seq");
        int    spaceleft = 31 - SeqName.length();

        if (t.Stmts.sDestTable.length() > spaceleft) {
            SeqName = t.Stmts.sDestTable.substring(0, spaceleft) + SeqName;
        } else {
            SeqName = t.Stmts.sDestTable + SeqName;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(4216,416,<121,12>,<130,13>)
```
 String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3623,416,<99,12>,<108,13>)
```
 String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(12770,178,<383,12>,<386,13>)
```
 if (reportProgress && (i + 1) % 10000 == 0) {
                System.out.println("insert " + (i + 1) + " : "
                                   + sw.elapsedTime());
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(15484,178,<463,12>,<466,13>)
```
 if (reportProgress && (i + 1) % 10000 == 0) {
                System.out.println("insert " + (i + 1) + " : "
                                   + sw.elapsedTime());
            }
```


****************************************
******** Type 2 clone detection ********
****************************************
*****************************
** Clone percentage
** 16.24941067%
*****************************
** Number of clone classes:
** 648
*****************************
** Number of clones:
** 1960
*****************************
** Size (SLOC) of largest clone: 
** 102
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>)}
** The largest clones in code:
** 
** largest clone number: 1
** reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**

** largest clone number: 2
** reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**

** largest clone number: 3
** reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**

** largest clone number: 4
** reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**

** largest clone number: 5
** reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**

** largest clone number: 6
** reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**

** largest clone number: 7
** reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**

** largest clone number: 8
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**

** largest clone number: 9
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**

** largest clone number: 10
** reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**

*****************************
** The largest clone classes in SLOC:
** 1510
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)],[|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>),|project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**
reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**
reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**
reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**
reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**
reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
**
reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
**
reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
**
reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
**
reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
**
reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
**
reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
**
reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
**
reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
**
reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
**

** largest clone class number: 2
** reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
**
reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
**
reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
**
reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
**
reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
**
reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
**
reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
**
reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
**
reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
**
reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
**
reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
**
reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
**
reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
**
reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
**
reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 2             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(46463,422,<1500,20>,<1510,21>)
```
 while (localLength > 0) {
                        int read = inputStream.read(byteBuffer, count,
                                                    localLength);

                        if (read == -1) {
                            return Result.newErrorResult(new EOFException());
                        }

                        localLength -= read;
                        count       += read;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(65384,390,<2117,16>,<2127,17>)
```
 while (localLength > 0) {
                    int read = inputStream.read(tempBuffer, count,
                                                localLength);

                    if (read == -1) {
                        return Result.newErrorResult(new EOFException());
                    }

                    localLength -= read;
                    count       += read;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(8457,605,<212,4>,<237,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(8701,605,<234,4>,<259,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }

        try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(79075,491,<2491,8>,<2501,68>)
```
 propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);

        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(
            ServerConstants.SC_PROTOCOL_HSQL, propsPath, propsExtension);
        ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HSQL)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java|(6639,491,<163,8>,<173,68>)
```
 propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);

        ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(
            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);
        ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(109224,234,<2907,16>,<2913,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(113870,250,<3043,16>,<3049,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR_DEFAULT;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(16885,335,<503,16>,<511,17>)
```
 if (nodes[LEFT] != null) {
                    if (nodes[LEFT].dataType == null) {
                        throw Error.error(ErrorCode.X_42567);
                    }

                    if (!nodes[LEFT].dataType.isIntegralType()) {
                        throw Error.error(ErrorCode.X_42563);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(17238,338,<513,16>,<521,17>)
```
 if (nodes[RIGHT] != null) {
                    if (nodes[RIGHT].dataType == null) {
                        throw Error.error(ErrorCode.X_42567);
                    }

                    if (!nodes[RIGHT].dataType.isIntegralType()) {
                        throw Error.error(ErrorCode.X_42563);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBug785429.java|(4595,342,<146,4>,<160,5>)
```
 protected void tearDown() {

        try {
            stmt.execute("SHUTDOWN");

            if (!isNetwork) {
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("TestSql.tearDown() error: " + e.getMessage());
        }

        super.tearDown();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(31263,349,<909,4>,<923,5>)
```
 protected void tearDown() {

        try {
            stmnt.execute("SHUTDOWN");

            if (!isNetwork) {
                connection.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("TestSql.tearDown() error: " + e.getMessage());
        }

        super.tearDown();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56316,254,<1822,8>,<1827,19>)
```
 params[DIVIDE_BLOCK.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DIVIDE_BLOCK.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(divideLobPartCall, params,
                0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56880,254,<1836,8>,<1841,19>)
```
 params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createLobPartCall, params,
                0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(57486,260,<1853,8>,<1858,27>)
```
 params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createSingleLobPartCall,
                params, 0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(58539,191,<1676,12>,<1682,30>)
```
 String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;

            gResult.addRow(g);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(28229,191,<889,12>,<895,30>)
```
 String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;

            gResult.addRow(g);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(12818,2705,<247,8>,<289,71>)
```
 //
        customRegularFuncMap.put(Tokens.ACOS, FUNC_ACOS);
        customRegularFuncMap.put(Tokens.ACTION_ID, FUNC_ACTION_ID);
        customRegularFuncMap.put(Tokens.ADD_MONTHS, FUNC_ADD_MONTHS);
        customRegularFuncMap.put(Tokens.ARRAY_SORT, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.ASCII, FUNC_ASCII);
        customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13155,2695,<253,8>,<294,65>)
```
 customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13461,2853,<258,8>,<301,63>)
```
 customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13772,2930,<263,8>,<307,57>)
```
 customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14076,2947,<268,8>,<312,54>)
```
 customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14484,2846,<274,8>,<317,61>)
```
 customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14879,2889,<280,8>,<323,79>)
```
 customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15202,2899,<285,8>,<328,63>)
```
 customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15532,2980,<290,8>,<334,62>)
```
 customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(15859,2963,<295,8>,<339,59>)
```
 customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(16323,2827,<302,8>,<344,72>)
```
 customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(16711,2878,<308,8>,<350,79>)
```
 customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17032,2865,<313,8>,<355,59>)
```
 customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17339,2902,<318,8>,<360,55>)
```
 customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(17777,2836,<324,8>,<365,65>)
```
 customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(18110,2851,<329,8>,<370,67>)
```
 customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(18521,2943,<335,8>,<377,67>)
```
 customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
        customRegularFuncMap.put(Tokens.TO_TIMESTAMP, FUNC_TO_TIMESTAMP);
//      customRegularFuncMap.put(Tokens.TO_TIMESTAMP_TZ, FUNC_TO_TIMESTAMP_TZ);
        customRegularFuncMap.put(Tokens.TRANSACTION_CONTROL,
                                 FUNC_TRANSACTION_CONTROL);
        customRegularFuncMap.put(Tokens.TRANSACTION_ID, FUNC_TRANSACTION_ID);
        customRegularFuncMap.put(Tokens.TRANSACTION_SIZE, FUNC_TRANSACTION_SIZE);
        customRegularFuncMap.put(Tokens.TRANSLATE, FUNC_TRANSLATE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllSimpleTests.java|(2101,228,<53,8>,<57,30>)
```
 TestBatchBug.main(args);
        System.out.println("*********** " + TestDima.class.getName());
        TestDima.main(args);
        System.out.println("*********** " + TestHSQLDB.class.getName());
        TestHSQLDB.main(args);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllSimpleTests.java|(2205,236,<55,8>,<59,34>)
```
 TestDima.main(args);
        System.out.println("*********** " + TestHSQLDB.class.getName());
        TestHSQLDB.main(args);
        System.out.println("*********** " + TestObjectSize.class.getName());
        TestObjectSize.main(args);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllSimpleTests.java|(2307,311,<57,8>,<63,54>)
```
 TestHSQLDB.main(args);
        System.out.println("*********** " + TestObjectSize.class.getName());
        TestObjectSize.main(args);
        System.out.println(
            "*********** "
            + TestSubQueriesInPreparedStatements.class.getName());
        TestSubQueriesInPreparedStatements.main(args);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(58472,204,<1672,12>,<1679,51>)
```
 g[0]  = "SQL Error";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(28162,204,<885,12>,<892,51>)
```
 g[0]  = "SQL Error";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53658,272,<1749,8>,<1753,68>)
```
 ResultMetaData meta     = updateLobUsage.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_USAGE.BLOCK_COUNT] = ValuePool.getInt(delta);
        params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56169,278,<1819,8>,<1823,69>)
```
 ResultMetaData meta     = divideLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[DIVIDE_BLOCK.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DIVIDE_BLOCK.LOB_ID]       = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95210,203,<3317,8>,<3325,9>)
```
 boolean    minus = false;

        if (token.tokenType == Tokens.PLUS) {
            read();
        } else if (token.tokenType == Tokens.MINUS) {
            read();

            minus = true;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(24588,210,<830,8>,<838,9>)
```
 boolean cascade = false;

        if (token.tokenType == Tokens.RESTRICT) {
            read();
        } else if (token.tokenType == Tokens.CASCADE) {
            read();

            cascade = true;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53103,275,<1732,8>,<1736,68>)
```
 ResultMetaData meta     = updateLobLength.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_LENGTH.LOB_LENGTH] = ValuePool.getLong(length);
        params[UPDATE_LENGTH.LOB_ID]     = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60282,278,<1945,8>,<1949,70>)
```
 ResultMetaData meta     = getSpanningParts.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);
        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getLong(offset);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java|(10766,618,<277,4>,<300,5>)
```
 public static String getOperationSpec(int type) {

        switch (type) {

            case INSERT_AFTER :
            case INSERT_AFTER_ROW :
            case INSERT_BEFORE_ROW : {
                return "INSERT";
            }
            case UPDATE_AFTER :
            case UPDATE_AFTER_ROW :
            case UPDATE_BEFORE_ROW : {
                return "UPDATE";
            }
            case DELETE_AFTER :
            case DELETE_AFTER_ROW :
            case DELETE_BEFORE_ROW : {
                return "DELETE";
            }
            default : {
                return "";
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/sample/TriggerSample.java|(10766,618,<277,4>,<300,5>)
```
 public static String getOperationSpec(int type) {

        switch (type) {

            case INSERT_AFTER :
            case INSERT_AFTER_ROW :
            case INSERT_BEFORE_ROW : {
                return "INSERT";
            }
            case UPDATE_AFTER :
            case UPDATE_AFTER_ROW :
            case UPDATE_BEFORE_ROW : {
                return "UPDATE";
            }
            case DELETE_AFTER :
            case DELETE_AFTER_ROW :
            case DELETE_BEFORE_ROW : {
                return "DELETE";
            }
            default : {
                return "";
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(66046,331,<1952,8>,<1966,9>)
```
 for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
            mRecent.remove(iRecent);
        }

        sRecent[iRecent] = s;

        if (s.length() > 43) {
            s = s.substring(0, 40) + "...";
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(34589,331,<1157,8>,<1171,9>)
```
 for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
            mRecent.remove(iRecent);
        }

        sRecent[iRecent] = s;

        if (s.length() > 43) {
            s = s.substring(0, 40) + "...";
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(28078,315,<913,12>,<926,13>)
```
 int    result    = ArrayUtil.compare(aBytes, bBytes);

            if (result != 0) {
                return result;
            }

            aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30833,305,<1003,12>,<1016,13>)
```
 int diff = collation.compare(aString, bString);

            if (diff != 0) {
                return diff;
            }

            aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(7082,187,<233,8>,<237,54>)
```
 StringBuffer sb = new StringBuffer();

        sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_SESSION).append(' ');
        sb.append(Tokens.T_AUTHORIZATION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Collation.java|(17544,184,<554,8>,<558,50>)
```
 StringBuffer sb = new StringBuffer();

        sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_DATABASE).append(' ');
        sb.append(Tokens.T_COLLATION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(11236,246,<371,12>,<376,13>)
```
 for (int i = 0; i < array.length; i++) {
                PersistentStore store = (PersistentStore) array[i];

                rowStoreMapRoutine.put(store.getTable().getPersistenceId(),
                                       store);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(11595,234,<383,8>,<388,9>)
```
 for (int i = 0; i < array.length; i++) {
            PersistentStore store = (PersistentStore) array[i];

            rowStoreMapStatement.put(store.getTable().getPersistenceId(),
                                     store);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(79309,622,<2495,8>,<2508,60>)
```
 ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HSQL)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
        ServerConfiguration.translateAddressProperty(props);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java|(6873,622,<167,8>,<180,60>)
```
 ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
        ServerConfiguration.translateAddressProperty(props);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(104883,342,<2768,35>,<2780,13>)
```
 {
                if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42561);
                }

                dataType = Type.SQL_DOUBLE;

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(105255,343,<2781,29>,<2793,13>)
```
 {
                if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42561);
                }

                dataType = Type.SQL_INTEGER;

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ClientConnection.java|(11479,317,<351,4>,<360,5>)
```
 public synchronized void setReadOnlyDefault(boolean mode) {

        if (mode != isReadOnlyDefault) {
            setAttribute(SessionInterface.INFO_CONNECTION_READONLY,
                         mode ? Boolean.TRUE
                              : Boolean.FALSE);

            isReadOnlyDefault = mode;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ClientConnection.java|(12016,367,<371,4>,<380,5>)
```
 public synchronized void setAutoCommit(boolean mode) {

        if (mode != isAutoCommit) {
            setAttribute(SessionInterface.INFO_AUTOCOMMIT, mode ? Boolean.TRUE
                                                                : Boolean
                                                                .FALSE);

            isAutoCommit = mode;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(63948,174,<1878,8>,<1882,38>)
```
 int      width = col.length;
        int[]    size  = new int[width];
        Vector   data  = gResult.getData();
        Object[] row;
        int      height = data.size();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(33066,174,<1093,8>,<1097,38>)
```
 int      width = col.length;
        int[]    size  = new int[width];
        Vector   data  = gResult.getData();
        String[] row;
        int      height = data.size();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStressInsert.java|(4090,418,<117,4>,<131,5>)
```
 public void insertA(byte[] id) throws Exception {

        try {
            int    length = getRandomLength(LOB_SIZE);
            byte[] array  = Arrays.copyOf(data, length);


            insertStmtA.setBytes(1, array);
            insertStmtA.setBytes(2, id);
            insertStmtA.execute();
        } finally {
            insertStmtA.clearParameters();
            insertStmtA.clearWarnings();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStressInsert.java|(4514,418,<133,4>,<147,5>)
```
 public void insertB(byte[] id) throws Exception {

        try {
            int    length = getRandomLength(LOB_SIZE);
            byte[] array  = Arrays.copyOf(data, length);


            insertStmtB.setBytes(1, array);
            insertStmtB.setBytes(2, id);
            insertStmtB.execute();
        } finally {
            insertStmtB.clearParameters();
            insertStmtB.clearWarnings();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128586,954,<2140,8>,<2159,43>)
```
 commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130113,859,<2173,8>,<2192,43>)
```
 commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(166776,559,<4263,8>,<4278,55>)
```
 Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(80984,550,<1921,8>,<1936,55>)
```
 Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }

        if (o instanceof ClobDataID) {
            return ((ClobDataID) o).getCharacterStream(session);
        } else if (o instanceof Clob) {
            return ((Clob) o).getCharacterStream();
        } else if (o instanceof String) {
            return new StringReader((String) o);
        }

        throw JDBCUtil.sqlException(ErrorCode.X_42561);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144696,253,<2489,8>,<2493,44>)
```
 commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(145017,253,<2495,8>,<2499,44>)
```
 commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
        commandSet.put(T_PLUS, Tokens.PLUS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129152,904,<2152,8>,<2171,39>)
```
 commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130616,992,<2185,8>,<2205,35>)
```
 commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(18496,2101,<432,4>,<471,5>)
```
 /**
     * Retrieves a result set holding the elements of the subarray that
     * starts at index <code>index</code> and contains up to
     * <code>count</code> successive elements.
     * This method uses
     * the specified <code>map</code> for type map customizations
     * unless the base type of the array does not match a user-defined
     * type in <code>map</code>, in which case it
     * uses the standard mapping. This version of the method
     * <code>getResultSet</code> uses either the given type map or the standard mapping;
     * it never uses the type map associated with the connection.
     * <P>
     * The result set has one row for each element of the SQL array
     * designated by this object, with the first row containing the
     * element at index <code>index</code>.  The result set has
     * up to <code>count</code> rows in ascending order based on the
     * indices.  Each row has two columns:  The second column stores
     * the element value; the first column stroes the index into the
     * array for that element.
     *
     * @param index the array index of the first element to retrieve;
     *              the first element is at index 1
     * @param count the number of successive SQL array elements to retrieve
     * @param map the <code>Map</code> object that contains the mapping
     * of SQL type names to classes in the Java(tm) programming language
     * @return a <code>ResultSet</code> object containing up to
     * <code>count</code> consecutive elements of the SQL array
     * designated by this <code>Array</code> object, starting at
     * index <code>index</code>.
     * @exception SQLException if an error occurs while attempting to
     * access the array
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.2
     */
    public ResultSet getResultSet(long index, int count,
                                  java.util.Map<String,
                                      Class<?>> map) throws SQLException {
        return getResultSet(index, count);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(18131,2101,<420,4>,<459,5>)
```
 /**
     * Retrieves a result set holding the elements of the subarray that
     * starts at index <code>index</code> and contains up to
     * <code>count</code> successive elements.
     * This method uses
     * the specified <code>map</code> for type map customizations
     * unless the base type of the array does not match a user-defined
     * type in <code>map</code>, in which case it
     * uses the standard mapping. This version of the method
     * <code>getResultSet</code> uses either the given type map or the standard mapping;
     * it never uses the type map associated with the connection.
     * <P>
     * The result set has one row for each element of the SQL array
     * designated by this object, with the first row containing the
     * element at index <code>index</code>.  The result set has
     * up to <code>count</code> rows in ascending order based on the
     * indices.  Each row has two columns:  The second column stores
     * the element value; the first column stores the index into the
     * array for that element.
     *
     * @param index the array index of the first element to retrieve;
     *              the first element is at index 1
     * @param count the number of successive SQL array elements to retrieve
     * @param map the <code>Map</code> object that contains the mapping
     * of SQL type names to classes in the Java(tm) programming language
     * @return a <code>ResultSet</code> object containing up to
     * <code>count</code> consecutive elements of the SQL array
     * designated by this <code>Array</code> object, starting at
     * index <code>index</code>.
     * @exception SQLException if an error occurs while attempting to
     * access the array
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.2
     */
    public ResultSet getResultSet(long index, int count,
                                  java.util.Map<String,
                                      Class<?>> map) throws SQLException {
        return getResultSet(index, count);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(12159,654,<328,8>,<340,70>)
```
 System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(11905,654,<337,8>,<349,70>)
```
 System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;

        System.out.println("Transaction rate: " + rate + " txn/sec.");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/TarReader.java|(12858,553,<339,12>,<355,57>)
```
 while (readBlocks > 0) {
                readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;

                archive.readBlocks(readNow);

                readBlocks -= readNow;

                outPipe.write(archive.readBuffer, 0, readNow * 512);
            }

            if (modulus != 0) { archive.readBlock();
                outPipe.write(archive.readBuffer, 0, modulus);
            }

            outPipe.flush();    // Do any good on a pipe?
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/tar/TarReader.java|(16496,567,<446,0>,<464,30>)
```
 //#endif
            while (readBlocks > 0) {
                readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;

                archive.readBlocks(readNow);

                readBlocks -= readNow;

                outStream.write(archive.readBuffer, 0, readNow * 512);
            }

            if (modulus != 0) {
                archive.readBlock();
                outStream.write(archive.readBuffer, 0, modulus);
            }

            outStream.flush();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,411,<2751,16>,<2757,62>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
                sb.append(
                    StringConverter.toQuotedString(
                        table.getName().comment, '\'', true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(82183,415,<2771,16>,<2777,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_ROUTINE).append(' ');
                sb.append(object.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
                sb.append(
                    StringConverter.toQuotedString(
                        object.getName().comment, '\'', true));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(13251,247,<362,12>,<367,58>)
```
 readThis(Tokens.TABLE);

            targetRange =
                readRangeVariableForDataChange(StatementTypes.TRUNCATE);
            rangeVariables = new RangeVariable[]{ targetRange };
            table          = rangeVariables[0].getTable();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(15571,234,<446,8>,<451,54>)
```
 readThis(Tokens.FROM);

        targetRange =
            readRangeVariableForDataChange(StatementTypes.DELETE_WHERE);
        rangeVariables = new RangeVariable[]{ targetRange };
        table          = rangeVariables[0].getTable();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(23196,1237,<578,4>,<611,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>FLOAT</code> parameter
     * as a <code>float</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setFloat
     */
    public synchronized float getFloat(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? (float) 0.0
                         : ((Number) o).floatValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(27278,1421,<643,4>,<673,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>float</code> in the Java programming language.
     * <!-- end generic documentation -->
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getFloat() or getDouble() is used to retrieve a value
     * of type DECIMAL or NUMERIC with a large precision and the value is beyond
     * the range covered by the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public float getFloat(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_DOUBLE);

        return o == null ? (float) 0.0
                         : ((Number) o).floatValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongDeque.java|(3181,219,<101,8>,<110,21>)
```
 firstindex++;
        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (firstindex == list.length) {
            firstindex = 0;
        }

        return value;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlDeque.java|(4297,215,<144,8>,<153,17>)
```
 firstindex++;
        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (firstindex == list.length) {
            firstindex = 0;
        }

        return o;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/FontDialogSwing.java|(9492,293,<234,8>,<241,57>)
```
 Font txtResultFont = fOwner.txtResult.getFont();

        fOwner.txtResult.setFont(
            new Font(
                fontsComboBox.getSelectedItem().toString(),
                txtResultFont.getStyle(), txtResultFont.getSize()));

        Font txtCommandFont = fOwner.txtResult.getFont();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/FontDialogSwing.java|(9736,294,<241,8>,<248,54>)
```
 Font txtCommandFont = fOwner.txtResult.getFont();

        fOwner.txtCommand.setFont(
            new Font(
                fontsComboBox.getSelectedItem().toString(),
                txtCommandFont.getStyle(), txtCommandFont.getSize()));

        Font txtTreeFont = fOwner.txtResult.getFont();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(21815,253,<668,8>,<672,55>)
```
 tSourceTable.setText(t.Stmts.sSourceTable);
        tDestTable.setText(t.Stmts.sDestTable);
        tDestDrop.setText(t.Stmts.sDestDrop);
        tDestCreateIndex.setText(t.Stmts.sDestCreateIndex);
        tDestDropIndex.setText(t.Stmts.sDestDropIndex);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(21867,251,<669,8>,<673,49>)
```
 tDestTable.setText(t.Stmts.sDestTable);
        tDestDrop.setText(t.Stmts.sDestDrop);
        tDestCreateIndex.setText(t.Stmts.sDestCreateIndex);
        tDestDropIndex.setText(t.Stmts.sDestDropIndex);
        tDestCreate.setText(t.Stmts.sDestCreate);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(21915,253,<670,8>,<674,49>)
```
 tDestDrop.setText(t.Stmts.sDestDrop);
        tDestCreateIndex.setText(t.Stmts.sDestCreateIndex);
        tDestDropIndex.setText(t.Stmts.sDestDropIndex);
        tDestCreate.setText(t.Stmts.sDestCreate);
        tDestDelete.setText(t.Stmts.sDestDelete);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(21961,261,<671,8>,<675,53>)
```
 tDestCreateIndex.setText(t.Stmts.sDestCreateIndex);
        tDestDropIndex.setText(t.Stmts.sDestDropIndex);
        tDestCreate.setText(t.Stmts.sDestCreate);
        tDestDelete.setText(t.Stmts.sDestDelete);
        tSourceSelect.setText(t.Stmts.sSourceSelect);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22021,251,<672,8>,<676,49>)
```
 tDestDropIndex.setText(t.Stmts.sDestDropIndex);
        tDestCreate.setText(t.Stmts.sDestCreate);
        tDestDelete.setText(t.Stmts.sDestDelete);
        tSourceSelect.setText(t.Stmts.sSourceSelect);
        tDestInsert.setText(t.Stmts.sDestInsert);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22077,243,<673,8>,<677,47>)
```
 tDestCreate.setText(t.Stmts.sDestCreate);
        tDestDelete.setText(t.Stmts.sDestDelete);
        tSourceSelect.setText(t.Stmts.sSourceSelect);
        tDestInsert.setText(t.Stmts.sDestInsert);
        tDestAlter.setText(t.Stmts.sDestAlter);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongDeque.java|(4231,210,<158,8>,<168,9>)
```
 resetCapacity();

        firstindex--;

        if (firstindex < 0) {
            firstindex = list.length - 1;

            if (endindex == 0) {
                endindex = list.length;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlDeque.java|(5443,210,<210,8>,<220,9>)
```
 resetCapacity();

        firstindex--;

        if (firstindex < 0) {
            firstindex = list.length - 1;

            if (endindex == 0) {
                endindex = list.length;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19778,686,<552,8>,<562,53>)
```
 database.txConflictRollback =
            database.databaseProperties.isPropertyTrue(
                HsqlDatabaseProperties.hsqldb_tx_conflict_rollback);
        database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19941,657,<555,8>,<564,54>)
```
 database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20075,655,<557,8>,<566,53>)
```
 database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20209,653,<559,8>,<568,53>)
```
 database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20341,662,<561,8>,<570,61>)
```
 database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20473,662,<563,8>,<572,53>)
```
 database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20607,658,<565,8>,<574,52>)
```
 database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20739,656,<567,8>,<576,52>)
```
 database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20871,656,<569,8>,<578,53>)
```
 database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21012,668,<571,8>,<581,58>)
```
 database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
        database.sqlConvertTruncate =
            database.databaseProperties.isPropertyTrue(
                HsqlDatabaseProperties.sql_convert_trunc);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21819,640,<584,8>,<593,51>)
```
 database.sqlDoubleNaN = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_double_nan);
        database.sqlLongvarIsLob = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_longvar_is_lob);
        database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(21947,640,<586,8>,<595,51>)
```
 database.sqlLongvarIsLob = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_longvar_is_lob);
        database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(22082,633,<588,8>,<597,51>)
```
 database.sqlIgnoreCase = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_ignore_case);
        database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
        database.sqlSyntaxOra = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_ora);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(22212,631,<590,8>,<599,51>)
```
 database.sqlSyntaxDb2 = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_db2);
        database.sqlSyntaxMss = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mss);
        database.sqlSyntaxMys = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_mys);
        database.sqlSyntaxOra = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_ora);
        database.sqlSyntaxPgs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_syntax_pgs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50291,739,<1558,8>,<1577,9>)
```
 if (HsqlDatabaseProperties.hsqldb_files_check.equals(name)) {
            return String.valueOf(propCheckPersistence);
        }

        if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50910,705,<1575,8>,<1594,9>)
```
 if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }

        if (HsqlDatabaseProperties.hsqldb_log_size.equals(name)) {
            return String.valueOf(propLogSize);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87298,581,<2094,8>,<2110,41>)
```
 final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;

        // JDBC 4.0
        final int icol_default      = 13;
        final int isql_data_type    = 14;
        final int isql_datetime_sub = 15;
        final int ichar_octet_len   = 16;
        final int iordinal_position = 17;
        final int iis_nullable      = 18;
        final int ispecific_name    = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59734,578,<1822,8>,<1833,68>)
```
 sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60075,576,<1829,8>,<1840,68>)
```
 sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62313,590,<1878,8>,<1889,68>)
```
 sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(15188,281,<461,8>,<469,9>)
```
 for (int i = 0; uIt.hasNext(); i++) {
            Object uKey = uIt.next();
            Object oU   = uMap.get(uKey);
            Object hU   = hMap.get(uKey);

            if (!oU.equals(hU)) {
                throw new Exception("HashMap value mismatch");
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(15679,281,<477,8>,<485,9>)
```
 for (int i = 0; hIt.hasNext(); i++) {
            Object hKey = hIt.next();
            Object oU   = uMap.get(hKey);
            Object hU   = hMap.get(hKey);

            if (!oU.equals(hU)) {
                throw new Exception("HashMap value mismatch");
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(64222,374,<2111,24>,<2119,44>)
```
 if (Boolean.TRUE.equals(isForEachRow)
                                || oldTableName != null
                                || beforeOrAfterType == TriggerDef.BEFORE) {
                            throw unexpectedToken();
                        }

                        read();
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(67241,374,<2183,24>,<2191,44>)
```
 if (Boolean.TRUE.equals(isForEachRow)
                                || newTableName != null
                                || beforeOrAfterType == TriggerDef.BEFORE) {
                            throw unexpectedToken();
                        }

                        read();
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(137837,770,<3348,12>,<3361,78>)
```
 t = createBlankTable(sysTableHsqlNames[TABLE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(141398,554,<4467,20>,<4477,75>)
```
 String   sql  = this.getLastPart();
                    Object[] args = new Object[] {
                        StatementTypes.DROP_CONSTRAINT, domain, name
                    };
                    HsqlName[] writeLockNames =
                        database.schemaManager.getCatalogAndBaseTableNames(
                            domain.getName());

                    return new StatementSchema(sql,
                                               StatementTypes.ALTER_DOMAIN,
                                               args, null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(142231,472,<4487,16>,<4496,71>)
```
 String     sql  = this.getLastPart();
                Object[]   args = new Object[] {
                    StatementTypes.ADD_DEFAULT, domain, e
                };
                HsqlName[] writeLockNames =
                    database.schemaManager.getCatalogAndBaseTableNames(
                        domain.getName());

                return new StatementSchema(sql, StatementTypes.ALTER_DOMAIN,
                                           args, null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(143243,554,<4512,20>,<4522,75>)
```
 String     sql  = this.getLastPart();
                    Object[]   args = new Object[] {
                        StatementTypes.ADD_CONSTRAINT, domain, c
                    };
                    HsqlName[] writeLockNames =
                        database.schemaManager.getCatalogAndBaseTableNames(
                            domain.getName());

                    return new StatementSchema(sql,
                                               StatementTypes.ALTER_DOMAIN,
                                               args, null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(58597,321,<1918,12>,<1926,34>)
```
 e = XreadBooleanValueExpression();

            resolveOuterReferencesAndTypes(routine, context, e);

            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION, e);

            list.add(statement);
            readThis(Tokens.THEN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(63463,393,<2082,12>,<2091,34>)
```
 condition = XreadBooleanValueExpression();

            resolveOuterReferencesAndTypes(routine, context, condition);

            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);
            readThis(Tokens.THEN);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64277,1634,<1923,8>,<1961,9>)
```
 if (database.sqlSyntaxDb2) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_DB2).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMss) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MSS).append(' ');
            sb.append(database.sqlSyntaxMss ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMys) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MYS).append(' ');
            sb.append(database.sqlSyntaxMys ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxOra) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_ORA).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64688,1634,<1933,8>,<1971,9>)
```
 if (database.sqlSyntaxMss) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MSS).append(' ');
            sb.append(database.sqlSyntaxMss ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxMys) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MYS).append(' ');
            sb.append(database.sqlSyntaxMys ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxOra) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_ORA).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }

        if (database.sqlSyntaxPgs) {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_PGS).append(' ');
            sb.append(database.sqlSyntaxPgs ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36797,382,<888,8>,<899,41>)
```
 Iterator    tables;
        Table       table;
        Object[]    row;
        DITableInfo ti;

        // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(5182,232,<113,8>,<122,25>)
```
 if (inputStream == null || pattern == null || pattern.length == 0) {
            return -1;
        }

        //
        final int patternLength = pattern.length;

        //
        long streamIndex = -1;
        int  currentByte;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(7262,232,<182,8>,<191,30>)
```
 if (reader == null || pattern == null || pattern.length == 0) {
            return -1;
        }

        //
        final int patternLength = pattern.length;

        //
        long streamIndex = -1;
        int  currentCharacter;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/Result.java|(24720,196,<756,8>,<760,46>)
```
 result.mainString   = user;
        result.subString    = password;
        result.zoneString   = zoneString;
        result.databaseName = database;
        result.updateCount  = timeZoneSeconds;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(3823,273,<102,8>,<106,59>)
```
 token.namePrePrePrefix         = namePrePrePrefix;
        token.charsetSchema            = charsetSchema;
        token.charsetName              = charsetName;
        token.fullString               = fullString;
        token.lobMultiplierType        = lobMultiplierType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(14808,392,<451,8>,<463,22>)
```
 if (pattern == null) {
            throw new IllegalArgumentException("Pattern must  not be null.");
        } else if (pattern.length < 2) {
            throw new IllegalArgumentException("Pattern length must be > 1.");
        }

        //
        final int[] table = new int[pattern.length];
        int         i     = 2;
        int         j     = 0;

        //
        table[0] = -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(15691,352,<490,8>,<500,22>)
```
 if (pattern == null) {
            throw new IllegalArgumentException("Pattern must  not be null.");
        } else if (pattern.length < 2) {
            throw new IllegalArgumentException("Pattern length must be > 1.");
        }

        int[] table = new int[pattern.length];
        int   i     = 2;
        int   j     = 0;

        table[0] = -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(128490,427,<4046,44>,<4058,5>)
```
 {

        String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_NULL, table, column, b
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(127957,413,<4033,8>,<4042,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_TYPE, table, column, type
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(15227,205,<575,4>,<584,5>)
```
 boolean hasNull(Object[] data) {

        for (int i = 0; i < visibleColumnCount; i++) {
            if (data[i] == null) {
                return true;
            }
        }

        return false;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(14383,205,<577,4>,<586,5>)
```
 boolean hasNull(Object[] data) {

        for (int i = 0; i < visibleColumnCount; i++) {
            if (data[i] == null) {
                return true;
            }
        }

        return false;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320163,415,<8425,8>,<8434,49>)
```
 Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(142999,461,<3482,8>,<3492,51>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog                = 0;
        final int table_schema                 = 1;
        final int table_name                   = 2;
        final int table_type                   = 3;
        final int self_referencing_column_name = 4;
        final int reference_generation         = 5;
        final int user_defined_type_catalog    = 6;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(59464,208,<1960,8>,<1964,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[] {
            name, routines
        };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(105279,211,<3357,8>,<3361,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[] {
            schemaName, owner
        };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(13288,272,<394,12>,<403,13>)
```
 int    check = randomgen.nextInt(2);

            if (check == i % 2) {
                hIt.remove();
                uMap.remove(key);
            }

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(14039,275,<419,12>,<428,13>)
```
 int    check = randomgen.nextInt(2);

            if (check == i % 2) {
                hIt.remove();
                uMap.remove(key);
            }

            if (uMap.size() != hIntMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(49192,412,<1528,8>,<1538,9>)
```
 if (HsqlDatabaseProperties.hsqldb_lob_file_compressed.equals(name)) {
            return String.valueOf(propCompressLobs);
        }

        if (HsqlDatabaseProperties.hsqldb_cache_file_scale.equals(name)) {
            return String.valueOf(propDataFileScale);
        }

        if (HsqlDatabaseProperties.hsqldb_cache_free_count.equals(name)) {
            return String.valueOf(propMaxFreeBlocks);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(49334,403,<1532,8>,<1542,9>)
```
 if (HsqlDatabaseProperties.hsqldb_cache_file_scale.equals(name)) {
            return String.valueOf(propDataFileScale);
        }

        if (HsqlDatabaseProperties.hsqldb_cache_free_count.equals(name)) {
            return String.valueOf(propMaxFreeBlocks);
        }

        if (HsqlDatabaseProperties.hsqldb_cache_rows.equals(name)) {
            return String.valueOf(propCacheMaxRows);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50152,399,<1554,8>,<1564,9>)
```
 if (HsqlDatabaseProperties.hsqldb_defrag_limit.equals(name)) {
            return String.valueOf(propCacheDefragLimit);
        }

        if (HsqlDatabaseProperties.hsqldb_files_check.equals(name)) {
            return String.valueOf(propCheckPersistence);
        }

        if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50774,386,<1571,8>,<1581,9>)
```
 if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(51373,377,<1588,8>,<1598,9>)
```
 if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }

        if (HsqlDatabaseProperties.hsqldb_log_size.equals(name)) {
            return String.valueOf(propLogSize);
        }

        if (HsqlDatabaseProperties.hsqldb_nio_data_file.equals(name)) {
            return String.valueOf(propNioDataFile);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(39482,383,<1200,69>,<1209,13>)
```
 {
                exprColumns[i].collectAllExpressions(
                    tempSet, Expression.aggregateFunctionSet,
                    Expression.subqueryExpressionSet);

                if (!tempSet.isEmpty()) {
                    throw Error.error(ErrorCode.X_42572,
                                      ((Expression) tempSet.get(0)).getSQL());
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(40539,381,<1225,56>,<1234,13>)
```
 {
                exprColumns[i].collectAllExpressions(
                    tempSet, Expression.columnExpressionSet,
                    Expression.aggregateFunctionSet);

                if (!tempSet.isEmpty()) {
                    throw Error.error(ErrorCode.X_42574,
                                      ((Expression) tempSet.get(0)).getSQL());
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/WebServerConnection.java|(12584,341,<333,12>,<338,77>)
```
 int             databaseID = dataIn.readInt();
            long            sessionID  = dataIn.readLong();
            int             mode       = dataIn.readByte();
            Session session = DatabaseManager.getSession(databaseID,
                sessionID);
            Result resultIn = Result.newResult(session, mode, dataIn, rowIn);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java|(9950,387,<258,16>,<264,58>)
```
 int  databaseID = inStream.readInt();
                long sessionID  = inStream.readLong();
                int  mode       = inStream.readByte();
                Session session = DatabaseManager.getSession(databaseID,
                    sessionID);
                Result resultIn = Result.newResult(session, mode, inStream,
                                                   rowIn);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50429,731,<1562,8>,<1581,9>)
```
 if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(51040,710,<1579,8>,<1598,9>)
```
 if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }

        if (HsqlDatabaseProperties.hsqldb_log_size.equals(name)) {
            return String.valueOf(propLogSize);
        }

        if (HsqlDatabaseProperties.hsqldb_nio_data_file.equals(name)) {
            return String.valueOf(propNioDataFile);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59097,289,<1809,8>,<1814,68>)
```
 sb.append(Tokens.T_REFERENCES).append(' ');
        sb.append(database.sqlEnforceRefs ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59395,283,<1815,8>,<1820,68>)
```
 sb.append(Tokens.T_SIZE).append(' ');
        sb.append(database.sqlEnforceSize ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59687,286,<1821,8>,<1826,68>)
```
 sb.append(Tokens.T_TYPES).append(' ');
        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60027,285,<1828,8>,<1833,68>)
```
 sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60366,285,<1835,8>,<1840,68>)
```
 sb.append(Tokens.T_UPDATE).append(' ');
        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62266,284,<1877,8>,<1882,68>)
```
 sb.append(Tokens.T_NULLS).append(' ');
        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62608,295,<1884,8>,<1889,68>)
```
 sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(67693,296,<2014,8>,<2019,69>)
```
 sb.append(Tokens.T_CONFLICT).append(' ');
        sb.append(database.txConflictRollback ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_TEXT).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(10293,214,<346,8>,<354,20>)
```
 row.setNodesChanged();

        node.iParent = n == null ? NO_POS
                                 : (int) n.getPos();
        node.nParent = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11459,208,<394,8>,<402,20>)
```
 row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : (int) n.getPos();
        node.nLeft = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(12088,211,<419,8>,<427,20>)
```
 row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : (int) n.getPos();
        node.nRight = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(29643,333,<884,16>,<888,74>)
```
 Object leftValue  = nodes[LEFT].getValue(session);
                Object rightValue = nodes[RIGHT] == null ? null
                                                         : nodes[RIGHT]
                                                             .getValue(
                                                                 session);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLike.java|(3555,252,<100,8>,<103,64>)
```
 Object rightValue  = nodes[RIGHT].getValue(session);
        Object escapeValue = nodes[ESCAPE] == null ? null
                                                   : nodes[ESCAPE].getValue(
                                                       session);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50152,748,<1554,8>,<1573,9>)
```
 if (HsqlDatabaseProperties.hsqldb_defrag_limit.equals(name)) {
            return String.valueOf(propCacheDefragLimit);
        }

        if (HsqlDatabaseProperties.hsqldb_files_check.equals(name)) {
            return String.valueOf(propCheckPersistence);
        }

        if (HsqlDatabaseProperties.hsqldb_files_space.equals(name)) {
            return String.valueOf(propFileSpaces);
        }

        if (HsqlDatabaseProperties.hsqldb_files_readonly.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_files_readonly);
        }

        if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(50774,715,<1571,8>,<1590,9>)
```
 if (HsqlDatabaseProperties.hsqldb_inc_backup.equals(name)) {
            return String.valueOf(propIncrementBackup);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_large_data.equals(name)) {
            return String.valueOf(propLargeData);
        }

        if (HsqlDatabaseProperties.hsqldb_lock_file.equals(name)) {
            return database.databaseProperties.getPropertyString(
                HsqlDatabaseProperties.hsqldb_lock_file);
        }

        if (HsqlDatabaseProperties.hsqldb_log_data.equals(name)) {
            return String.valueOf(propLogData);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60414,309,<1836,8>,<1841,71>)
```
 sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TRANSLATE).append(' ').append(Tokens.T_TTI);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(67743,319,<2015,8>,<2020,72>)
```
 sb.append(database.txConflictRollback ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_TEXT).append(' ');
        sb.append(Tokens.T_TABLE).append(' ').append(Tokens.T_DEFAULTS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53069,2065,<1637,8>,<1695,9>)
```
 if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53348,2056,<1645,8>,<1703,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }

        if (HsqlDatabaseProperties.sql_syntax_pgs.equals(name)) {
            return String.valueOf(database.sqlSyntaxPgs);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBatchExecution.java|(5131,499,<147,8>,<159,36>)
```
 // drop and recreate the test table
        println(drop_table_sql);
        stmnt.execute(drop_table_sql);
        println(create_cached + table_sql);
        stmnt.execute(create_cached + table_sql);
        preparedTestOne(runs);

        // drop the test table and shut down database
        println(drop_table_sql);
        stmnt.execute(drop_table_sql);
        println("---------------------------------------");
        println("shutting down database");
        stmnt.execute(shutdown_sql);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBatchExecution.java|(6952,472,<195,8>,<207,36>)
```
 // drop and recreate the test table
        println(drop_table_sql);
        stmnt.execute(drop_table_sql);
        println(create_temp + table_sql);
        stmnt.execute(create_temp + table_sql);
        preparedTestOne(runs);

        // drop the test table
        println(drop_table_sql);
        stmnt.execute(drop_table_sql);
        println("---------------------------------------");
        println("shutting down database");
        stmnt.execute(shutdown_sql);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlTool.java|(13632,374,<367,55>,<377,17>)
```
 {
                    if (++i == arg.length) {
                        throw bcl;
                    }
                    if (rcFile != null) {
                        throw new SqlToolException(SYNTAXERR_EXITVAL,
                                SqltoolRB.SqlTool_params_redundant.getString());
                    }

                    rcFile = arg[i];
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlTool.java|(17823,374,<453,55>,<463,17>)
```
 {
                    if (++i == arg.length) {
                        throw bcl;
                    }
                    if (driver != null) {
                        throw new SqlToolException(SYNTAXERR_EXITVAL,
                                SqltoolRB.SqlTool_params_redundant.getString());
                    }

                    driver = arg[i];
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlTool.java|(18583,378,<469,57>,<479,17>)
```
 {
                    if (++i == arg.length) {
                        throw bcl;
                    }
                    if (rcParams != null) {
                        throw new SqlToolException(SYNTAXERR_EXITVAL,
                                SqltoolRB.SqlTool_params_redundant.getString());
                    }

                    rcParams = arg[i];
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlTool.java|(15328,336,<405,20>,<413,37>)
```
 if (++i == arg.length) {
                        throw bcl;
                    }
                    if (sqlText != null) {
                        throw new SqlToolException(SYNTAXERR_EXITVAL,
                                SqltoolRB.SqlTool_params_redundant.getString());
                    }

                    sqlText = arg[i];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(42118,336,<1367,8>,<1379,9>)
```
 readThis(Tokens.END);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53828,338,<1747,8>,<1759,9>)
```
 readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55016,339,<1789,8>,<1801,9>)
```
 readThis(Tokens.REPEAT);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55882,337,<1821,8>,<1833,9>)
```
 readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(57430,336,<1873,8>,<1885,9>)
```
 readThis(Tokens.FOR);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129505,2267,<2159,8>,<2209,39>)
```
 commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137994,2282,<2344,8>,<2395,43>)
```
 commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
        commandSet.put(T_BITXOR, BITXOR);
        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);
        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);
        commandSet.put(T_CONCAT_WS, CONCAT_WS);
        commandSet.put(T_CHR, CHR);
        commandSet.put(T_COS, COS);
        commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4574,383,<133,4>,<145,5>)
```
 public static ResultLob newLobSetBytesRequest(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5635,385,<172,4>,<184,5>)
```
 public static ResultLob newLobGetBytesResponse(long id, long offset,
            byte block[]) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_GET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(63912,437,<1744,37>,<1756,13>)
```
 {
                int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }

                dataType =
                    DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,
                                                 precision);

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(64392,399,<1757,42>,<1768,13>)
```
 {
                int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }

                dataType = DateTimeType.getDateTimeType(
                    Types.SQL_TIMESTAMP_WITH_TIME_ZONE, precision);

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(64826,377,<1769,34>,<1780,13>)
```
 {
                int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }

                dataType = DateTimeType.getDateTimeType(Types.SQL_TIME,
                        precision);

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(65243,387,<1781,39>,<1792,13>)
```
 {
                int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Integer) nodes[0].valueData).intValue();
                }

                dataType = DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,
                        precision);

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(9252,247,<260,8>,<267,29>)
```
 if (start < 1) {
            throw JDBCUtil.outOfRangeArgument("start: " + start);
        } else if (pattern == null || pattern.length == 0
                   || start > length()) {
            return -1L;
        }

        Reader reader = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(7253,248,<190,8>,<197,30>)
```
 if (start < 1) {
            throw JDBCUtil.outOfRangeArgument("start: " + start);
        } else if (pattern == null || pattern.length == 0
                   || start > length()) {
            return -1L;
        }

        InputStream is = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8767,175,<280,8>,<284,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_CHARS;
        result.blockLength = length;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(128746,922,<2143,8>,<2162,45>)
```
 commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130235,865,<2176,8>,<2195,43>)
```
 commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(33635,461,<1116,8>,<1132,9>)
```
 if (isIntKey) {
            Object array = intKeyTable;

            System.arraycopy(array, lookup + 1, array, lookup,
                             lastPointer - lookup);

            intKeyTable[lastPointer] = 0;
        }

        if (isLongKey) {
            Object array = longKeyTable;

            System.arraycopy(array, lookup + 1, array, lookup,
                             lastPointer - lookup);

            longKeyTable[lastPointer] = 0;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/BaseHashMap.java|(34378,473,<1143,8>,<1159,9>)
```
 if (isIntValue) {
            Object array = intValueTable;

            System.arraycopy(array, lookup + 1, array, lookup,
                             lastPointer - lookup);

            intValueTable[lastPointer] = 0;
        }

        if (isLongValue) {
            Object array = longValueTable;

            System.arraycopy(array, lookup + 1, array, lookup,
                             lastPointer - lookup);

            longValueTable[lastPointer] = 0;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(10933,198,<374,8>,<380,54>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator it       = directRightsMap.get(name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(13482,196,<477,8>,<483,52>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = directRightsMap.get(name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(14017,197,<500,8>,<506,53>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = grantedRightsMap.get(name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(3444,183,<110,4>,<117,5>)
```
 // methods that implement dataOutput
    public void writeShort(int v) {

        ensureRoom(2);

        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(4695,141,<170,4>,<176,5>)
```
 public void writeChar(int v) {

        ensureRoom(2);

        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144647,257,<2488,8>,<2492,51>)
```
 commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144958,267,<2494,8>,<2498,51>)
```
 commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(37396,217,<1171,8>,<1173,79>)
```
 jdbcConvertTypes.put(Tokens.SQL_CHAR, Type.SQL_CHAR_DEFAULT);
        jdbcConvertTypes.put(Tokens.SQL_VARCHAR, Type.SQL_VARCHAR_DEFAULT);
        jdbcConvertTypes.put(Tokens.SQL_LONGVARCHAR, Type.SQL_VARCHAR_DEFAULT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(37466,224,<1172,8>,<1174,76>)
```
 jdbcConvertTypes.put(Tokens.SQL_VARCHAR, Type.SQL_VARCHAR_DEFAULT);
        jdbcConvertTypes.put(Tokens.SQL_LONGVARCHAR, Type.SQL_VARCHAR_DEFAULT);
        jdbcConvertTypes.put(Tokens.SQL_NVARCHAR, Type.SQL_VARCHAR_DEFAULT);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(23672,1688,<643,4>,<699,5>)
```
 /**
     * This method frees the <code>Clob</code> object and releases the resources the resources
     * that it holds.  The object is invalid once the <code>free</code> method
     * is called.
     * <p>
     * After <code>free</code> has been called, any attempt to invoke a
     * method other than <code>free</code> will result in a <code>SQLException</code>
     * being thrown.  If <code>free</code> is called multiple times, the subsequent
     * calls to <code>free</code> are treated as a no-op.
     * <p>
     * @throws SQLException if an error occurs releasing
     * the Clob's resources
     *
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.4
     */
    public synchronized void free() throws SQLException {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(20443,2309,<516,4>,<588,5>)
```
 /**
     * This method frees the <code>Blob</code> object and releases the resources that
     * it holds. The object is invalid once the <code>free</code>
     * method is called.
     * <p>
     * After <code>free</code> has been called, any attempt to invoke a
     * method other than <code>free</code> will result in a <code>SQLException</code>
     * being thrown.  If <code>free</code> is called multiple times, the subsequent
     * calls to <code>free</code> are treated as a no-op.
     * <p>
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * This operation closes any input and/or output streams obtained
     * via {@link #getBinaryStream()}, {@link #getBinaryStream(long, long)} or
     * {@link #setBinaryStream(long)}. <p>
     *
     * Additionally, if the property {@link #isDeleteOnFree()} is true, then
     * an attempt is made to delete the backing file.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @throws SQLException if an error occurs releasing
     * the Blob's resources
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @see #setDeleteOnFree(boolean)
     * @see #isDeleteOnFree()
     * @since JDK 1.6
     */
    public synchronized void free() throws SQLException {

        if (m_closed) {
            return;
        }

        m_closed = true;

        final List streams = new ArrayList();

        streams.addAll(m_streams);

        m_streams = null;

        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }

        if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(3263,770,<86,11>,<102,5>)
```
 {
        aggregateFunctionSet.add(OpTypes.COUNT);
        aggregateFunctionSet.add(OpTypes.SUM);
        aggregateFunctionSet.add(OpTypes.MIN);
        aggregateFunctionSet.add(OpTypes.MAX);
        aggregateFunctionSet.add(OpTypes.AVG);
        aggregateFunctionSet.add(OpTypes.EVERY);
        aggregateFunctionSet.add(OpTypes.SOME);
        aggregateFunctionSet.add(OpTypes.STDDEV_POP);
        aggregateFunctionSet.add(OpTypes.STDDEV_SAMP);
        aggregateFunctionSet.add(OpTypes.VAR_POP);
        aggregateFunctionSet.add(OpTypes.VAR_SAMP);
        aggregateFunctionSet.add(OpTypes.GROUP_CONCAT);
        aggregateFunctionSet.add(OpTypes.ARRAY_AGG);
        aggregateFunctionSet.add(OpTypes.MEDIAN);
        aggregateFunctionSet.add(OpTypes.USER_AGGREGATE);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(4547,904,<123,8>,<137,67>)
```
 subqueryAggregateExpressionSet.add(OpTypes.COUNT);
        subqueryAggregateExpressionSet.add(OpTypes.SUM);
        subqueryAggregateExpressionSet.add(OpTypes.MIN);
        subqueryAggregateExpressionSet.add(OpTypes.MAX);
        subqueryAggregateExpressionSet.add(OpTypes.AVG);
        subqueryAggregateExpressionSet.add(OpTypes.EVERY);
        subqueryAggregateExpressionSet.add(OpTypes.SOME);
        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_POP);
        subqueryAggregateExpressionSet.add(OpTypes.STDDEV_SAMP);
        subqueryAggregateExpressionSet.add(OpTypes.VAR_POP);
        subqueryAggregateExpressionSet.add(OpTypes.VAR_SAMP);
        subqueryAggregateExpressionSet.add(OpTypes.GROUP_CONCAT);
        subqueryAggregateExpressionSet.add(OpTypes.ARRAY_AGG);
        subqueryAggregateExpressionSet.add(OpTypes.MEDIAN);
        subqueryAggregateExpressionSet.add(OpTypes.USER_AGGREGATE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(59675,295,<1681,8>,<1688,34>)
```
 final int form_of_use             = 4;
        final int default_collate_catalog = 5;
        final int default_collate_schema  = 6;
        final int default_collate_name    = 7;

        //
        Iterator it = database.schemaManager.databaseObjectIterator(
            SchemaObject.CHARSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(121416,284,<3299,8>,<3307,79>)
```
 final int domain_schema      = 4;
        final int domain_name        = 5;
        final int is_deferrable      = 6;
        final int initially_deferred = 7;

        //
        //
        Iterator it =
            database.schemaManager.databaseObjectIterator(SchemaObject.DOMAIN);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSubselect.java|(8130,174,<198,8>,<200,60>)
```
 String[]  trees          = new String[expectedRows];
        String[]  fruits         = new String[expectedRows];
        String[]  sizes          = new String[expectedRows];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSubselect.java|(8191,174,<199,8>,<201,60>)
```
 String[]  fruits         = new String[expectedRows];
        String[]  sizes          = new String[expectedRows];
        String[]  colors         = new String[expectedRows];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(131001,1218,<3538,12>,<3557,59>)
```
 addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157239,1218,<4265,12>,<4284,59>)
```
 addColumn(t, "CHARACTER_SET_CATALOG", CHARACTER_DATA);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_NAME", SQL_IDENTIFIER);
            addColumn(t, "MAXIMUM_CARDINALITY", CARDINAL_NUMBER);
            addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(76582,260,<2153,12>,<2158,45>)
```
 row[collation_catalog] = database.getCatalogName().name;
            row[collation_schema]  = collationSchema;
            row[collation_name]    = collationName;
            row[pad_attribute]     = padAttribute;

            t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(238509,304,<6223,12>,<6229,45>)
```
 row[default_character_set_catalog] =
                database.getCatalogName().name;
            row[default_character_set_schema] = dcsSchema;
            row[default_character_set_name]   = dcsName;
            row[sql_path]                     = sqlPath;

            t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(240925,315,<6296,12>,<6304,21>)
```
 addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_IMPLEMENTATION_INFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(242170,304,<6335,12>,<6343,21>)
```
 addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PACKAGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(243380,285,<6374,12>,<6381,21>)
```
 addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(244553,286,<6411,12>,<6418,21>)
```
 addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_SIZING].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(245798,311,<6449,12>,<6457,21>)
```
 addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_SIZING_PROFILES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92593,1002,<2597,8>,<2616,50>)
```
 final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(125005,1002,<3393,8>,<3412,50>)
```
 final int domain_schema              = 1;
        final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
        final int numeric_precision          = 12;
        final int numeric_precision_radix    = 13;
        final int numeric_scale              = 14;
        final int datetime_precision         = 15;
        final int interval_type              = 16;
        final int interval_precision         = 17;
        final int domain_default             = 18;
        final int maximum_cardinality        = 19;
        final int dtd_identifier             = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159048,962,<4301,8>,<4320,48>)
```
 final int specific_schem           = 1;
        final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
        final int character_maximum_length = 15;
        final int character_octet_length   = 16;
        final int character_set_catalog    = 17;
        final int character_set_schema     = 18;
        final int character_set_name       = 19;
        final int collation_catalog        = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219128,1242,<5837,8>,<5856,62>)
```
 final int specific_schema                        = 1;
        final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299340,1002,<7877,8>,<7896,50>)
```
 final int user_defined_type_schema   = 1;
        final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
        final int character_set_catalog      = 15;
        final int character_set_schema       = 16;
        final int character_set_name         = 17;
        final int collation_catalog          = 18;
        final int collation_schema           = 19;
        final int collation_name             = 20;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(183344,414,<4902,12>,<4909,36>)
```
 addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);     // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(284490,380,<7513,12>,<7520,36>)
```
 addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[UDT_PRIVILEGES].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19590,353,<546,12>,<552,36>)
```
 addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206173,347,<5538,12>,<5544,36>)
```
 addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(265452,362,<7011,12>,<7017,36>)
```
 addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185913,1005,<4970,8>,<4993,9>)
```
 Table t = sysTables[ROLE_USAGE_GRANTS];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(290947,1196,<7681,8>,<7707,9>)
```
 Table t = sysTables[USAGE_PRIVILEGES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[USAGE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEM, TABLE_CAT
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[USAGE_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(39300,346,<1265,31>,<1273,9>)
```
 {
            conditions.rangeVar.joinConditions = conditionsArray;
            conditionsArray = new RangeVariableConditions[orExprList.size()];

            ArrayUtil.fillArray(conditionsArray,
                                conditions.rangeVar.whereConditions[0]);

            conditions.rangeVar.whereConditions = conditionsArray;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(39652,345,<1273,15>,<1281,9>)
```
 {
            conditions.rangeVar.whereConditions = conditionsArray;
            conditionsArray = new RangeVariableConditions[orExprList.size()];

            ArrayUtil.fillArray(conditionsArray,
                                conditions.rangeVar.joinConditions[0]);

            conditions.rangeVar.joinConditions = conditionsArray;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203021,1541,<5446,8>,<5488,9>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int routine_catalog  = 3;
        final int routine_schema   = 4;
        final int routine_name     = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206679,1533,<5553,8>,<5595,9>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int sequence_catalog = 3;
        final int sequence_schema  = 4;
        final int sequence_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(200376,314,<5371,12>,<5375,67>)
```
 row                   = t.getEmptyRowData();
            row[specific_catalog] = database.getCatalogName().name;
            row[specific_schema]  = routine.getSchemaName().name;
            row[specific_name]    = routine.getSpecificName().name;
            row[jar_catalog]      = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(207621,330,<5583,16>,<5587,71>)
```
 row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[sequence_catalog] = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191508,302,<5120,16>,<5124,53>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.parent.schema.name;
                row[table_name]       = refName.parent.name;
                row[column_name]      = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(259721,297,<6841,16>,<6845,52>)
```
 row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.parent.schema.name;
                row[table_name]      = refName.parent.name;
                row[column_name]     = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(242110,364,<6334,12>,<6343,21>)
```
 addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PACKAGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(243320,345,<6373,12>,<6381,21>)
```
 addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(146322,263,<3962,12>,<3969,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JARS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158677,269,<4289,12>,<4296,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[PARAMETERS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(122538,213,<3332,16>,<3336,50>)
```
 data[domain_name]        = domain.getName().name;
                data[is_deferrable]      = Tokens.T_NO;
                data[initially_deferred] = Tokens.T_NO;

                t.insertSys(session, store, data);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(254432,208,<6685,16>,<6689,49>)
```
 row[table_name]         = table.getName().name;
                row[is_deferable]       = Tokens.T_NO;
                row[initially_deferred] = Tokens.T_NO;

                t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232073,1267,<6074,12>,<6093,63>)
```
 row[is_udt_dependent]                       = null;
            row[result_cast_from_data_type]             = null;
            row[result_cast_as_locator]                 = null;
            row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232265,1267,<6077,12>,<6096,63>)
```
 row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
            row[result_cast_scope_name]                 = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(16450,1447,<439,4>,<477,5>)
```
 /**
     * Retrieves the url alias (network name) of the i'th database
     * that this Server hosts.
     *
     * @param index the index of the url alias upon which to report
     * @param asconfigured if true, report the configured value, else
     *      the live value
     * @return the url alias component of the i'th database
     *      that this Server hosts, or null if no such name exists.
     *
     * @jmx.managed-operation
     *  impact="INFO"
     *  description="url alias component of the i'th hosted Database"
     *
     * @jmx.managed-operation-parameter
     *      name="index"
     *      type="int"
     *      position="0"
     *      description="This Server's index for the hosted Database"
     *
     * @jmx.managed-operation-parameter
     *      name="asconfigured"
     *      type="boolean"
     *      position="1"
     *      description="if true, the configured value, else the live value"
     */
    public String getDatabaseName(int index, boolean asconfigured) {

        if (asconfigured) {
            return serverProperties.getProperty(ServerProperties.sc_key_dbname
                                                + "." + index);
        } else if (getState() == ServerConstants.SERVER_STATE_ONLINE) {
            return (dbAlias == null || index < 0 || index >= dbAlias.length)
                   ? null
                   : dbAlias[index];
        } else {
            return null;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(17903,1424,<479,4>,<518,5>)
```
 /**
     * Retrieves the HSQLDB path descriptor (uri) of the i'th
     * Database that this Server hosts.
     *
     * @param index the index of the uri upon which to report
     * @param asconfigured if true, report the configured value, else
     *      the live value
     * @return the HSQLDB database path descriptor of the i'th database
     *      that this Server hosts, or null if no such path descriptor
     *      exists
     *
     * @jmx.managed-operation
     *  impact="INFO"
     *  description="For i'th hosted database"
     *
     * @jmx.managed-operation-parameter
     *      name="index"
     *      type="int"
     *      position="0"
     *      description="This Server's index for the hosted Database"
     *
     * @jmx.managed-operation-parameter
     *      name="asconfigured"
     *      type="boolean"
     *      position="1"
     *      description="if true, the configured value, else the live value"
     */
    public String getDatabasePath(int index, boolean asconfigured) {

        if (asconfigured) {
            return serverProperties.getProperty(
                ServerProperties.sc_key_database + "." + index);
        } else if (getState() == ServerConstants.SERVER_STATE_ONLINE) {
            return (dbPath == null || index < 0 || index >= dbPath.length)
                   ? null
                   : dbPath[index];
        } else {
            return null;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211353,470,<5689,16>,<5701,71>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(316520,471,<8339,16>,<8351,68>)
```
 HsqlName refName = (HsqlName) references.get(i);

                if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                = t.getEmptyRowData();
                row[view_catalog]  = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50185,682,<1399,8>,<1418,9>)
```
 Table t = sysTables[ADMINISTRABLE_ROLE_AUTHORIZATIONS];

        if (t == null) {
            t = createBlankTable(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS]);

            addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "ROLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(52057,614,<1455,8>,<1473,9>)
```
 Table t = sysTables[APPLICABLE_ROLES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[APPLICABLE_ROLES]);

            addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "ROLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[APPLICABLE_ROLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(18840,169,<616,16>,<618,63>)
```
 return ArrayUtil.find(core.mainCols, colIndex) != -1
                       && (core.mainCols.length != 1
                           || core.mainTable != core.refTable);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(19087,168,<621,16>,<623,63>)
```
 return ArrayUtil.find(core.refCols, colIndex) != -1
                       && (core.mainCols.length != 1
                           || core.mainTable != core.refTable);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92693,2024,<2599,8>,<2638,50>)
```
 final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219252,2504,<5839,8>,<5878,62>)
```
 final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20179,395,<563,8>,<575,34>)
```
 final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
        Object[]       row;
        OrderedHashSet columnList;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82858,338,<2343,8>,<2354,22>)
```
 final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86715,333,<2461,8>,<2472,22>)
```
 final int udt_name      = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
        final int column_name   = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(3148,240,<89,8>,<95,9>)
```
 for (int i = 0; i < core.mainCols.length; i++) {
            Type dataType = t.getColumn(core.mainCols[i]).getDataType();

            if (dataType.isLobType()) {
                throw Error.error(ErrorCode.X_42534);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(7762,262,<227,12>,<233,13>)
```
 for (int i = 0; i < core.refCols.length; i++) {
                Type dataType = table.getColumn(core.refCols[i]).getDataType();

                if (dataType.isLobType()) {
                    throw Error.error(ErrorCode.X_42534);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(8275,284,<241,12>,<248,13>)
```
 for (int i = 0; i < core.mainCols.length; i++) {
                Type dataType =
                    table.getColumn(core.mainCols[i]).getDataType();

                if (dataType.isLobType()) {
                    throw Error.error(ErrorCode.X_42534);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(145049,405,<3915,12>,<3926,21>)
```
 addColumn(t, "JAR_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JAR_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(199251,409,<5331,12>,<5342,21>)
```
 addColumn(t, "JAR_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203296,1285,<5454,8>,<5490,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206954,1277,<5561,8>,<5597,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

        while (it.hasNext()) {
            Routine        routine = (Routine) it.next();
            OrderedHashSet set     = routine.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(102495,322,<3634,18>,<3643,17>)
```
 catch (HsqlException ex) {
                    ex.setLevel(compileContext.subqueryDepth);

                    if (lastError == null
                            || lastError.getLevel() < ex.getLevel()) {
                        lastError = ex;
                    }

                    rewind(position);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(142893,317,<5162,18>,<5171,17>)
```
 catch (HsqlException ex) {
                    ex.setLevel(compileContext.subqueryDepth);

                    if (lastError == null
                            || lastError.getLevel() < ex.getLevel()) {
                        lastError = ex;
                    }

                    rewind(pos);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>)
```
 reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>)
```
 reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>)
```
 reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>)
```
 reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>)
```
 reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>)
```
 reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>)
```
 reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>)
```
 reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>)
```
 reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>)
```
 reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>)
```
 reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>)
```
 reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>)
```
 reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>)
```
 reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)
```
 reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(6512,296,<247,4>,<258,5>)
```
 public Object[] getCurrent() {

        if (currentPos < 0 || currentPos >= size) {
            return null;
        }

        if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }

        return table[currentPos - currentOffset];
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(3457,393,<108,4>,<122,5>)
```
 /**
     * Returns the current row object. Type of object is implementation defined.
     */
    public Object[] getCurrent() {

        if (currentPos < 0 || currentPos >= size) {
            return null;
        }

        if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }

        return table[currentPos - currentOffset];
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/preprocessor/Tokenizer.java|(4597,360,<151,32>,<164,13>)
```
 {
                currentIndex++;

                if(currentIndex < len &&
                        cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;

                    tokenType = Token.EQ;
                } else {
                    tokenType = Token.ASSIGN;
                }

                return tokenType;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/preprocessor/Tokenizer.java|(4986,358,<165,28>,<178,13>)
```
 {
                currentIndex++;

                if (currentIndex < len &&
                        cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;

                    tokenType = Token.LTE;
                } else {
                    tokenType = Token.LT;
                }

                return tokenType;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/preprocessor/Tokenizer.java|(5373,358,<179,28>,<192,13>)
```
 {
                currentIndex++;

                if (currentIndex < len &&
                        cmd.charAt(currentIndex) == Token.ASSIGN) {
                    currentIndex++;

                    tokenType = Token.GTE;
                } else {
                    tokenType = Token.GT;
                }

                return tokenType;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152691,237,<5557,8>,<5564,17>)
```
 Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
        readThis(Tokens.CLOSEBRACKET);

        return c;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153513,239,<5592,8>,<5599,17>)
```
 Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
        readThis(Tokens.CLOSEBRACKET);

        return c;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(186786,317,<4423,12>,<4431,24>)
```
 if (isUpdatable) {
                if (resultMetaData.colIndexes[columnIndex - 1] > 0
                        && resultMetaData.columns[columnIndex - 1]
                            .isWriteable()) {
                    blob.setWritable(this, columnIndex - 1);
                }
            }

            return blob;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(189107,317,<4485,12>,<4493,24>)
```
 if (isUpdatable) {
                if (resultMetaData.colIndexes[columnIndex - 1] > 0
                        && resultMetaData.columns[columnIndex - 1]
                            .isWriteable()) {
                    clob.setWritable(this, columnIndex - 1);
                }
            }

            return clob;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9078,732,<341,4>,<369,5>)
```
 NodeAVL setLeft(PersistentStore store, NodeAVL n) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nLeft = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9816,736,<371,4>,<399,5>)
```
 NodeAVL setRight(PersistentStore store, NodeAVL n) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nRight = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(19697,322,<601,12>,<610,31>)
```
 if (memory) {
                rowSet = new RowSetNavigatorData(session, this);
            } else {
                rowSet = new RowSetNavigatorDataTable(session, this);
            }

            rowSet.copy(navigator, leftQueryExpression.unionColumnMap);
            navigator.release();

            navigator = rowSet;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(20127,338,<616,12>,<625,36>)
```
 if (memory) {
                rowSet = new RowSetNavigatorData(session, this);
            } else {
                rowSet = new RowSetNavigatorDataTable(session, this);
            }

            rowSet.copy(rightNavigator, rightQueryExpression.unionColumnMap);
            rightNavigator.release();

            rightNavigator = rowSet;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(2534,528,<63,12>,<74,49>)
```
 int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(largeBlock, blockOffset * lobBlockSize,
                             dataBytes, dataBlockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(3683,528,<95,12>,<106,49>)
```
 int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(dataBytes, dataBlockOffset * lobBlockSize,
                             largeBlock, blockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(80454,418,<2728,20>,<2737,75>)
```
 if (column.getName().comment == null) {
                        continue;
                    }

                    sb.setLength(0);
                    sb.append(Tokens.T_COMMENT).append(' ').append(
                        Tokens.T_ON);
                    sb.append(' ').append(Tokens.T_COLUMN).append(' ');
                    sb.append(
                        table.getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81251,342,<2746,16>,<2753,77>)
```
 if (table.getName().comment == null) {
                    continue;
                }

                sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(82045,346,<2766,16>,<2773,78>)
```
 if (object.getName().comment == null) {
                    continue;
                }

                sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_ROUTINE).append(' ');
                sb.append(object.getName().getSchemaQualifiedStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152525,308,<5553,8>,<5559,71>)
```
 readThis(Tokens.COMMA);

        Expression e           = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153347,310,<5588,8>,<5594,71>)
```
 readThis(Tokens.COMMA);

        Expression e2          = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(4723,556,<169,4>,<189,5>)
```
 NodeAVL getLeft(PersistentStore store) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (node.iLeft == NO_POS) {
            return null;
        }

        if (node.nLeft == null || !node.nLeft.isInMemory()) {
            node.nLeft         = findNode(store, node.iLeft);
            node.nLeft.nParent = node;
        }

        return node.nLeft;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(5285,564,<191,4>,<211,5>)
```
 NodeAVL getRight(PersistentStore store) {

        NodeAVLDiskLarge node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

        if (node.iRight == NO_POS) {
            return null;
        }

        if (node.nRight == null || !node.nRight.isInMemory()) {
            node.nRight         = findNode(store, node.iRight);
            node.nRight.nParent = node;
        }

        return node.nRight;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(95634,573,<3340,4>,<3364,5>)
```
 Expression XreadDatetimeValueExpression() {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(96213,573,<3366,4>,<3390,5>)
```
 Expression XreadIntervalValueExpression() {

        Expression e = XreadDateTimeIntervalTerm();

        while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }

        return e;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(90711,365,<3136,12>,<3148,13>)
```
 if (token.tokenType == Tokens.TRUE) {
                read();
            } else if (token.tokenType == Tokens.FALSE) {
                read();

                not = !not;
            } else if (token.tokenType == Tokens.UNKNOWN) {
                read();

                unknown = true;
            } else {
                throw unexpectedToken();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(101205,369,<3582,12>,<3594,13>)
```
 if (token.tokenType == Tokens.TRUE) {
                read();
            } else if (token.tokenType == Tokens.FALSE) {
                read();

                isNot = !isNot;
            } else if (token.tokenType == Tokens.UNKNOWN) {
                read();

                unknown = true;
            } else {
                throw unexpectedToken();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(10545,198,<376,20>,<378,71>)
```
 sb.append(getContextSQL(nodes[LEFT].nodes[LEFT])).append(
                        ' ').append(Tokens.T_IS).append(' ').append(
                        Tokens.T_NOT).append(' ').append(Tokens.T_NULL)
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(10893,228,<384,20>,<387,38>)
```
 sb.append(getContextSQL(nodes[LEFT].nodes[LEFT])).append(
                        ' ').append(Tokens.T_IS).append(' ').append(
                        Tokens.T_DISTINCT).append(' ').append(
                        Tokens.T_FROM)
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(124703,7405,<3032,4>,<3207,5>)
```
 /**
     * The SEQUENCES view has one row for each external sequence
     * generator. <p>
     *
     * <b>Definition:</b> <p>
     *
     * <pre class="SqlCodeExample">
     *
     *      SEQUENCE_CATALOG     VARCHAR NULL,
     *      SEQUENCE_SCHEMA      VARCHAR NULL,
     *      SEQUENCE_NAME        VARCHAR NOT NULL,
     *      DATA_TYPE            CHARACTER_DATA
     *      DATA_TYPE            CHARACTER_DATA
     *      NUMERIC_PRECISION    CARDINAL_NUMBER
     *      NUMERIC_PRECISION_RADIX CARDINAL_NUMBER
     *      NUMERIC_SCALE        CARDINAL_NUMBER
     *      MAXIMUM_VALUE        VARCHAR NOT NULL,
     *      MINIMUM_VALUE        VARCHAR NOT NULL,
     *      INCREMENT            VARCHAR NOT NULL,
     *      CYCLE_OPTION         VARCHAR {'YES', 'NO'},
     *      START_WITH           VARCHAR NOT NULL,
     *      DECLARED_DATA_TYPE   CHARACTER_DATA
     *      DECLARED_NUMERIC_PRECISION CARDINAL_NUMBER
     *      DECLARED_NUMERIC_SCALE     CARDINAL_NUMBER
     *
     * </pre>
     *
     * <b>DESCRIPTION:</b><p>
     *
     * <ol>
     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, and
     *      SEQUENCE_NAME are the catalog name, unqualified schema name,
     *      and qualified identifier, respectively, of the sequence generator
     *      being described. <p>
     *
     * <li> The values of SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, and
     *      DTD_IDENTIFIER are the values of OBJECT_CATALOG, OBJECT_SCHEMA,
     *      OBJECT_NAME, and DTD_IDENTIFIER, respectively, of the row in
     *      DATA_TYPE_DESCRIPTOR (not yet implemented) that describes the data
     *      type of the sequence generator. <p>
     *
     * <li> The values of MAXIMUM_VALUE, MINIMUM_VALUE, and INCREMENT are the
     *      character representations of maximum value, minimum value,
     *      and increment, respectively, of the sequence generator being
     *      described. <p>
     *
     * <li> The values of CYCLE_OPTION have the following meanings: <p>
     *
     *      <table border cellpadding="3">
     *          <tr>
     *              <td nowrap>YES</td>
     *              <td nowrap>The cycle option of the sequence generator
     *                         is CYCLE.</td>
     *          <tr>
     *              <td nowrap>NO</td>
     *              <td nowrap>The cycle option of the sequence generator is
     *                         NO CYCLE.</td>
     *          </tr>
     *      </table> <p>
     *
     * <li> The value of START_WITH is HSQLDB-specific (not in the SQL 200n
     *      spec).  <p>
     *
     *      It is the character representation of the START WITH value. <p>
     *
     * <li> The value of NEXT_VALUE is HSQLDB-specific (not in the SQL 200n)<p>
     *      This is the character representation of the value that
     *      would be generated by NEXT VALUE FOR when this sequence
     *      is materialized in an SQL statement. <p>
     * </ol>
     *
     * @return Table
     */
    final Table SEQUENCES(Session session, PersistentStore store) {

        Table t = sysTables[SEQUENCES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[SEQUENCES]);

            addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }

        //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(132114,4459,<3209,4>,<3312,5>)
```
 final Table SYSTEM_SEQUENCES(Session session, PersistentStore store) {

        Table t = sysTables[SYSTEM_SEQUENCES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[SYSTEM_SEQUENCES]);

            addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "MAXIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "MINIMUM_VALUE", CHARACTER_DATA);
            addColumn(t, "INCREMENT", CHARACTER_DATA);
            addColumn(t, "CYCLE_OPTION", YES_OR_NO);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SEQUENCES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
        }

        //
        final int sequence_catalog           = 0;
        final int sequence_schema            = 1;
        final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);

        while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? "YES"
                                                                 : "NO";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }

        return t;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(3714,269,<100,8>,<104,53>)
```
 token.namePrefix               = namePrefix;
        token.namePrePrefix            = namePrePrefix;
        token.namePrePrePrefix         = namePrePrePrefix;
        token.charsetSchema            = charsetSchema;
        token.charsetName              = charsetName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(3767,269,<101,8>,<105,52>)
```
 token.namePrePrefix            = namePrePrefix;
        token.namePrePrePrefix         = namePrePrePrefix;
        token.charsetSchema            = charsetSchema;
        token.charsetName              = charsetName;
        token.fullString               = fullString;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(44715,385,<1231,8>,<1241,35>)
```
 // column number mappings
        final int itable_cat   = 0;
        final int itable_schem = 1;
        final int itable_name  = 2;
        final int idsd         = 3;
        final int ifile_path   = 4;
        final int ifile_enc    = 5;
        final int ifs          = 6;
        final int ivfs         = 7;
        final int ilvfs        = 8;
        final int iif          = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,525,<2595,8>,<2605,49>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124955,491,<3392,8>,<3401,49>)
```
 final int domain_catalog             = 0;
        final int domain_schema              = 1;
        final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158966,505,<4299,8>,<4309,47>)
```
 // column number mappings
        final int specific_cat             = 0;
        final int specific_schem           = 1;
        final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(177991,425,<4758,8>,<4768,39>)
```
 // Column number mappings
        final int grantor          = 0;
        final int grantee          = 1;
        final int table_name       = 2;
        final int specific_catalog = 3;
        final int specific_schema  = 4;
        final int specific_name    = 5;
        final int routine_catalog  = 6;
        final int routine_schema   = 7;
        final int routine_name     = 8;
        final int privilege_type   = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(189989,425,<5078,8>,<5088,39>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int routine_catalog  = 3;
        final int routine_schema   = 4;
        final int routine_name     = 5;
        final int table_catalog    = 6;
        final int table_schema     = 7;
        final int table_name       = 8;
        final int column_name      = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(194716,425,<5205,8>,<5215,39>)
```
 // column number mappings
        final int grantor          = 0;
        final int grantee          = 1;
        final int specific_catalog = 2;
        final int specific_schema  = 3;
        final int specific_name    = 4;
        final int routine_catalog  = 5;
        final int routine_schema   = 6;
        final int routine_name     = 7;
        final int privilege_type   = 8;
        final int is_grantable     = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219032,645,<5835,8>,<5845,61>)
```
 // column number mappings
        final int specific_catalog                       = 0;
        final int specific_schema                        = 1;
        final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(276067,525,<7290,8>,<7300,49>)
```
 // column number mappings
        final int trigger_catalog            = 0;
        final int trigger_schema             = 1;
        final int trigger_name               = 2;
        final int event_manipulation         = 3;
        final int event_object_catalog       = 4;
        final int event_object_schema        = 5;
        final int event_object_table         = 6;
        final int action_order               = 7;
        final int action_condition           = 8;
        final int action_statement           = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299290,491,<7876,8>,<7885,49>)
```
 final int user_defined_type_catalog  = 0;
        final int user_defined_type_schema   = 1;
        final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28409,415,<701,8>,<711,38>)
```
 // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36902,445,<893,8>,<903,41>)
```
 // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,415,<1135,8>,<1145,38>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(54941,435,<1333,8>,<1343,40>)
```
 // column number mappings
        final int itable_cat        = 0;
        final int itable_schem      = 1;
        final int itable_name       = 2;
        final int inon_unique       = 3;
        final int iindex_qualifier  = 4;
        final int iindex_name       = 5;
        final int itype             = 6;
        final int iordinal_position = 7;
        final int icolumn_name      = 8;
        final int iasc_or_desc      = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(68868,495,<1653,8>,<1663,46>)
```
 // column number mappings
        final int specific_cat            = 0;
        final int specific_schem          = 1;
        final int procedure_name          = 2;
        final int parameter_name          = 3;
        final int parameter_mode          = 4;
        final int data_type_sql_id        = 5;
        final int data_type               = 6;
        final int numeric_precision       = 7;
        final int byte_length             = 8;
        final int numeric_scale           = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(104732,560,<2532,8>,<2544,42>)
```
 //-----------------------------------------
        // Same as SYSTEM_TYPEINFO
        //-----------------------------------------
        final int itype_name          = 0;
        final int idata_type          = 1;
        final int iprecision          = 2;
        final int iliteral_prefix     = 3;
        final int iliteral_suffix     = 4;
        final int icreate_params      = 5;
        final int inullable           = 6;
        final int icase_sensitive     = 7;
        final int isearchable         = 8;
        final int iunsigned_attribute = 9;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(17361,880,<376,8>,<392,50>)
```
 dbMeta.put(hsqldb_full_log_replay,
                   HsqlProperties.getMeta(hsqldb_full_log_replay,
                                          SQL_PROPERTY, false));
        dbMeta.put(sql_ref_integrity,
                   HsqlProperties.getMeta(sql_ref_integrity, SQL_PROPERTY,
                                          true));

        // SQL reserved words not allowed as some identifiers
        dbMeta.put(sql_enforce_names,
                   HsqlProperties.getMeta(sql_enforce_names, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_regular_names,
                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_refs,
                   HsqlProperties.getMeta(sql_enforce_refs, SQL_PROPERTY,
                                          false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(17699,934,<383,8>,<400,50>)
```
 // SQL reserved words not allowed as some identifiers
        dbMeta.put(sql_enforce_names,
                   HsqlProperties.getMeta(sql_enforce_names, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_regular_names,
                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_refs,
                   HsqlProperties.getMeta(sql_enforce_refs, SQL_PROPERTY,
                                          false));

        // char padding to size and exception if data is too long
        dbMeta.put(sql_enforce_size,
                   HsqlProperties.getMeta(sql_enforce_size, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_types,
                   HsqlProperties.getMeta(sql_enforce_types, SQL_PROPERTY,
                                          false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(21003,759,<445,8>,<458,50>)
```
 dbMeta.put(sql_longvar_is_lob,
                   HsqlProperties.getMeta(sql_longvar_is_lob, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_pad_space,
                   HsqlProperties.getMeta(sql_pad_space, SQL_PROPERTY, true));
        dbMeta.put(sql_ignore_case,
                   HsqlProperties.getMeta(sql_ignore_case, SQL_PROPERTY,
                                          false));
        dbMeta.put(hsqldb_write_delay,
                   HsqlProperties.getMeta(hsqldb_write_delay, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_large_data,
                   HsqlProperties.getMeta(hsqldb_large_data, SQL_PROPERTY,
                                          false));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121419,626,<2946,8>,<2967,67>)
```
 String  tableName;
        Grantee granteeObject;

// intermediate holders
        User     user;
        Iterator tables;
        Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
        final int is_grantable   = 7;

        // enumerations
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(138864,621,<3373,8>,<3392,67>)
```
 String  tableName;
        Grantee granteeObject;
        String  privilege;

        // intermediate holders
        Iterator tables;
        Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
        final int with_hierarchy = 7;
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31565,238,<829,8>,<833,47>)
```
 boxAutoRefresh.setMnemonic(KeyEvent.VK_C);
        boxShowSchemas.setMnemonic(KeyEvent.VK_Y);
        boxAutoCommit.setMnemonic(KeyEvent.VK_A);
        boxShowSys.setMnemonic(KeyEvent.VK_Y);
        boxShowGrid.setMnemonic(KeyEvent.VK_G);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31616,236,<830,8>,<834,48>)
```
 boxShowSchemas.setMnemonic(KeyEvent.VK_Y);
        boxAutoCommit.setMnemonic(KeyEvent.VK_A);
        boxShowSys.setMnemonic(KeyEvent.VK_Y);
        boxShowGrid.setMnemonic(KeyEvent.VK_G);
        boxRowCounts.setMnemonic(KeyEvent.VK_C);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31667,232,<831,8>,<835,46>)
```
 boxAutoCommit.setMnemonic(KeyEvent.VK_A);
        boxShowSys.setMnemonic(KeyEvent.VK_Y);
        boxShowGrid.setMnemonic(KeyEvent.VK_G);
        boxRowCounts.setMnemonic(KeyEvent.VK_C);
        boxLogging.setMnemonic(KeyEvent.VK_L);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31717,238,<832,8>,<836,55>)
```
 boxShowSys.setMnemonic(KeyEvent.VK_Y);
        boxShowGrid.setMnemonic(KeyEvent.VK_G);
        boxRowCounts.setMnemonic(KeyEvent.VK_C);
        boxLogging.setMnemonic(KeyEvent.VK_L);
        rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31764,238,<833,8>,<837,46>)
```
 boxShowGrid.setMnemonic(KeyEvent.VK_G);
        boxRowCounts.setMnemonic(KeyEvent.VK_C);
        boxLogging.setMnemonic(KeyEvent.VK_L);
        rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
        rbNativeLF.setMnemonic(KeyEvent.VK_N);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31812,235,<834,8>,<838,44>)
```
 boxRowCounts.setMnemonic(KeyEvent.VK_C);
        boxLogging.setMnemonic(KeyEvent.VK_L);
        rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
        rbNativeLF.setMnemonic(KeyEvent.VK_N);
        rbJavaLF.setMnemonic(KeyEvent.VK_J);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31861,232,<835,8>,<839,45>)
```
 boxLogging.setMnemonic(KeyEvent.VK_L);
        rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
        rbNativeLF.setMnemonic(KeyEvent.VK_N);
        rbJavaLF.setMnemonic(KeyEvent.VK_J);
        rbMotifLF.setMnemonic(KeyEvent.VK_M);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(31908,240,<836,8>,<840,54>)
```
 rbAllSchemas.setMnemonic(KeyEvent.VK_ASTERISK);
        rbNativeLF.setMnemonic(KeyEvent.VK_N);
        rbJavaLF.setMnemonic(KeyEvent.VK_J);
        rbMotifLF.setMnemonic(KeyEvent.VK_M);
        mitemUpdateSchemas.setMnemonic(KeyEvent.VK_U);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50791,233,<1226,16>,<1231,49>)
```
 row[idelete_rule]    = deleteRule;
                row[ifk_name]        = fkName;
                row[ipk_name]        = pkName;
                row[ideferrability]  = deferrability;

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(57825,267,<1405,20>,<1410,53>)
```
 row[icardinality]      = cardinality;
                    row[ipages]            = pages;
                    row[irow_cardinality]  = rowCardinality;
                    row[ifilter_condition] = filterCondition;

                    t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83905,187,<2014,8>,<2019,41>)
```
 row[iremark]       = remark;
        row[iptype]        = pType;
        row[iporigin]      = origin;
        row[isn]           = specificName;

        t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(52564,296,<1765,24>,<1770,45>)
```
 opType                         = e.opType;
                        opTypes[indexedColumnCount]    = e.opType;
                        opTypeEnd                      = OpTypes.MAX;
                        opTypesEnd[indexedColumnCount] = OpTypes.MAX;

                        indexedColumnCount++;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(53845,296,<1795,24>,<1800,45>)
```
 opType                         = OpTypes.NOT;
                        opTypes[indexedColumnCount]    = OpTypes.NOT;
                        opTypeEnd                      = e.opType;
                        opTypesEnd[indexedColumnCount] = e.opType;

                        indexedColumnCount++;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(12929,496,<293,8>,<301,52>)
```
 textMeta.put(textdb_quoted,
                     HsqlProperties.getMeta(textdb_quoted, SQL_PROPERTY,
                                            true));
        textMeta.put(textdb_all_quoted,
                     HsqlProperties.getMeta(textdb_all_quoted, SQL_PROPERTY,
                                            false));
        textMeta.put(textdb_ignore_first,
                     HsqlProperties.getMeta(textdb_ignore_first, SQL_PROPERTY,
                                            false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(19926,422,<425,8>,<432,50>)
```
 dbMeta.put(sql_double_nan,
                   HsqlProperties.getMeta(sql_double_nan, SQL_PROPERTY, true));
        dbMeta.put(sql_syntax_db2,
                   HsqlProperties.getMeta(sql_syntax_db2, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_mss,
                   HsqlProperties.getMeta(sql_syntax_mss, SQL_PROPERTY,
                                          false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(21442,486,<453,8>,<461,50>)
```
 dbMeta.put(hsqldb_write_delay,
                   HsqlProperties.getMeta(hsqldb_write_delay, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_large_data,
                   HsqlProperties.getMeta(hsqldb_large_data, SQL_PROPERTY,
                                          false));
        dbMeta.put(hsqldb_files_space,
                   HsqlProperties.getMeta(hsqldb_files_space, SQL_PROPERTY,
                                          false));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(308741,237,<8114,16>,<8118,49>)
```
 row                = t.getEmptyRowData();
                row[view_catalog]  = viewCatalog;
                row[view_schema]   = viewSchema;
                row[view_name]     = viewName;
                row[table_catalog] = viewCatalog;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50200,257,<1215,16>,<1219,52>)
```
 row                  = t.getEmptyRowData();
                row[ipk_table_cat]   = pkTableCatalog;
                row[ipk_table_schem] = pkTableSchema;
                row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(57132,274,<1393,20>,<1397,55>)
```
 row                    = t.getEmptyRowData();
                    row[itable_cat]        = tableCatalog;
                    row[itable_schem]      = tableSchema;
                    row[itable_name]       = tableName;
                    row[inon_unique]       = nonUnique;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(12562,198,<360,20>,<362,70>)
```
 name = (String) expressions[0].getValue(session);
                    name = (String) Type.SQL_VARCHAR.trim(session, name, ' ',
                                                          true, true);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(18248,198,<509,20>,<511,70>)
```
 user = (String) expressions[0].getValue(session);
                    user = (String) Type.SQL_VARCHAR.trim(session, user, ' ',
                                                          true, true);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(99989,1409,<2369,24>,<2393,21>)
```
 {
                        Matcher mathMatcher =
                                mathAsgnPattern.matcher(iterableAssignmentStr);
                        if (mathMatcher.matches()) {
                            shared.userVars.put(
                                    mathMatcher.group(1), Long.toString(
                                    Calculator.reassignValue(
                                    mathMatcher.group(1),
                                    shared.userVars, mathMatcher.group(2),
                                    (mathMatcher.groupCount() < 3)
                                    ? null : mathMatcher.group(3))));
                        } else {
                            mathMatcher =
                                    mathPattern.matcher(iterableAssignmentStr);
                            if (mathMatcher.matches())
                                shared.userVars.put(
                                        mathMatcher.group(1), Long.toString(
                                        new Calculator(
                                        ((mathMatcher.groupCount() > 1
                                        && mathMatcher.group(2) != null)
                                        ? mathMatcher.group(2)
                                        : ""),
                                        shared.userVars).reduce(0, false)));
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(97979,993,<2329,16>,<2345,17>)
```
 Matcher mathMatcher =
                        mathAsgnPattern.matcher(initAssignmentStr);
                if (mathMatcher.matches()) {
                    shared.userVars.put(mathMatcher.group(1), Long.toString(
                            Calculator.reassignValue(mathMatcher.group(1),
                            shared.userVars, mathMatcher.group(2),
                            (mathMatcher.groupCount() < 3)
                            ? null : mathMatcher.group(3))));
                } else {
                    mathMatcher = mathPattern.matcher(initAssignmentStr);
                    if (mathMatcher.matches())
                        shared.userVars.put(mathMatcher.group(1), Long.toString(
                                new Calculator(((mathMatcher.groupCount() > 1
                                && mathMatcher.group(2) != null)
                                ? mathMatcher.group(2)
                                : ""), shared.userVars).reduce(0, false)));
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManager2PL.java|(4229,584,<139,4>,<152,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(7785,584,<251,4>,<264,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(6055,584,<189,4>,<202,5>)
```
 public void rollbackSavepoint(Session session, int index) {

        long timestamp = session.sessionContext.savepointTimestamps.get(index);
        Integer oi = (Integer) session.sessionContext.savepoints.get(index);
        int     start  = oi.intValue();

        while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }

        rollbackPartial(session, start, timestamp);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(3775,209,<101,8>,<105,61>)
```
 // column defaults
        check =
            c.core.updateAction == SchemaObject.ReferentialAction.SET_DEFAULT
            || c.core.deleteAction
               == SchemaObject.ReferentialAction.SET_DEFAULT;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(4442,172,<120,8>,<122,62>)
```
 check = c.core.updateAction == SchemaObject.ReferentialAction.SET_NULL
                || c.core.deleteAction
                   == SchemaObject.ReferentialAction.SET_NULL;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(74944,543,<2049,37>,<2064,13>)
```
 {
                int precision = DateTimeType.defaultTimeFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Number) nodes[0].valueData).intValue();
                }

                if (precision == DateTimeType.defaultTimeFractionPrecision) {
                    return name;
                }

                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
                sb.append(Tokens.T_CLOSEBRACKET);

                return sb.toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(75569,577,<2066,42>,<2082,13>)
```
 {
                int precision = DateTimeType.defaultTimestampFractionPrecision;

                if (nodes.length > 0 && nodes[0] != null) {
                    precision = ((Number) nodes[0].valueData).intValue();
                }

                if (precision
                        == DateTimeType.defaultTimestampFractionPrecision) {
                    return name;
                }

                sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);
                sb.append(Tokens.T_CLOSEBRACKET);

                return sb.toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(39855,346,<1129,8>,<1138,24>)
```
 if (extraUpdateTables != null) {
            for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
        }

        return rowCount;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(49008,346,<1396,8>,<1405,24>)
```
 if (extraDeleteTables != null) {
            for (int i = 0; i < extraDeleteTables.size(); i++) {
                Table currentTable = (Table) extraDeleteTables.get(i);

                currentTable.fireTriggers(session, Trigger.DELETE_AFTER,
                                          navigator);
            }
        }

        return rowCount;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(12263,483,<320,20>,<330,21>)
```
 int     value = ((Integer) parameters[0]).intValue();
                    boolean check = parameters[1] == null;

                    session.checkAdmin();
                    session.checkDDLWrite();

                    if (check && !session.database.getProperties()
                            .validateProperty(HsqlDatabaseProperties
                                .hsqldb_cache_rows, value)) {
                        throw Error.error(ErrorCode.X_42556);
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(13111,483,<341,20>,<351,21>)
```
 int     value = ((Integer) parameters[0]).intValue();
                    boolean check = parameters[1] == null;

                    session.checkAdmin();
                    session.checkDDLWrite();

                    if (check && !session.database.getProperties()
                            .validateProperty(HsqlDatabaseProperties
                                .hsqldb_cache_size, value)) {
                        throw Error.error(ErrorCode.X_42556);
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(80465,297,<2766,4>,<2775,5>)
```
 /**
     * For system operations outside transaction control
     */
    public void insertData(Session session, PersistentStore store,
                           Object[] data) {

        Row row = (Row) store.getNewCachedObject(session, data, false);

        store.indexRow(session, row);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(80768,276,<2777,4>,<2786,5>)
```
 /**
     * Used by the system tables only
     */
    public void insertSys(Session session, PersistentStore store,
                          Object[] data) {

        Row row = (Row) store.getNewCachedObject(session, data, false);

        store.indexRow(session, row);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(60120,525,<1649,77>,<1658,21>)
```
 {
                        dataType =
                            CharacterType
                                .getCharacterType(Types.SQL_CLOB,
                                                  nodes[0].dataType.precision
                                                  + nodes[1].dataType
                                                      .precision, nodes[0]
                                                      .dataType
                                                      .getCollation());
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(60651,528,<1658,27>,<1667,21>)
```
 {
                        dataType =
                            CharacterType
                                .getCharacterType(Types.SQL_VARCHAR,
                                                  nodes[0].dataType.precision
                                                  + nodes[1].dataType
                                                      .precision, nodes[0]
                                                      .dataType
                                                      .getCollation());
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(17970,521,<581,4>,<599,5>)
```
 /**
     * add transaction info to a row just loaded from the cache. called only
     * for CACHED tables
     */
    public void setTransactionInfo(PersistentStore store,
                                   CachedObject object) {

        if (object.isMemory()) {
            return;
        }

        Row row = (Row) object;

        if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(10981,521,<355,4>,<373,5>)
```
 /**
     * add transaction info to a row just loaded from the cache. called only
     * for CACHED tables
     */
    public void setTransactionInfo(PersistentStore store,
                                   CachedObject object) {

        if (object.isMemory()) {
            return;
        }

        Row row = (Row) object;

        if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(5134,818,<138,4>,<159,5>)
```
 public synchronized int decode(byte[] source, int sourceOffset,
                                   int length, byte[] dest, int destOffset) {

        if (inCipher == null) {
            return length;
        }

        try {
            inCipher.init(Cipher.DECRYPT_MODE, key);

            return inCipher.doFinal(source, sourceOffset, length, dest,
                                    destOffset);
        } catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(5958,822,<161,4>,<182,5>)
```
 public synchronized int encode(byte[] source, int sourceOffset,
                                   int length, byte[] dest, int destOffset) {

        if (outCipher == null) {
            return length;
        }

        try {
            outCipher.init(Cipher.ENCRYPT_MODE, key);

            return outCipher.doFinal(source, sourceOffset, length, dest,
                                     destOffset);
        } catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        } catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(7915,299,<274,4>,<289,5>)
```
 protected Integer readSmallint() throws IOException {

        String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        return ValuePool.getInt(Integer.parseInt(s));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowInputText.java|(8220,298,<291,4>,<306,5>)
```
 protected Integer readInteger() throws IOException {

        String s = readString();

        if (s == null) {
            return null;
        }

        s = s.trim();

        if (s.length() == 0) {
            return null;
        }

        return ValuePool.getInt(Integer.parseInt(s));
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16485,271,<505,12>,<510,61>)
```
 StringBuffer sb = new StringBuffer(64);

            sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(18097,247,<567,8>,<571,62>)
```
 StringBuffer sb = new StringBuffer(64);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
        sb.append(' ').append(Tokens.T_CLUSTERED).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCommand.java|(49125,727,<1246,20>,<1259,21>)
```
 for (int i = 0; i < table.fkMainConstraints.length; i++) {
                        if (table.fkMainConstraints[i].getRef() != table) {
                            HsqlName tableName =
                                table.fkMainConstraints[i].getRef().getName();
                            Table refTable =
                                session.database.schemaManager.getUserTable(
                                    session, tableName);

                            if (!refTable.isEmpty(session)) {
                                throw Error.error(ErrorCode.X_23504,
                                                  refTable.getName().name);
                            }
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(41512,606,<1188,8>,<1201,9>)
```
 for (int i = 0; i < targetTable.fkMainConstraints.length; i++) {
            if (targetTable.fkMainConstraints[i].getRef() != targetTable) {
                HsqlName tableName =
                    targetTable.fkMainConstraints[i].getRef().getName();
                Table refTable =
                    session.database.schemaManager.getUserTable(session,
                        tableName);

                if (!refTable.isEmpty(session)) {
                    throw Error.error(ErrorCode.X_23504,
                                      refTable.getName().name);
                }
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(18837,480,<617,4>,<634,5>)
```
 public void removeTransactionInfo(long id) {

        rowActionMap.getWriteLock().lock();

        try {
            RowAction action = (RowAction) rowActionMap.get(id);

            synchronized (action) {

                // remove only if not changed
                if (action.type == RowActionBase.ACTION_NONE) {
                    rowActionMap.remove(id);
                }
            }
        } finally {
            rowActionMap.getWriteLock().unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(11738,480,<387,4>,<404,5>)
```
 public void removeTransactionInfo(long id) {

        rowActionMap.getWriteLock().lock();

        try {
            RowAction action = (RowAction) rowActionMap.get(id);

            synchronized (action) {

                // remove only if not changed
                if (action.type == RowActionBase.ACTION_NONE) {
                    rowActionMap.remove(id);
                }
            }
        } finally {
            rowActionMap.getWriteLock().unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(31471,262,<738,67>,<751,5>)
```
 {

        if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(columnIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return bd;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(27273,248,<689,8>,<699,18>)
```
 if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(parameterIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return bd;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/IntArrayCachedObject.java|(2935,193,<88,46>,<99,5>)
```
 {

        int capacity = values.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(values[i]);
        }

        out.writeEnd();

        hasChanged = false;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/BitMapCachedObject.java|(3103,176,<93,8>,<101,27>)
```
 int   capacity = array.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(array[i]);
        }

        out.writeEnd();

        hasChanged = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java|(4297,598,<132,4>,<155,5>)
```
 public void commitRow(Session session, Row row, int changeAction,
                          int txModel) {

        switch (changeAction) {

            case RowAction.ACTION_DELETE :
                remove(row);
                break;

            case RowAction.ACTION_INSERT :
                break;

            case RowAction.ACTION_INSERT_DELETE :

                // INSERT + DELEETE
                remove(row);
                break;

            case RowAction.ACTION_DELETE_FINAL :
                delete(session, row);
                remove(row);
                break;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java|(7149,598,<255,4>,<278,5>)
```
 public void commitRow(Session session, Row row, int changeAction,
                          int txModel) {

        switch (changeAction) {

            case RowAction.ACTION_DELETE :
                remove(row);
                break;

            case RowAction.ACTION_INSERT :
                break;

            case RowAction.ACTION_INSERT_DELETE :

                // INSERT + DELEETE
                remove(row);
                break;

            case RowAction.ACTION_DELETE_FINAL :
                delete(session, row);
                remove(row);
                break;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60569,300,<1950,8>,<1958,58>)
```
 params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningParts.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(70424,289,<2268,8>,<2276,58>)
```
 params[GET_LOB_PART.LOB_ID] = ValuePool.getLong(lobID);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getLastPart.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(2806,341,<74,8>,<78,70>)
```
 triggerLookup    = new SchemaObjectSet(SchemaObject.TRIGGER);
        indexLookup      = new SchemaObjectSet(SchemaObject.INDEX);
        constraintLookup = new SchemaObjectSet(SchemaObject.CONSTRAINT);
        tableLookup      = new SchemaObjectSet(SchemaObject.TABLE);
        sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(2876,338,<75,8>,<79,66>)
```
 indexLookup      = new SchemaObjectSet(SchemaObject.INDEX);
        constraintLookup = new SchemaObjectSet(SchemaObject.CONSTRAINT);
        tableLookup      = new SchemaObjectSet(SchemaObject.TABLE);
        sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);
        typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(2944,340,<76,8>,<80,69>)
```
 constraintLookup = new SchemaObjectSet(SchemaObject.CONSTRAINT);
        tableLookup      = new SchemaObjectSet(SchemaObject.TABLE);
        sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);
        typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);
        charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(3017,339,<77,8>,<81,71>)
```
 tableLookup      = new SchemaObjectSet(SchemaObject.TABLE);
        sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);
        typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);
        charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);
        collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(3085,343,<78,8>,<82,71>)
```
 sequenceLookup   = new SchemaObjectSet(SchemaObject.SEQUENCE);
        typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);
        charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);
        collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);
        procedureLookup  = new SchemaObjectSet(SchemaObject.PROCEDURE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(3156,343,<79,8>,<83,70>)
```
 typeLookup       = new SchemaObjectSet(SchemaObject.TYPE);
        charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);
        collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);
        procedureLookup  = new SchemaObjectSet(SchemaObject.PROCEDURE);
        functionLookup   = new SchemaObjectSet(SchemaObject.FUNCTION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(3223,372,<80,8>,<85,63>)
```
 charsetLookup    = new SchemaObjectSet(SchemaObject.CHARSET);
        collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);
        procedureLookup  = new SchemaObjectSet(SchemaObject.PROCEDURE);
        functionLookup   = new SchemaObjectSet(SchemaObject.FUNCTION);
        specificRoutineLookup =
            new SchemaObjectSet(SchemaObject.SPECIFIC_ROUTINE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(3293,373,<81,8>,<86,70>)
```
 collationLookup  = new SchemaObjectSet(SchemaObject.COLLATION);
        procedureLookup  = new SchemaObjectSet(SchemaObject.PROCEDURE);
        functionLookup   = new SchemaObjectSet(SchemaObject.FUNCTION);
        specificRoutineLookup =
            new SchemaObjectSet(SchemaObject.SPECIFIC_ROUTINE);
        assertionLookup = new SchemaObjectSet(SchemaObject.ASSERTION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/sample/TriggerSample.java|(10197,563,<254,4>,<275,5>)
```
 public static String getWhenSpec(int type) {

        switch (type) {

            case INSERT_BEFORE_ROW :
            case UPDATE_BEFORE_ROW :
            case DELETE_BEFORE_ROW : {
                return "BEFORE";
            }
            case INSERT_AFTER :
            case INSERT_AFTER_ROW :
            case UPDATE_AFTER :
            case UPDATE_AFTER_ROW :
            case DELETE_AFTER :
            case DELETE_AFTER_ROW : {
                return "AFTER";
            }
            default : {
                return "";
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/sample/TriggerSample.java|(10197,563,<254,4>,<275,5>)
```
 public static String getWhenSpec(int type) {

        switch (type) {

            case INSERT_BEFORE_ROW :
            case UPDATE_BEFORE_ROW :
            case DELETE_BEFORE_ROW : {
                return "BEFORE";
            }
            case INSERT_AFTER :
            case INSERT_AFTER_ROW :
            case UPDATE_AFTER :
            case UPDATE_AFTER_ROW :
            case DELETE_AFTER :
            case DELETE_AFTER_ROW : {
                return "AFTER";
            }
            default : {
                return "";
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionContext.java|(6906,139,<191,8>,<192,73>)
```
 routineArguments     = (Object[]) stack.remove(stack.size() - 1);
        dynamicArguments     = (Object[]) stack.remove(stack.size() - 1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SessionContext.java|(6980,139,<192,8>,<193,73>)
```
 dynamicArguments     = (Object[]) stack.remove(stack.size() - 1);
        diagnosticsVariables = (Object[]) stack.remove(stack.size() - 1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(21576,315,<695,12>,<700,28>)
```
 Object[] data    = getLobHeader(a.getId());
            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int[][] aAddresses = getBlockAddresses(a.getId(), 0,
                                                   Integer.MAX_VALUE);
            int aIndex  = 0;
            int bOffset = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(24221,315,<790,12>,<795,28>)
```
 Object[] data    = getLobHeader(a.getId());
            long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int[][] aAddresses = getBlockAddresses(a.getId(), 0,
                                                   Integer.MAX_VALUE);
            int aIndex  = 0;
            int bOffset = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(7939,823,<294,4>,<324,5>)
```
 /**
     * Method declaration
     *
     *
     * @param e
     */

    // fredt@users 20020130 - comment by fredt
    // to remove this deprecated method we need to rewrite the Grid class as a
    // ScrollPane component
    // sqlbob:  I believe that changing to the JDK1.1 event handler
    // would require browsers to use the Java plugin.
    public boolean handleEvent(Event e) {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(7595,689,<280,4>,<308,5>)
```
 /**
     * Method declaration
     *
     *
     * @param e
     */

// fredt@users 20020130 - comment by fredt
// to remove this deprecated method we need to rewrite the Tree class as a
// ScrollPane component
    public boolean handleEvent(Event e) {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(24938,355,<810,16>,<818,17>)
```
 byte[] aBytes = getLobStore().getBlockBytes(aBlockOffset, 1);
                long aLimit =
                    aLength
                    - ((long) aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset)
                      * lobBlockSize / 2;

                if (aLimit > lobBlockSize / 2) {
                    aLimit = lobBlockSize / 2;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(29954,330,<980,12>,<988,13>)
```
 byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);
            long aLimit =
                aLength
                - ((long) aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset)
                  * lobBlockSize / 2;

            if (aLimit > lobBlockSize / 2) {
                aLimit = lobBlockSize / 2;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13155,6434,<253,8>,<350,79>)
```
 customRegularFuncMap.put(Tokens.ASIN, FUNC_ASIN);
        customRegularFuncMap.put(Tokens.ATAN, FUNC_ATAN);
        customRegularFuncMap.put(Tokens.ATAN2, FUNC_ATAN2);
        customRegularFuncMap.put(Tokens.BITAND, FUNC_BITAND);
        customRegularFuncMap.put(Tokens.BITANDNOT, FUNC_BITANDNOT);
        customRegularFuncMap.put(Tokens.BITLENGTH, FUNC_BIT_LENGTH);
        customRegularFuncMap.put(Tokens.BITNOT, FUNC_BITNOT);
        customRegularFuncMap.put(Tokens.BITOR, FUNC_BITOR);
        customRegularFuncMap.put(Tokens.BITXOR, FUNC_BITXOR);
        customRegularFuncMap.put(Tokens.CHAR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(13772,6469,<263,8>,<360,55>)
```
 customRegularFuncMap.put(Tokens.CHR, FUNC_CHAR);
        customRegularFuncMap.put(Tokens.CONCAT_WORD, FUNC_CONCAT);
        customRegularFuncMap.put(Tokens.COS, FUNC_COS);
        customRegularFuncMap.put(Tokens.COT, FUNC_COT);
        customRegularFuncMap.put(Tokens.CRYPT_KEY, FUNC_CRYPT_KEY);
        customRegularFuncMap.put(Tokens.CURDATE, FUNC_CURRENT_DATE);
        customRegularFuncMap.put(Tokens.CURTIME, FUNC_LOCALTIME);
        customRegularFuncMap.put(Tokens.DATABASE, FUNC_DATABASE);
        customRegularFuncMap.put(Tokens.DATABASE_NAME, FUNC_DATABASE_NAME);
        customRegularFuncMap.put(Tokens.DATABASE_ISOLATION_LEVEL,
                                 FUNC_DATABASE_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(14484,6477,<274,8>,<370,67>)
```
 customRegularFuncMap.put(Tokens.DATABASE_TIMEZONE,
                                 FUNC_DATABASE_TIMEZONE);
        customRegularFuncMap.put(Tokens.DATABASE_VERSION, FUNC_DATABASE_VERSION);
        customRegularFuncMap.put(Tokens.DATE_ADD, FUNC_DATE_ADD);
        customRegularFuncMap.put(Tokens.DATE_SUB, FUNC_DATE_SUB);
        customRegularFuncMap.put(Tokens.DATEADD, FUNC_DATEADD);
        customRegularFuncMap.put(Tokens.DATEDIFF, FUNC_DATEDIFF);
        customRegularFuncMap.put(Tokens.DAY, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFMONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFWEEK, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYOFYEAR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.DAYS, FUNC_DAYS);
        customRegularFuncMap.put(Tokens.DBTIMEZONE, FUNC_DBTIMEZONE);
        customRegularFuncMap.put(Tokens.DEGREES, FUNC_DEGREES);
        customRegularFuncMap.put(Tokens.DIAGNOSTICS, FUNC_DIAGNOSTICS);
        customRegularFuncMap.put(Tokens.DIFFERENCE, FUNC_DIFFERENCE);
        customRegularFuncMap.put(Tokens.FROM_TZ, FUNC_FROM_TZ);
        customRegularFuncMap.put(Tokens.HEXTORAW, FUNC_HEXTORAW);
        customRegularFuncMap.put(Tokens.HOUR, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.IDENTITY, FUNC_IDENTITY);
        customRegularFuncMap.put(Tokens.INSERT, FUNC_OVERLAY_CHAR);
        customRegularFuncMap.put(Tokens.INSTR, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.IS_AUTOCOMMIT, FUNC_ISAUTOCOMMIT);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE,
                                 FUNC_ISREADONLYDATABASE);
        customRegularFuncMap.put(Tokens.IS_READONLY_DATABASE_FILES,
                                 FUNC_ISREADONLYDATABASEFILES);
        customRegularFuncMap.put(Tokens.IS_READONLY_SESSION,
                                 FUNC_ISREADONLYSESSION);
        customRegularFuncMap.put(Tokens.ISOLATION_LEVEL, FUNC_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.LAST_DAY, FUNC_LAST_DAY);
        customRegularFuncMap.put(Tokens.LCASE, FUNC_FOLD_LOWER);
        customRegularFuncMap.put(Tokens.LEFT, FUNC_LEFT);
        customRegularFuncMap.put(Tokens.LENGTH, FUNC_CHAR_LENGTH);
        customRegularFuncMap.put(Tokens.LOAD_FILE, FUNC_LOAD_FILE);
        customRegularFuncMap.put(Tokens.LOB_ID, FUNC_LOB_ID);
        customRegularFuncMap.put(Tokens.LOCATE, FUNC_POSITION_CHAR);
        customRegularFuncMap.put(Tokens.LOG, FUNC_LN);
        customRegularFuncMap.put(Tokens.LOG10, FUNC_LOG10);
        customRegularFuncMap.put(Tokens.LPAD, FUNC_LPAD);
        customRegularFuncMap.put(Tokens.LTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.MINUTE, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTH, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHNAME, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.MONTHS_BETWEEN, FUNC_MONTHS_BETWEEN);
        customRegularFuncMap.put(Tokens.NEW_TIME, FUNC_NEW_TIME);
//        customRegularFuncMap.put(Tokens.NEXT_DAY, FUNC_NEXT_DAY);
        customRegularFuncMap.put(Tokens.NUMTODSINTERVAL, FUNC_NUMTODSINTERVAL);
        customRegularFuncMap.put(Tokens.NUMTOYMINTERVAL, FUNC_NUMTOYMINTERVAL);
        customRegularFuncMap.put(Tokens.OCTETLENGTH, FUNC_OCTET_LENGTH);
        customRegularFuncMap.put(Tokens.PI, FUNC_PI);
        customRegularFuncMap.put(Tokens.POSITION_ARRAY, FUNC_POSITION_ARRAY);
        customRegularFuncMap.put(Tokens.QUARTER, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.RADIANS, FUNC_RADIANS);
        customRegularFuncMap.put(Tokens.RAND, FUNC_RAND);
        customRegularFuncMap.put(Tokens.RAWTOHEX, FUNC_RAWTOHEX);
        customRegularFuncMap.put(Tokens.REGEXP_MATCHES, FUNC_REGEXP_MATCHES);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING, FUNC_REGEXP_SUBSTRING);
        customRegularFuncMap.put(Tokens.REGEXP_SUBSTRING_ARRAY,
                                 FUNC_REGEXP_SUBSTRING_ARRAY);
        customRegularFuncMap.put(Tokens.REPEAT, FUNC_REPEAT);
        customRegularFuncMap.put(Tokens.REPLACE, FUNC_REPLACE);
        customRegularFuncMap.put(Tokens.REVERSE, FUNC_REVERSE);
        customRegularFuncMap.put(Tokens.RIGHT, FUNC_RIGHT);
        customRegularFuncMap.put(Tokens.ROUND, FUNC_ROUND);
        customRegularFuncMap.put(Tokens.ROUNDMAGIC, FUNC_ROUNDMAGIC);
        customRegularFuncMap.put(Tokens.RPAD, FUNC_RPAD);
        customRegularFuncMap.put(Tokens.RTRIM, FUNC_TRIM_CHAR);
        customRegularFuncMap.put(Tokens.SECOND, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SECONDS_MIDNIGHT, FUNC_EXTRACT);
        customRegularFuncMap.put(Tokens.SEQUENCE_ARRAY, FUNC_SEQUENCE_ARRAY);
        customRegularFuncMap.put(Tokens.SESSION_ID, FUNC_SESSION_ID);
        customRegularFuncMap.put(Tokens.SESSION_ISOLATION_LEVEL,
                                 FUNC_SESSION_ISOLATION_LEVEL);
        customRegularFuncMap.put(Tokens.SESSION_TIMEZONE, FUNC_SESSION_TIMEZONE);
        customRegularFuncMap.put(Tokens.SESSIONTIMEZONE, FUNC_SESSIONTIMEZONE);
        customRegularFuncMap.put(Tokens.SIGN, FUNC_SIGN);
        customRegularFuncMap.put(Tokens.SIN, FUNC_SIN);
        customRegularFuncMap.put(Tokens.SORT_ARRAY, FUNC_SORT_ARRAY);
        customRegularFuncMap.put(Tokens.SOUNDEX, FUNC_SOUNDEX);
        customRegularFuncMap.put(Tokens.SPACE, FUNC_SPACE);
        customRegularFuncMap.put(Tokens.SUBSTR, FUNC_SUBSTRING_CHAR);
        customRegularFuncMap.put(Tokens.SYS_EXTRACT_UTC, FUNC_SYS_EXTRACT_UTC);
        customRegularFuncMap.put(Tokens.SYSDATE, FUNC_SYSDATE);
        customRegularFuncMap.put(Tokens.SYSTIMESTAMP, FUNC_SYSTIMESTAMP);
        customRegularFuncMap.put(Tokens.TAN, FUNC_TAN);
        customRegularFuncMap.put(Tokens.TIMESTAMP, FUNC_TIMESTAMP);
        customRegularFuncMap.put(Tokens.TIMESTAMP_WITH_ZONE, FUNC_TIMESTAMP_WITH_ZONE);
        customRegularFuncMap.put(Tokens.TIMESTAMPADD, FUNC_TIMESTAMPADD);
        customRegularFuncMap.put(Tokens.TIMESTAMPDIFF, FUNC_TIMESTAMPDIFF);
        customRegularFuncMap.put(Tokens.TIMEZONE, FUNC_TIMEZONE);
        customRegularFuncMap.put(Tokens.TO_CHAR, FUNC_TO_CHAR);
        customRegularFuncMap.put(Tokens.TO_DATE, FUNC_TO_DATE);
        customRegularFuncMap.put(Tokens.TO_DSINTERVAL, FUNC_TO_DSINTERVAL);
        customRegularFuncMap.put(Tokens.TO_YMINTERVAL, FUNC_TO_YMINTERVAL);
        customRegularFuncMap.put(Tokens.TO_NUMBER, FUNC_TO_NUMBER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(6732,712,<198,4>,<215,5>)
```
 public static long convertMillisToCalendar(Calendar calendar,
            long millis) {

        synchronized (tempCalGMT) {
            synchronized (calendar) {
                calendar.clear();
                tempCalGMT.setTimeInMillis(millis);
                calendar.set(tempCalGMT.get(Calendar.YEAR),
                             tempCalGMT.get(Calendar.MONTH),
                             tempCalGMT.get(Calendar.DAY_OF_MONTH),
                             tempCalGMT.get(Calendar.HOUR_OF_DAY),
                             tempCalGMT.get(Calendar.MINUTE),
                             tempCalGMT.get(Calendar.SECOND));

                return calendar.getTimeInMillis();
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(7450,716,<217,4>,<234,5>)
```
 public static long convertMillisFromCalendar(Calendar calendar,
            long millis) {

        synchronized (tempCalGMT) {
            synchronized (calendar) {
                tempCalGMT.clear();
                calendar.setTimeInMillis(millis);
                tempCalGMT.set(calendar.get(Calendar.YEAR),
                               calendar.get(Calendar.MONTH),
                               calendar.get(Calendar.DAY_OF_MONTH),
                               calendar.get(Calendar.HOUR_OF_DAY),
                               calendar.get(Calendar.MINUTE),
                               calendar.get(Calendar.SECOND));

                return tempCalGMT.getTimeInMillis();
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(13396,559,<435,8>,<448,136>)
```
 conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(
            "select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");

        if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }

        resultparam[0] = st.executeQuery(
            "select table_schema, table_name from information_schema.tables where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(14210,562,<455,8>,<468,136>)
```
 conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(
            "select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");

        if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }

        resultparamOne[0] = st.executeQuery(
            "select table_schema, table_name from information_schema.tables where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(3907,415,<131,4>,<147,5>)
```
 public long length(SessionInterface session) {

        if (length > -1) {
            return length;
        }

        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        length = ((ResultLob) resultIn).getBlockLength();

        return length;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(2508,415,<72,4>,<88,5>)
```
 public long length(SessionInterface session) {

        if (length > -1) {
            return length;
        }

        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        length = ((ResultLob) resultIn).getBlockLength();

        return length;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(23577,329,<708,24>,<715,25>)
```
 String right =
                            (String) Type.SQL_VARCHAR.convertToType(session,
                                nodes[RIGHT].getValue(session),
                                nodes[RIGHT].getDataType());

                        if (right == null) {
                            return null;
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(23213,301,<698,20>,<705,21>)
```
 String left =
                        (String) Type.SQL_VARCHAR.convertToType(session,
                            nodes[LEFT].getValue(session),
                            nodes[LEFT].getDataType());

                    if (left == null) {
                        return null;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(63707,142,<1866,8>,<1872,51>)
```
 g[0] = "" + total;
        g[1] = "total";
        g[2] = "";

        gResult.addRow(g);

        lTime = System.currentTimeMillis() - lTime;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(31725,142,<1040,8>,<1046,51>)
```
 g[0] = "" + total;
        g[1] = "total";
        g[2] = "";

        gResult.addRow(g);

        lTime = System.currentTimeMillis() - lTime;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableJoined.java|(10030,440,<344,8>,<360,18>)
```
 sb = new StringBuffer();

        String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(27584,440,<930,8>,<946,18>)
```
 sb = new StringBuffer();

        String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ClientConnection.java|(13759,290,<438,4>,<448,5>)
```
 public synchronized void rollbackToSavepoint(String name) {

        resultOut.setAsTransactionEndRequest(
            ResultConstants.TX_SAVEPOINT_NAME_ROLLBACK, name);

        Result in = execute(resultOut);

        if (in.isError()) {
            throw Error.error(in);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ClientConnection.java|(14293,286,<460,4>,<470,5>)
```
 public synchronized void releaseSavepoint(String name) {

        resultOut.setAsTransactionEndRequest(
            ResultConstants.TX_SAVEPOINT_NAME_RELEASE, name);

        Result in = execute(resultOut);

        if (in.isError()) {
            throw Error.error(in);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5507,208,<163,8>,<171,29>)
```
 list.addAll(subList);

        subList = tableLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = functionLookup.getSQL(resolved, unresolved);

        list.addAll(subList);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5599,212,<167,8>,<175,29>)
```
 list.addAll(subList);

        subList = functionLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = procedureLookup.getSQL(resolved, unresolved);

        list.addAll(subList);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5694,213,<171,8>,<179,29>)
```
 list.addAll(subList);

        subList = procedureLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = assertionLookup.getSQL(resolved, unresolved);

        list.addAll(subList);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(57513,416,<1636,25>,<1652,13>)
```
 {
                ResultSet rs = sStatement.getResultSet();

                try {
                    formatResultSet(rs);
                } catch (Throwable t) {
                    g[0] = "Error displaying the ResultSet";

                    gResult.setHead(g);

                    String s = t.getMessage();

                    g[0] = s;

                    gResult.addRow(g);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(27418,416,<856,25>,<872,13>)
```
 {
                ResultSet rs = sStatement.getResultSet();

                try {
                    formatResultSet(rs);
                } catch (Throwable t) {
                    g[0] = "Error displaying the ResultSet";

                    gResult.setHead(g);

                    String s = t.getMessage();

                    g[0] = s;

                    gResult.addRow(g);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53870,219,<1753,8>,<1759,37>)
```
 params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);

        session.sessionContext.pushDynamicArguments(params);

        Result result = updateLobUsage.execute(session);

        session.sessionContext.pop();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60569,240,<1950,8>,<1956,43>)
```
 params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningParts.execute(sysLobSession);

        sysLobSession.sessionContext.pop();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(70424,229,<2268,8>,<2274,43>)
```
 params[GET_LOB_PART.LOB_ID] = ValuePool.getLong(lobID);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getLastPart.execute(sysLobSession);

        sysLobSession.sessionContext.pop();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(11726,284,<368,8>,<379,9>)
```
 rs.next();
        assertEquals("INFORMATION_SCHEMA", rs.getString(2));
        rs.close();

        more = cs.getMoreResults();

        if (more) {
            rs = cs.getResultSet();

            rs.next();
            assertEquals("INFORMATION_SCHEMA", rs.getString(2));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(12258,284,<390,8>,<401,9>)
```
 rs.next();
        assertEquals("INFORMATION_SCHEMA", rs.getString(2));
        rs.close();

        more = st.getMoreResults();

        if (more) {
            rs = st.getResultSet();

            rs.next();
            assertEquals("INFORMATION_SCHEMA", rs.getString(2));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestStoredProcedure.java|(12810,283,<413,8>,<424,9>)
```
 rs.next();
        assertEquals("INFORMATION_SCHEMA", rs.getString(2));
        rs.close();

        more = ps.getMoreResults();

        if (more) {
            rs = ps.getResultSet();

            rs.next();
            assertEquals("INFORMATION_SCHEMA",rs.getString(2));
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53248,259,<1735,8>,<1741,22>)
```
 params[UPDATE_LENGTH.LOB_LENGTH] = ValuePool.getLong(length);
        params[UPDATE_LENGTH.LOB_ID]     = ValuePool.getLong(lobID);

        Result result = sysLobSession.executeCompiledStatement(updateLobLength,
            params, 0);

        return result;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(58404,256,<1874,8>,<1880,22>)
```
 params[ALLOC_PART.PART_BYTES]   = ValuePool.getLong(byteLength);
        params[ALLOC_PART.LOB_ID]       = ValuePool.getLong(lobID);

        Result result = sysLobSession.executeCompiledStatement(createPart,
            params, 0);

        return result;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(5328,393,<185,4>,<196,5>)
```
 /** @todo - implement the next method call in Session */
    public long nonZeroLength(SessionInterface session) {

        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getBlockLength();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(6819,394,<220,4>,<231,5>)
```
 /** @todo - implement the next method call in Session */
    public long nonSpaceLength(SessionInterface session) {

        ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getBlockLength();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(25016,420,<811,16>,<821,61>)
```
 long aLimit =
                    aLength
                    - ((long) aAddresses[aIndex][LOBS.BLOCK_OFFSET] + aOffset)
                      * lobBlockSize / 2;

                if (aLimit > lobBlockSize / 2) {
                    aLimit = lobBlockSize / 2;
                }

                String aString = new String(ArrayUtil.byteArrayToChars(aBytes),
                                            0, (int) aLimit);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30298,388,<990,12>,<1000,54>)
```
 long bLimit =
                bLength
                - ((long) bAddresses[bIndex][LOBS.BLOCK_OFFSET] + bOffset)
                  * lobBlockSize / 2;

            if (bLimit > lobBlockSize / 2) {
                bLimit = lobBlockSize / 2;
            }

            String aString = new String(ArrayUtil.byteArrayToChars(aBytes), 0,
                                        (int) aLimit);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62040,450,<1797,8>,<1816,23>)
```
 String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30131,450,<974,8>,<993,23>)
```
 String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongDeque.java|(7086,321,<301,4>,<314,5>)
```
 private int getInternalIndex(int i) throws IndexOutOfBoundsException {

        if (i < 0 || i >= elementCount) {
            throw new IndexOutOfBoundsException();
        }

        int index = firstindex + i;

        if (index >= list.length) {
            index -= list.length;
        }

        return index;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlDeque.java|(7487,321,<309,4>,<322,5>)
```
 private int getInternalIndex(int i) throws IndexOutOfBoundsException {

        if (i < 0 || i >= elementCount) {
            throw new IndexOutOfBoundsException();
        }

        int index = firstindex + i;

        if (index >= list.length) {
            index -= list.length;
        }

        return index;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14277,158,<465,12>,<467,27>)
```
 sb.append(' ').append(Tokens.T_PASSWORD).append(' ');
            sb.append(Tokens.T_CHECK).append(' ').append(Tokens.T_FUNCTION);
            sb.append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Routine.java|(9005,148,<311,12>,<313,27>)
```
 sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_NULL).append(' ').append(Tokens.T_INPUT);
            sb.append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(33979,563,<1077,8>,<1096,9>)
```
 public void run() {

            while (keep_running) {
                long currentFree  = Runtime.getRuntime().freeMemory();
                long currentAlloc = Runtime.getRuntime().totalMemory();
                long used         = currentAlloc - currentFree;

                if (used < min) {
                    min = used;
                }

                if (used > max) {
                    max = used;
                }

                try {
                    sleep(100);
                } catch (InterruptedException E) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(33956,563,<1094,8>,<1113,9>)
```
 public void run() {

            while (keep_running) {
                long currentFree  = Runtime.getRuntime().freeMemory();
                long currentAlloc = Runtime.getRuntime().totalMemory();
                long used         = currentAlloc - currentFree;

                if (used < min) {
                    min = used;
                }

                if (used > max) {
                    max = used;
                }

                try {
                    sleep(100);
                } catch (InterruptedException E) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81465,375,<2752,16>,<2758,40>)
```
 sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
                sb.append(
                    StringConverter.toQuotedString(
                        table.getName().comment, '\'', true));
                list.add(sb.toString());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(82260,379,<2772,16>,<2778,40>)
```
 sb.append(' ').append(Tokens.T_ROUTINE).append(' ');
                sb.append(object.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
                sb.append(
                    StringConverter.toQuotedString(
                        object.getName().comment, '\'', true));
                list.add(sb.toString());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(11776,519,<371,28>,<380,29>)
```
 if (nodes[RIGHT].dataType.typeComparisonGroup
                                    == Types.SQL_DATE) {
                                nodes[LEFT].dataType =
                                    Type
                                    .SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;
                            } else {
                                nodes[LEFT].dataType =
                                    Type
                                    .SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;
                            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(13655,421,<415,31>,<422,25>)
```
 if (nodes[LEFT].dataType.typeComparisonGroup
                                   == Types.SQL_DATE) {
                            nodes[RIGHT].dataType =
                                Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;
                        } else {
                            nodes[RIGHT].dataType =
                                Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ArrayType.java|(8299,187,<309,8>,<316,34>)
```
 if (a == null) {
            return Tokens.T_NULL;
        }

        Object[]     arra = (Object[]) a;
        StringBuffer sb   = new StringBuffer();

        sb.append(Tokens.T_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/RowType.java|(5621,187,<220,8>,<227,32>)
```
 if (a == null) {
            return Tokens.T_NULL;
        }

        Object[]     array = (Object[]) a;
        StringBuffer sb    = new StringBuffer();

        sb.append(Tokens.T_ROW);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(61878,249,<2120,8>,<2130,9>)
```
 if (scriptMode == null) {
            scriptMode = Boolean.FALSE;
        }

        if (blockingMode == null) {
            blockingMode = Boolean.TRUE;
        }

        if (compression == null) {
            compression = Boolean.TRUE;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(61963,239,<2124,8>,<2134,9>)
```
 if (blockingMode == null) {
            blockingMode = Boolean.TRUE;
        }

        if (compression == null) {
            compression = Boolean.TRUE;
        }

        if (files == null) {
            files = Boolean.FALSE;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArray.java|(11315,2424,<275,4>,<326,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retreives a slice of the SQL <code>ARRAY</code> value
     * designated by this <code>Array</code> object, beginning with the specified
     * <code>index</code> and containing up to <code>count</code>
     * successive elements of the SQL array.
     * <P>
     * This method uses
     * the specified <code>map</code> for type map customizations
     * unless the base type of the array does not match a user-defined
     * type in <code>map</code>, in which case it
     * uses the standard mapping. This version of the method
     * <code>getArray</code> uses either the given type map or the standard mapping;
     * it never uses the type map associated with the connection.
     * <p>
     * <strong>Note:</strong> When <code>getArray</code> is used to materialize
     * a base type that maps to a primitive data type, then it is
     * implementation-defined whether the array returned is an array of
     * that primitive data type or an array of <code>Object</code>.
     *
     * <!-- end generic documentation -->
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB always returns an array of <code>Object</code>.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param index the array index of the first element to retrieve;
     *              the first element is at index 1
     * @param count the number of successive SQL array elements to
     * retrieve
     * @param map a <code>java.util.Map</code> object
     * that contains SQL type names and the classes in
     * the Java programming language to which they are mapped
     * @return an array containing up to <code>count</code>
     * consecutive elements of the SQL <code>ARRAY</code> value designated by this
     * <code>Array</code> object, beginning with element
     * <code>index</code>
     * @exception SQLException if an error occurs while attempting to
     * access the array
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.2
     */
    public Object getArray(long index, int count,
                           java.util.Map<String,
                               Class<?>> map) throws SQLException {
        return getArray(index, count);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java|(10955,2424,<263,4>,<314,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retreives a slice of the SQL <code>ARRAY</code> value
     * designated by this <code>Array</code> object, beginning with the specified
     * <code>index</code> and containing up to <code>count</code>
     * successive elements of the SQL array.
     * <P>
     * This method uses
     * the specified <code>map</code> for type map customizations
     * unless the base type of the array does not match a user-defined
     * type in <code>map</code>, in which case it
     * uses the standard mapping. This version of the method
     * <code>getArray</code> uses either the given type map or the standard mapping;
     * it never uses the type map associated with the connection.
     * <p>
     * <strong>Note:</strong> When <code>getArray</code> is used to materialize
     * a base type that maps to a primitive data type, then it is
     * implementation-defined whether the array returned is an array of
     * that primitive data type or an array of <code>Object</code>.
     *
     * <!-- end generic documentation -->
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB always returns an array of <code>Object</code>.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param index the array index of the first element to retrieve;
     *              the first element is at index 1
     * @param count the number of successive SQL array elements to
     * retrieve
     * @param map a <code>java.util.Map</code> object
     * that contains SQL type names and the classes in
     * the Java programming language to which they are mapped
     * @return an array containing up to <code>count</code>
     * consecutive elements of the SQL <code>ARRAY</code> value designated by this
     * <code>Array</code> object, beginning with element
     * <code>index</code>
     * @exception SQLException if an error occurs while attempting to
     * access the array
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.2
     */
    public Object getArray(long index, int count,
                           java.util.Map<String,
                               Class<?>> map) throws SQLException {
        return getArray(index, count);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(43328,180,<1435,8>,<1439,38>)
```
 c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
        c.core.refIndex   = index;
        c.isForward       = isForward;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(8473,183,<223,8>,<227,38>)
```
 c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
        c.core.refIndex   = refIndex;
        c.isForward       = isForward;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(21898,170,<628,4>,<636,5>)
```
 public static int getRandomInt(int lo, int hi) {

        int ret = 0;

        ret = (int) (Math.random() * (hi - lo + 1));
        ret += lo;

        return ret;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(23292,170,<720,4>,<728,5>)
```
 public static int getRandomInt(int lo, int hi) {

        int ret = 0;

        ret = (int) (Math.random() * (hi - lo + 1));
        ret += lo;

        return ret;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144450,237,<2484,8>,<2488,48>)
```
 commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);
        commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144861,251,<2492,8>,<2496,56>)
```
 commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144745,263,<2490,8>,<2494,58>)
```
 commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(145064,259,<2496,8>,<2500,52>)
```
 commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
        commandSet.put(T_PLUS, Tokens.PLUS);
        commandSet.put(T_QUESTION, Tokens.QUESTION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130518,2299,<2183,8>,<2233,43>)
```
 commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141273,2421,<2418,8>,<2467,37>)
```
 commandSet.put(T_NEXT_DAY, NEXT_DAY);
        commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL);
        commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL);
        commandSet.put(T_NVL, Tokens.IFNULL);
        commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(114879,400,<3651,8>,<3657,75>)
```
 HsqlName indexname = database.nameManager.newAutoName("IDX",
            name.name, table.getSchemaName(), table.getName(),
            SchemaObject.INDEX);
        Index index = table.createIndexStructure(indexname, cols, null, null,
            true, true, false);
        Constraint c = new Constraint(name, table, index,
                                      SchemaObject.ConstraintTypes.UNIQUE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(23382,447,<651,8>,<659,64>)
```
 // create an autonamed index
        HsqlName indexname = database.nameManager.newAutoName("IDX",
            name.name, table.getSchemaName(), table.getName(),
            SchemaObject.INDEX);
        Index index = table.createIndexStructure(indexname, cols, null, null,
            true, true, false);
        Constraint constraint =
            new Constraint(name, table, index,
                           SchemaObject.ConstraintTypes.UNIQUE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128456,952,<2137,8>,<2156,45>)
```
 commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129983,857,<2170,8>,<2189,47>)
```
 commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(8242,282,<304,8>,<315,20>)
```
 node.iParent = n == null ? NO_POS
                                 : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nParent = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9528,276,<357,8>,<368,20>)
```
 node.iLeft = n == null ? NO_POS
                               : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nLeft = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(10267,279,<387,8>,<398,20>)
```
 node.iRight = n == null ? NO_POS
                                : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nRight = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);

        return node;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129016,916,<2149,8>,<2168,51>)
```
 commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130470,1025,<2182,8>,<2202,67>)
```
 commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(21995,1195,<544,4>,<576,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
     * as a <code>long</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setLong
     */
    public synchronized long getLong(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(25862,1410,<610,4>,<641,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>long</code> in the Java programming language.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getInt() or getLong() is used to retrieve a value
     * of type DECIMAL or NUMERIC with a large precision and the value is beyond
     * the range covered by the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public long getLong(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(27175,432,<914,8>,<931,75>)
```
 boolean ifNot = false;

        if (token.tokenType == Tokens.IF) {
            int position = getPosition();

            read();

            if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }
        }

        HsqlName name = readNewSchemaObjectName(SchemaObject.TABLE, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(51869,612,<1704,8>,<1727,78>)
```
 boolean ifNot = false;

        if (token.tokenType == Tokens.IF) {
            int position = getPosition();

            read();

            if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }
        }

        /*
                CREATE SEQUENCE <name>
                [AS {INTEGER | BIGINT}]
                [START WITH <value>]
                [INCREMENT BY <value>]
        */
        HsqlName name = readNewSchemaObjectName(SchemaObject.SEQUENCE, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57307,252,<1768,8>,<1772,57>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60533,249,<1838,8>,<1842,58>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TRANSLATE).append(' ').append(Tokens.T_TTI);
        sb.append(' ').append(Tokens.T_TYPES).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(11269,320,<374,28>,<384,9>)
```
 {
            if (collation.isPadSpace()
                    && opType != OpTypes.GREATER_EQUAL_PRE) {
                char[] buffer = new char[la];

                bs.getChars(0, lb, buffer, 0);
                ArrayUtil.fillArray(buffer, lb, ' ');

                bs = String.valueOf(buffer);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(11595,320,<384,15>,<394,9>)
```
 {
            if (collation.isPadSpace()
                    && opType != OpTypes.GREATER_EQUAL_PRE) {
                char[] buffer = new char[lb];

                as.getChars(0, la, buffer, 0);
                ArrayUtil.fillArray(buffer, la, ' ');

                as = String.valueOf(buffer);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(68882,169,<2050,8>,<2053,62>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET FILES ").append(Tokens.T_BACKUP);
        sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(69171,163,<2056,8>,<2059,57>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET FILES ").append(Tokens.T_CACHE);
        sb.append(' ').append(Tokens.T_SIZE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(69387,163,<2061,8>,<2064,57>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET FILES ").append(Tokens.T_CACHE);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59268,283,<1812,8>,<1817,60>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_SIZE).append(' ');
        sb.append(database.sqlEnforceSize ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59560,286,<1818,8>,<1823,61>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TYPES).append(' ');
        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(8659,536,<255,4>,<269,5>)
```
 void populateBySerialIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(new Integer(i), new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(10910,536,<320,4>,<334,5>)
```
 void populateByRandomIntKeys(java.util.HashMap uMap,
                                 org.hsqldb.lib.HashMap hMap,
                                 int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(intValue), new Integer(i));
            hMap.put(new Integer(intValue), new Integer(i));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(5454,287,<159,8>,<168,35>)
```
 checkClosed();

        if ((off < 0) || (off > b.length) || (len < 0)
                || ((off + len) > b.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }

        int newcount = count + len;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(5296,287,<154,8>,<163,35>)
```
 checkClosed();

        if ((off < 0) || (off > c.length) || (len < 0)
                || ((off + len) > c.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }

        int newcount = count + len;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59653,244,<1952,8>,<1961,41>)
```
 readThis(Tokens.IF);

        statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);

        result.setStatements(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(60982,246,<1999,8>,<2008,41>)
```
 readThis(Tokens.CASE);

        statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);

        result.setStatements(statements);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11051,622,<380,4>,<403,5>)
```
 NodeAVL setLeft(PersistentStore store, NodeAVL n) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : (int) n.getPos();
        node.nLeft = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(11679,626,<405,4>,<428,5>)
```
 NodeAVL setRight(PersistentStore store, NodeAVL n) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, "NodeAVLDisk");
        }

        row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : (int) n.getPos();
        node.nRight = (NodeAVLDisk) n;

        row.keepInMemory(false);

        return node;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(6881,546,<213,4>,<233,5>)
```
 NodeAVL getLeft(PersistentStore store) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (node.iLeft == NO_POS) {
            return null;
        }

        if (node.nLeft == null || !node.nLeft.isInMemory()) {
            node.nLeft         = findNode(store, node.iLeft);
            node.nLeft.nParent = node;
        }

        return node.nLeft;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDisk.java|(7433,554,<235,4>,<255,5>)
```
 NodeAVL getRight(PersistentStore store) {

        NodeAVLDisk node = this;
        RowAVLDisk  row  = this.row;

        if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

        if (node.iRight == NO_POS) {
            return null;
        }

        if (node.nRight == null || !node.nRight.isInMemory()) {
            node.nRight         = findNode(store, node.iRight);
            node.nRight.nParent = node;
        }

        return node.nRight;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59888,517,<1825,8>,<1835,47>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62124,525,<1874,8>,<1884,49>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_UNIQUE).append(' ');
        sb.append(Tokens.T_NULLS).append(' ');
        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62465,530,<1881,8>,<1891,46>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_AVG).append(' ');
        sb.append(Tokens.T_SCALE).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(54511,312,<1800,8>,<1805,57>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ type };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

        return new StatementSchema(sql, StatementTypes.CREATE_DOMAIN, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(55284,310,<1825,8>,<1830,57>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ type };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

        return new StatementSchema(sql, StatementTypes.CREATE_TYPE, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(56291,322,<1860,8>,<1865,63>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ charset };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

        return new StatementSchema(sql, StatementTypes.CREATE_CHARACTER_SET,
                                   args, null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(58212,320,<1914,8>,<1919,57>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ collation };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

        return new StatementSchema(sql, StatementTypes.CREATE_COLLATION, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(111646,310,<3533,8>,<3538,57>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ name };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

        return new StatementSchema(sql, StatementTypes.CREATE_ROLE, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(11496,404,<384,16>,<398,60>)
```
 read();

                switch (token.tokenType) {

                    case Tokens.ROUTINE :
                    case Tokens.PROCEDURE :
                    case Tokens.FUNCTION :
                        read();
                        break;

                    default :
                        throw unexpectedToken();
                }

                statementType = StatementTypes.DROP_ROUTINE;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(149028,403,<4712,16>,<4726,59>)
```
 read();

                switch (token.tokenType) {

                    case Tokens.ROUTINE :
                    case Tokens.PROCEDURE :
                    case Tokens.FUNCTION :
                        read();
                        break;

                    default :
                        throw unexpectedToken();
                }

                objectType = SchemaObject.SPECIFIC_ROUTINE;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(45842,1167,<1516,50>,<1552,13>)
```
 {
                read();

                if (token.tokenType == Tokens.SET) {
                    read();

                    switch (token.tokenType) {

                        case Tokens.DEFAULT : {
                            read();

                            deleteAction =
                                SchemaObject.ReferentialAction.SET_DEFAULT;

                            break;
                        }
                        case Tokens.NULL :
                            read();

                            deleteAction =
                                SchemaObject.ReferentialAction.SET_NULL;
                            break;

                        default :
                            throw unexpectedToken();
                    }
                } else if (token.tokenType == Tokens.CASCADE) {
                    read();

                    deleteAction = SchemaObject.ReferentialAction.CASCADE;
                } else if (token.tokenType == Tokens.RESTRICT) {
                    read();
                } else {
                    readThis(Tokens.NO);
                    readThis(Tokens.ACTION);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(47053,1167,<1552,57>,<1588,13>)
```
 {
                read();

                if (token.tokenType == Tokens.SET) {
                    read();

                    switch (token.tokenType) {

                        case Tokens.DEFAULT : {
                            read();

                            updateAction =
                                SchemaObject.ReferentialAction.SET_DEFAULT;

                            break;
                        }
                        case Tokens.NULL :
                            read();

                            updateAction =
                                SchemaObject.ReferentialAction.SET_NULL;
                            break;

                        default :
                            throw unexpectedToken();
                    }
                } else if (token.tokenType == Tokens.CASCADE) {
                    read();

                    updateAction = SchemaObject.ReferentialAction.CASCADE;
                } else if (token.tokenType == Tokens.RESTRICT) {
                    read();
                } else {
                    readThis(Tokens.NO);
                    readThis(Tokens.ACTION);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(9201,538,<271,4>,<285,5>)
```
 void populateBySerialIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(i, new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(11452,538,<336,4>,<350,5>)
```
 void populateByRandomIntKeysInt(java.util.HashMap uMap,
                                    org.hsqldb.lib.IntKeyHashMap hMap,
                                    int testSize) throws Exception {

        for (int i = 0; i < testSize; i++) {
            int intValue = randomgen.nextInt();

            uMap.put(new Integer(intValue), new Integer(i));
            hMap.put(intValue, new Integer(i));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(70412,348,<1646,8>,<1657,22>)
```
 if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
        Calendar calendar   = cal == null ? session.getCalendar()
                : cal;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(73526,348,<1721,8>,<1732,22>)
```
 if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
        Calendar calendar   = cal == null ? session.getCalendar()
                : cal;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/WebServerConnection.java|(12763,303,<336,12>,<344,29>)
```
 Session session = DatabaseManager.getSession(databaseID,
                sessionID);
            Result resultIn = Result.newResult(session, mode, dataIn, rowIn);

            resultIn.setDatabaseId(databaseID);
            resultIn.setSessionId(sessionID);

            //
            Result resultOut;
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java|(10114,361,<261,16>,<269,33>)
```
 Session session = DatabaseManager.getSession(databaseID,
                    sessionID);
                Result resultIn = Result.newResult(session, mode, inStream,
                                                   rowIn);

                resultIn.setDatabaseId(databaseID);
                resultIn.setSessionId(sessionID);

                Result resultOut;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53798,517,<1746,8>,<1764,44>)
```
 readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);

        statement.setStatements(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(54986,519,<1788,8>,<1806,44>)
```
 readThis(Tokens.END);
        readThis(Tokens.REPEAT);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.REPEAT, label);

        statement.setStatements(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55852,509,<1820,8>,<1838,41>)
```
 readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound result = new StatementCompound(StatementTypes.LOOP,
            label);

        result.setStatements(statements);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(29333,201,<991,8>,<996,9>)
```
 if (a instanceof ClobData) {
            left = ((ClobData) a).getSubString(
                session, 0, (int) ((ClobData) a).length(session));
        } else {
            left = (String) a;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(29544,203,<998,8>,<1003,9>)
```
 if (b instanceof ClobData) {
            right = ((ClobData) b).getSubString(
                session, 0, (int) ((ClobData) b).length(session));
        } else {
            right = (String) b;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53388,302,<1732,8>,<1741,28>)
```
 readThis(Tokens.WHILE);

        Expression e = XreadBooleanValueExpression();

        resolveOuterReferencesAndTypes(routine, context, e);

        StatementExpression condition = new StatementExpression(session,
            compileContext, StatementTypes.CONDITION, e);

        readThis(Tokens.DO);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(54704,303,<1779,8>,<1788,29>)
```
 readThis(Tokens.UNTIL);

        Expression e = XreadBooleanValueExpression();

        resolveOuterReferencesAndTypes(routine, context, e);

        StatementExpression condition = new StatementExpression(session,
            compileContext, StatementTypes.CONDITION, e);

        readThis(Tokens.END);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59982,575,<1827,8>,<1838,32>)
```
 sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
        sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_UPDATE).append(' ');
        sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62218,591,<1876,8>,<1887,32>)
```
 sb.append(Tokens.T_UNIQUE).append(' ');
        sb.append(Tokens.T_NULLS).append(' ');
        sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
        sb.append(Tokens.T_TRUNCATE).append(' ');
        sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(285140,260,<7532,8>,<7539,77>)
```
 final int udt_schema     = 3;
        final int udt_name       = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;

        //
        Iterator objects =
            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(112083,235,<2711,8>,<2716,77>)
```
 final int class_name   = 3;
        final int data_type    = 4;
        final int remarks      = 5;
        final int base_type    = 6;
        Iterator it =
            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(33537,1324,<842,28>,<867,60>)
```
 // This field is just swallowed by PG ODBC
                            // client, but OdbcUtil.validated by psql.
                            for (int i = 0; i < columnCount; i++) {
                                if (rowData[i] == null) {
                                    /*
                                    server.printWithThread("R" + rowNum + "C"
                                        + (i+1) + " => [null]");
                                    */
                                    outPacket.writeInt(-1);
                                } else {
                                    dataString =
                                        pgTypes[i].valueString(rowData[i]);

                                    outPacket.writeSized(dataString);

                                    if (server.isTrace()) {
                                        server.printWithThread(
                                            "R" + rowNum + "C" + (i + 1)
                                            + " => ("
                                            + rowData[i].getClass().getName()
                                            + ") [" + dataString + ']');
                                    }
                                }
                            }

                            outPacket.xmit('D', dataOutput);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(56775,1059,<1360,24>,<1382,56>)
```
 for (int i = 0; i < colCount; i++) {
                            if (rowData[i] == null) {
                                /*
                                server.printWithThread("R" + rowNum + "C"
                                    + (i+1) + " => [null]");
                                */
                                outPacket.writeInt(-1);
                            } else {
                                dataString =
                                    pgTypes[i].valueString(rowData[i]);

                                outPacket.writeSized(dataString);

                                if (server.isTrace()) {
                                    server.printWithThread(
                                        "R" + rowNum + "C" + (i + 1) + " => ("
                                        + rowData[i].getClass().getName()
                                        + ") [" + dataString + ']');
                                }
                            }
                        }

                        outPacket.xmit('D', dataOutput);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(65032,536,<2133,24>,<2141,66>)
```
 HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);
                        Table transition = new Table(table, hsqlName);
                        RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);

                        transitions[TriggerDef.OLD_TABLE] = transition;
                        rangeVars[TriggerDef.OLD_TABLE]   = range;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(68052,536,<2206,24>,<2214,66>)
```
 HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);
                        Table transition = new Table(table, hsqlName);
                        RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);

                        transitions[TriggerDef.NEW_TABLE] = transition;
                        rangeVars[TriggerDef.NEW_TABLE]   = range;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchemaDefinition.java|(2280,353,<59,4>,<74,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSimple.java|(3933,353,<121,4>,<136,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(70326,312,<1642,8>,<1654,42>)
```
 checkSetParameterIndex(parameterIndex);

        int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(73440,312,<1717,8>,<1729,42>)
```
 checkSetParameterIndex(parameterIndex);

        int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53828,530,<1747,8>,<1765,42>)
```
 readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);

        statement.setStatements(statements);
        statement.setCondition(condition);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55016,532,<1789,8>,<1807,42>)
```
 readThis(Tokens.REPEAT);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.REPEAT, label);

        statement.setStatements(statements);
        statement.setCondition(condition);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(52930,688,<1633,8>,<1651,9>)
```
 if (HsqlDatabaseProperties.sql_concat_nulls.equals(name)) {
            return String.valueOf(database.sqlConcatNulls);
        }

        if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53069,688,<1637,8>,<1655,9>)
```
 if (HsqlDatabaseProperties.sql_convert_trunc.equals(name)) {
            return String.valueOf(database.sqlConvertTruncate);
        }

        if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53213,683,<1641,8>,<1659,9>)
```
 if (HsqlDatabaseProperties.sql_double_nan.equals(name)) {
            return String.valueOf(database.sqlDoubleNaN);
        }

        if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53348,687,<1645,8>,<1663,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_names.equals(name)) {
            return String.valueOf(database.sqlEnforceNames);
        }

        if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53489,687,<1649,8>,<1667,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_refs.equals(name)) {
            return String.valueOf(database.sqlEnforceRefs);
        }

        if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53628,685,<1653,8>,<1671,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_size.equals(name)) {
            return String.valueOf(database.sqlEnforceSize);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53767,688,<1657,8>,<1675,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_tdcd.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCD);
        }

        if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(53906,686,<1661,8>,<1679,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_tdcu.equals(name)) {
            return String.valueOf(database.sqlEnforceTDCU);
        }

        if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54045,684,<1665,8>,<1683,9>)
```
 if (HsqlDatabaseProperties.sql_enforce_types.equals(name)) {
            return String.valueOf(database.sqlEnforceTypes);
        }

        if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54186,678,<1669,8>,<1687,9>)
```
 if (HsqlDatabaseProperties.sql_ignore_case.equals(name)) {
            return String.valueOf(database.sqlIgnoreCase);
        }

        if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54323,676,<1673,8>,<1691,9>)
```
 if (HsqlDatabaseProperties.sql_longvar_is_lob.equals(name)) {
            return String.valueOf(database.sqlLongvarIsLob);
        }

        if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54465,669,<1677,8>,<1695,9>)
```
 if (HsqlDatabaseProperties.sql_nulls_first.equals(name)) {
            return String.valueOf(database.sqlNullsFirst);
        }

        if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54602,667,<1681,8>,<1699,9>)
```
 if (HsqlDatabaseProperties.sql_nulls_order.equals(name)) {
            return String.valueOf(database.sqlNullsOrder);
        }

        if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(54739,665,<1685,8>,<1703,9>)
```
 if (HsqlDatabaseProperties.sql_syntax_db2.equals(name)) {
            return String.valueOf(database.sqlSyntaxDb2);
        }

        if (HsqlDatabaseProperties.sql_syntax_mss.equals(name)) {
            return String.valueOf(database.sqlSyntaxMss);
        }

        if (HsqlDatabaseProperties.sql_syntax_mys.equals(name)) {
            return String.valueOf(database.sqlSyntaxMys);
        }

        if (HsqlDatabaseProperties.sql_syntax_ora.equals(name)) {
            return String.valueOf(database.sqlSyntaxOra);
        }

        if (HsqlDatabaseProperties.sql_syntax_pgs.equals(name)) {
            return String.valueOf(database.sqlSyntaxPgs);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(129661,337,<4085,8>,<4093,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            sequence, copy
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();

        return new StatementSchema(sql, StatementTypes.ALTER_SEQUENCE, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(137110,341,<4326,8>,<4334,57>)
```
 String   sql     = getLastPart();
        Object[] args    = new Object[] {
            name, newName
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();

        return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(143082,482,<3485,8>,<3494,51>)
```
 Object[]  row;
        final int table_catalog                = 0;
        final int table_schema                 = 1;
        final int table_name                   = 2;
        final int table_type                   = 3;
        final int self_referencing_column_name = 4;
        final int reference_generation         = 5;
        final int user_defined_type_catalog    = 6;
        final int user_defined_type_schema     = 7;
        final int user_defined_type_name       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(92762,469,<2963,16>,<2975,22>)
```
 if (constName == null) {
                    constName = database.nameManager.newAutoName("CT",
                            schemaObject.getSchemaName(),
                            schemaObject.getName(), SchemaObject.CONSTRAINT);
                }

                Constraint c =
                    new Constraint(constName, set,
                                   SchemaObject.ConstraintTypes.UNIQUE);

                constraintList.add(c);

                break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(96741,491,<3086,20>,<3098,26>)
```
 if (constName == null) {
                        constName = database.nameManager.newAutoName("CT",
                                table.getSchemaName(), table.getName(),
                                SchemaObject.CONSTRAINT);
                    }

                    Constraint c =
                        new Constraint(constName, set,
                                       SchemaObject.ConstraintTypes.UNIQUE);

                    constraintList.add(c);

                    break;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(55697,207,<1729,8>,<1736,50>)
```
 cal.add(Calendar.MONTH, 1);

        millis = cal.getTimeInMillis();

        cal.add(Calendar.DAY_OF_MONTH, -1);

        millis   = cal.getTimeInMillis();
        lastDay1 = cal.get(Calendar.DAY_OF_MONTH);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(56187,207,<1748,8>,<1755,50>)
```
 cal.add(Calendar.MONTH, 1);

        millis = cal.getTimeInMillis();

        cal.add(Calendar.DAY_OF_MONTH, -1);

        millis   = cal.getTimeInMillis();
        lastDay2 = cal.get(Calendar.DAY_OF_MONTH);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59130,628,<1935,8>,<1956,33>)
```
 if (token.tokenType == Tokens.ELSE) {
            read();

            e = Expression.EXPR_TRUE;
            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION, e);

            list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
        }

        readThis(Tokens.END);
        readThis(Tokens.IF);

        statements = new Statement[list.size()];

        list.toArray(statements);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(60395,694,<1981,8>,<2003,33>)
```
 if (token.tokenType == Tokens.ELSE) {
            read();

            condition = Expression.EXPR_TRUE;
            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);

            statements = compileSQLProcedureStatementList(routine, context);

            for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }
        }

        readThis(Tokens.END);
        readThis(Tokens.CASE);

        statements = new Statement[list.size()];

        list.toArray(statements);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(7478,465,<242,4>,<252,5>)
```
 /**
     * This method allows to easily run this unit test independent of the other
     * unit tests, and without dealing with Ant or unrelated test suites.
     */
    public static void main(String[] sa) {
            junit.textui.TestRunner runner = new junit.textui.TestRunner();
            junit.framework.TestResult result =
                runner.run(runner.getTest(TestAcl.class.getName()));

            System.exit(result.wasSuccessful() ? 0 : 1);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSchemaParse.java|(47117,473,<983,4>,<993,5>)
```
 /**
     * This method allows to easily run this unit test independent of the other
     * unit tests, and without dealing with Ant or unrelated test suites.
     */
    public static void main(String[] sa) {
            junit.textui.TestRunner runner = new junit.textui.TestRunner();
            junit.framework.TestResult result =
                runner.run(runner.getTest(TestSchemaParse.class.getName()));

            System.exit(result.wasSuccessful() ? 0 : 1);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53700,569,<1743,8>,<1762,63>)
```
 Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55754,564,<1817,8>,<1836,19>)
```
 Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound result = new StatementCompound(StatementTypes.LOOP,
            label);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2114,1397,<51,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,1460,<54,8>,<77,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2510,1456,<57,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(55635,295,<1351,8>,<1356,41>)
```
 if (columnIndexes == null || columnIndexes.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES,
                    columnIndexes, null);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(64462,293,<1543,8>,<1548,41>)
```
 if (columnIndexes == null || columnIndexes.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_ANY,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES,
                    columnIndexes, null);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(24663,261,<816,8>,<821,9>)
```
 if (parent != null && parent.scopeVariables != null) {
            for (int i = 0; i < parent.scopeVariables.size(); i++) {
                list.add(parent.scopeVariables.getKey(i),
                         parent.scopeVariables.get(i));
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(26867,249,<888,8>,<893,9>)
```
 if (parent != null && parent.scopeTables != null) {
            for (int i = 0; i < parent.scopeTables.size(); i++) {
                list.add(parent.scopeTables.getKey(i),
                         parent.scopeTables.get(i));
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(128876,926,<2146,8>,<2165,41>)
```
 commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130357,895,<2179,8>,<2198,47>)
```
 commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(128332,938,<2134,8>,<2153,76>)
```
 commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129851,839,<2167,8>,<2186,40>)
```
 commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobInputStream.java|(2955,390,<75,8>,<89,9>)
```
 checkClosed();

        if (currentPosition >= availableLength) {
            return -1;
        }

        if (buffer == null
                || currentPosition >= bufferOffset + buffer.length) {
            try {
                checkClosed();
                readIntoBuffer();
            } catch (Exception e) {
                throw JavaSystem.toIOException(e);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobInputStream.java|(2951,390,<75,8>,<89,9>)
```
 checkClosed();

        if (currentPosition >= availableLength) {
            return -1;
        }

        if (buffer == null
                || currentPosition >= bufferOffset + buffer.length) {
            try {
                checkClosed();
                readIntoBuffer();
            } catch (Exception e) {
                throw JavaSystem.toIOException(e);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(37864,298,<1489,16>,<1496,17>)
```
 if (charAt(currentPosition + 1) == '=') {
                    token.tokenString = Tokens.T_NOT_EQUALS;
                    token.tokenType   = Tokens.NOT_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(38766,300,<1515,16>,<1522,17>)
```
 if (charAt(currentPosition + 1) == '=') {
                    token.tokenString = Tokens.T_LESS_EQUALS;
                    token.tokenType   = Tokens.LESS_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(39312,306,<1534,16>,<1541,17>)
```
 if (charAt(currentPosition + 1) == '=') {
                    token.tokenString = Tokens.T_GREATER_EQUALS;
                    token.tokenType   = Tokens.GREATER_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobInputStream.java|(3480,295,<98,4>,<113,5>)
```
 public long skip(long n) throws IOException {

        checkClosed();

        if (n <= 0) {
            return 0;
        }

        if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }

        currentPosition += n;

        return n;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobInputStream.java|(3894,295,<117,4>,<132,5>)
```
 public long skip(long n) throws IOException {

        checkClosed();

        if (n <= 0) {
            return 0;
        }

        if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }

        currentPosition += n;

        return n;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144386,252,<2482,8>,<2487,48>)
```
 //
        commandSet.put(T_ASTERISK, Tokens.ASTERISK);
        commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);
        commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144796,259,<2491,8>,<2495,46>)
```
 commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerProperties.java|(10429,356,<305,8>,<310,73>)
```
 // properties with fixed names
        meta.put(sc_key_silent,
                 getMeta(sc_key_silent, SERVER_PROPERTY, false));
        meta.put(sc_key_trace, getMeta(sc_key_trace, SERVER_PROPERTY, false));
        meta.put(sc_key_tls, getMeta(sc_key_tls, SERVER_PROPERTY, false));
        meta.put(sc_key_acl, getMeta(sc_key_acl, SERVER_PROPERTY, null));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerProperties.java|(10916,416,<313,8>,<320,65>)
```
 meta.put(sc_key_remote_open_db,
                 getMeta(sc_key_remote_open_db, SERVER_PROPERTY, false));
        meta.put(sc_key_no_system_exit,
                 getMeta(sc_key_no_system_exit, SERVER_PROPERTY, false));
        meta.put(sc_key_daemon,
                 getMeta(sc_key_daemon, SERVER_PROPERTY, false));
        meta.put(sc_key_address,
                 getMeta(sc_key_address, SERVER_PROPERTY, null));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(31992,433,<1137,24>,<1144,25>)
```
 if (sequence != null) {
                            sb.append(Tokens.T_GRANT).append(' ');
                            sb.append(Tokens.T_USAGE);
                            sb.append(' ').append(Tokens.T_ON).append(' ');
                            sb.append(Tokens.T_SEQUENCE).append(' ');
                            sb.append(
                                hsqlname.getSchemaQualifiedStatementName());
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(32850,429,<1154,24>,<1161,25>)
```
 if (domain != null) {
                            sb.append(Tokens.T_GRANT).append(' ');
                            sb.append(Tokens.T_USAGE);
                            sb.append(' ').append(Tokens.T_ON).append(' ');
                            sb.append(Tokens.T_DOMAIN).append(' ');
                            sb.append(
                                hsqlname.getSchemaQualifiedStatementName());
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(33700,425,<1171,24>,<1178,25>)
```
 if (type != null) {
                            sb.append(Tokens.T_GRANT).append(' ');
                            sb.append(Tokens.T_USAGE);
                            sb.append(' ').append(Tokens.T_ON).append(' ');
                            sb.append(Tokens.T_TYPE).append(' ');
                            sb.append(
                                hsqlname.getSchemaQualifiedStatementName());
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14151,256,<462,12>,<466,76>)
```
 StringBuffer sb = new StringBuffer();

            sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_PASSWORD).append(' ');
            sb.append(Tokens.T_CHECK).append(' ').append(Tokens.T_FUNCTION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(2703,252,<77,8>,<81,73>)
```
 StringBuffer sb = new StringBuffer();

        sb.append(Tokens.T_CREATE).append(' ').append(Tokens.T_USER);
        sb.append(' ').append(granteeName.statementName).append(' ');
        sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(76497,288,<2584,16>,<2589,37>)
```
 StringBuffer sb = new StringBuffer();

                sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
                sb.append(' ').append(Tokens.T_DEFAULT).append(' ');
                sb.append(Tokens.T_INITIAL).append(' ').append(
                    Tokens.T_SCHEMA);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82163,423,<2324,12>,<2331,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86025,420,<2442,12>,<2449,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_UDT_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(189425,393,<5062,12>,<5069,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(257835,426,<6783,12>,<6790,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);     // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(306633,390,<8044,12>,<8051,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(63866,488,<1784,12>,<1794,22>)
```
 addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(261795,477,<6902,12>,<6912,22>)
```
 addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(311112,459,<8178,12>,<8188,22>)
```
 addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(17801,146,<589,16>,<591,58>)
```
 return core.mainCols.length == 1
                       && core.mainCols[0] == colIndex
                       && core.mainTable == core.refTable;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(18025,121,<594,16>,<595,58>)
```
 return core.refCols.length == 1 && core.refCols[0] == colIndex
                       && core.mainTable == core.refTable;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(281267,484,<7418,8>,<7432,34>)
```
 // column number mappings
        final int trigger_catalog      = 0;
        final int trigger_schema       = 1;
        final int trigger_name         = 2;
        final int event_object_catalog = 3;
        final int event_object_schema  = 4;
        final int event_object_table   = 5;
        final int event_object_column  = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(70945,389,<1993,16>,<2000,40>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(72083,390,<2026,16>,<2033,40>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = domain.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java|(27595,977,<723,4>,<749,5>)
```
 /**
     * <!-- start generic documentation -->
     * Indicates whether it is possible for a write on the designated column to
     * succeed.
     * <!-- end generic documentation -->
     *
     * <!-- start Release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * From 2.0 this method returns false if the ResuleSet is not updatable
     * or the column in question is not updatable.<p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param column the first column is 1, the second is 2, ...
     * @return <code>true</code> if so; <code>false</code> otherwise
     * @exception SQLException if a database access error occurs
     */
    public boolean isWritable(int column) throws SQLException {

        checkColumn(column);

        return resultMetaData.colIndexes != null
               && resultMetaData.colIndexes[--column] > -1;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java|(28578,974,<751,4>,<776,5>)
```
 /**
     * <!-- start generic documentation -->
     * Indicates whether a write on the designated column will definitely succeed.
     * <!-- end generic documentation -->
     *
     * <!-- start Release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * From 2.0 this method returns false if the ResuleSet is not updatable
     * or the column in question is not updatable.<p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param column the first column is 1, the second is 2, ...
     * @return <code>true</code> if so; <code>false</code> otherwise
     * @exception SQLException if a database access error occurs
     */
    public boolean isDefinitelyWritable(int column) throws SQLException {

        checkColumn(column);

        return resultMetaData.colIndexes != null
               && resultMetaData.colIndexes[--column] > -1;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(239467,322,<6253,12>,<6259,36>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_FEATURES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(242057,322,<6333,12>,<6339,36>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PACKAGES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(243267,303,<6372,12>,<6377,78>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(262315,1539,<6917,8>,<6961,9>)
```
 // column number mappings
        final int trigger_catalog  = 0;
        final int trigger_schema   = 1;
        final int trigger_name     = 2;
        final int specific_catalog = 3;
        final int specific_schema  = 4;
        final int specific_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(265973,1531,<7026,8>,<7070,9>)
```
 // column number mappings
        final int trigger_catalog  = 0;
        final int trigger_schema   = 1;
        final int trigger_name     = 2;
        final int sequence_catalog = 3;
        final int sequence_schema  = 4;
        final int sequence_name    = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/Result.java|(30198,179,<950,8>,<954,60>)
```
 if (offset + count > source.navigator.getSize()) {
            count = source.navigator.getSize() - offset;
        }

        Result result = newResult(ResultConstants.DATAHEAD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/Result.java|(30886,179,<972,8>,<976,60>)
```
 if (offset + count > source.navigator.getSize()) {
            count = source.navigator.getSize() - offset;
        }

        Result result = newResult(ResultConstants.DATAROWS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(34187,229,<1140,12>,<1148,25>)
```
 for (int j = 0; j < width; j++) {
                b.append(row[j]);

                for (int l = row[j].length(); l <= size[j]; l++) {
                    b.append(' ');
                }
            }

            b.append(NL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(33679,205,<1117,8>,<1125,21>)
```
 for (int i = 0; i < width; i++) {
            b.append(col[i]);

            for (int l = col[i].length(); l <= size[i]; l++) {
                b.append(' ');
            }
        }

        b.append(NL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(94165,756,<2628,8>,<2642,50>)
```
 final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
        final int declared_data_type         = 44;
        final int declared_numeric_precision = 45;
        final int declared_numeric_scale     = 46;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(221072,936,<5868,8>,<5882,62>)
```
 final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
        final int sql_path                               = 44;
        final int schema_level_routine                   = 45;
        final int max_dynamic_result_sets                = 46;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92643,1513,<2598,8>,<2627,50>)
```
 final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159096,1453,<4302,8>,<4331,48>)
```
 final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
        final int character_maximum_length = 15;
        final int character_octet_length   = 16;
        final int character_set_catalog    = 17;
        final int character_set_schema     = 18;
        final int character_set_name       = 19;
        final int collation_catalog        = 20;
        final int collation_schema         = 21;
        final int collation_name           = 22;
        final int numeric_precision        = 23;
        final int numeric_precision_radix  = 24;
        final int numeric_scale            = 25;
        final int datetime_precision       = 26;
        final int interval_type            = 27;
        final int interval_precision       = 28;
        final int udt_catalog              = 29;
        final int udt_schema               = 30;
        final int udt_name                 = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219190,1873,<5838,8>,<5867,62>)
```
 final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299390,1513,<7878,8>,<7907,50>)
```
 final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
        final int character_set_catalog      = 15;
        final int character_set_schema       = 16;
        final int character_set_name         = 17;
        final int collation_catalog          = 18;
        final int collation_schema           = 19;
        final int collation_name             = 20;
        final int numeric_precision          = 21;
        final int numeric_precision_radix    = 22;
        final int numeric_scale              = 23;
        final int datetime_precision         = 24;
        final int interval_type              = 25;
        final int interval_precision         = 26;
        final int source_dtd_identifier      = 27;
        final int ref_dtd_identifier         = 28;
        final int declared_data_type         = 29;
        final int declared_numeric_precision = 30;
        final int declared_numeric_scale     = 31;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(22322,306,<635,12>,<640,56>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_COMMENTS]);

            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(113756,311,<3117,12>,<3122,56>)
```
 t = createBlankTable(sysTableHsqlNames[DATA_TYPE_PRIVILEGES]);

            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130432,289,<3528,12>,<3533,56>)
```
 t = createBlankTable(sysTableHsqlNames[ELEMENT_TYPES]);

            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_TYPE", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11006,320,<302,12>,<308,13>)
```
 if (rangeVars[OLD_ROW] != null) {
                sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
                sb.append(' ');
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11340,320,<310,12>,<316,13>)
```
 if (rangeVars[NEW_ROW] != null) {
                sb.append(Tokens.T_NEW).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[NEW_ROW].getTableAlias().getStatementName());
                sb.append(' ');
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269097,468,<7121,12>,<7131,22>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(315131,580,<8294,12>,<8306,22>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);    // not null

            // false PK, as VIEW_CATALOG, VIEW_SCHEMA, TABLE_CATALOG, and/or
            // TABLE_SCHEMA may be NULL
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,403,<2340,8>,<2352,23>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86607,396,<2458,8>,<2470,23>)
```
 // column number mappings
        final int udt_catalog   = 0;
        final int udt_schema    = 1;
        final int udt_name      = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
        final int column_name   = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124396,400,<3377,12>,<3383,76>)
```
 addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAINS].name, false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(132172,422,<3557,12>,<3564,36>)
```
 addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ELEMENT_TYPES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158410,403,<4284,12>,<4290,79>)
```
 addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[PARAMETERS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(262590,1283,<6925,8>,<6963,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(266248,1301,<7034,8>,<7073,17>)
```
 //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

        while (it.hasNext()) {
            TriggerDef trigger = (TriggerDef) it.next();

            if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }

            OrderedHashSet set = trigger.getReferences();

            for (int i = 0; i < set.size(); i++) {
                HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SEQUENCE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
            }
        }

        // Initialization
        return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(120815,413,<3281,12>,<3292,21>)
```
 addColumn(t, "IS_DEFERRABLE", YES_OR_NO);
            addColumn(t, "INITIALLY_DEFERRED", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAIN_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(250933,579,<6590,12>,<6603,21>)
```
 addColumn(t, "IS_DEFERRABLE", YES_OR_NO);           // not null
            addColumn(t, "INITIALLY_DEFERRED", YES_OR_NO);      // not null

            // false PK, as CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA,
            // TABLE_CATALOG and/or TABLE_SCHEMA may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TABLE_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67341,170,<1883,16>,<1885,52>)
```
 row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(80114,180,<2263,24>,<2265,58>)
```
 row[table_catalog]    = database.getCatalogName().name;
                        row[table_schema]     = name.schema.name;
                        row[table_name]       = name.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(204246,170,<5480,16>,<5482,53>)
```
 row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntValueHashMap.java|(3581,257,<125,4>,<136,5>)
```
 public boolean put(Object key, int value) {

        if (key == null) {
            throw new NoSuchElementException();
        }

        int oldSize = size();

        super.addOrRemove(0, value, key, null, false);

        return oldSize != size();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongValueHashMap.java|(3548,258,<124,4>,<135,5>)
```
 public boolean put(Object key, long value) {

        if (key == null) {
            throw new NoSuchElementException();
        }

        int oldSize = size();

        super.addOrRemove(0, value, key, null, false);

        return oldSize != size();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(257565,316,<6778,12>,<6783,58>)
```
 t = createBlankTable(sysTableHsqlNames[TRIGGER_COLUMN_USAGE]);

            addColumn(t, "TRIGGER_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TRIGGER_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TRIGGER_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(268828,315,<7116,12>,<7121,58>)
```
 t = createBlankTable(sysTableHsqlNames[TRIGGER_TABLE_USAGE]);

            addColumn(t, "TRIGGER_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TRIGGER_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TRIGGER_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286501,343,<7569,20>,<7573,64>)
```
 row[grantor]        = right.getGrantor().getName().name;
                    row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(294090,343,<7762,20>,<7766,64>)
```
 row[grantor]        = right.getGrantor().getName().name;
                    row[grantee]        = right.getGrantee().getName().name;
                    row[object_catalog] = database.getCatalogName().name;
                    row[object_schema]  = object.getSchemaName().name;
                    row[object_name]    = object.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(70327,328,<1974,12>,<1983,55>)
```
 table = (Table) tables.next();

            if (table.isView()
                    || !session.getGrantee().isFullyAccessibleByRole(
                        table.getName())) {
                continue;
            }

            tableConstraints = table.getConstraints();
            constraintCount  = tableConstraints.length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(105632,325,<2908,12>,<2917,51>)
```
 table = (Table) tables.next();

            if (table.isView()
                    || !session.getGrantee().isFullyAccessibleByRole(
                        table.getName())) {
                continue;
            }

            constraints       = table.getConstraints();
            constraintCount   = constraints.length;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(199004,195,<4790,12>,<4794,13>)
```
 while (bytesread < ba.length &&
                    (retval = is.read(
                            ba, bytesread, ba.length - bytesread)) > 0) {
                bytesread += retval;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/RefCapablePropertyResourceBundle.java|(19241,220,<436,16>,<440,17>)
```
 while (bytesread < ba.length &&
                        (retval = inputStream.read(
                                ba, bytesread, ba.length - bytesread)) > 0) {
                    bytesread += retval;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java|(8301,744,<265,4>,<285,5>)
```
 /**
     *  File is opened in append mode although in current usage the file
     *  never pre-exists
     */
    protected void openFile() {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java|(3786,630,<102,4>,<118,5>)
```
 protected void openFile() {

        try {
            FileAccess   fa  = isDump ? FileUtil.getFileUtil()
                                      : database.logger.getFileAccess();
            OutputStream fos = fa.openOutputStreamElement(outFile);

            outDescriptor = fa.getFileSync(fos);
            fileStreamOut = fos;
            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);
        } catch (IOException e) {
            throw Error.error(e, ErrorCode.FILE_IO_ERROR,
                              ErrorCode.M_Message_Pair, new Object[] {
                e.toString(), outFile
            });
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(116568,244,<3123,16>,<3129,17>)
```
 if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_INTEGER;
                }

                if (!nodes[1].dataType.isIntegralType()) {
                    throw Error.error(ErrorCode.X_42561);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(49796,244,<1358,16>,<1364,17>)
```
 if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_INTEGER;
                }

                if (!nodes[1].dataType.isIntegralType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(32327,844,<899,16>,<920,17>)
```
 OrderedHashSet tableSet          = new OrderedHashSet();
                OrderedHashSet constraintNameSet = new OrderedHashSet();
                OrderedHashSet indexNameSet      = new OrderedHashSet();

                for (int i = 0; i < dependentConstraints.size(); i++) {
                    Constraint c = (Constraint) dependentConstraints.get(i);
                    Table      t = c.getMain();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
                    constraintNameSet.add(c.getRefName());
                    indexNameSet.add(c.getRefIndex().getName());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(27930,714,<944,8>,<965,9>)
```
 OrderedHashSet tableSet          = new OrderedHashSet();
        OrderedHashSet constraintNameSet = new OrderedHashSet();
        OrderedHashSet indexNameSet      = new OrderedHashSet();

        for (int i = 0; i < externalConstraints.size(); i++) {
            Constraint c = (Constraint) externalConstraints.get(i);
            Table      t = c.getMain();

            if (t != table) {
                tableSet.add(t);
            }

            t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(2608,504,<64,12>,<75,49>)
```
 int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(largeBlock, blockOffset * lobBlockSize,
                             dataBytes, dataBlockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
            dataBlockOffset += currentBlockCount;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(3757,504,<96,12>,<107,49>)
```
 int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(dataBytes, dataBlockOffset * lobBlockSize,
                             largeBlock, blockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
            dataBlockOffset += currentBlockCount;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127680,1327,<2119,8>,<2148,47>)
```
 commandSet.put(T_ACTION, ACTION);
        commandSet.put(T_ADD, ADD);
        commandSet.put(T_ADMIN, ADMIN);
        commandSet.put(T_AFTER, AFTER);
        commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127838,1355,<2123,8>,<2152,49>)
```
 commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129325,1282,<2155,8>,<2184,53>)
```
 commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130699,1401,<2187,8>,<2217,45>)
```
 commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130897,1374,<2191,8>,<2221,43>)
```
 commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131065,1394,<2195,8>,<2225,49>)
```
 commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131261,1390,<2199,8>,<2229,53>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131542,1275,<2204,8>,<2233,43>)
```
 commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131699,1274,<2208,8>,<2237,35>)
```
 commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131865,1262,<2212,8>,<2241,41>)
```
 commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132017,1280,<2216,8>,<2245,41>)
```
 commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132192,1283,<2220,8>,<2249,49>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132368,1272,<2224,8>,<2253,45>)
```
 commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132564,1248,<2228,8>,<2257,43>)
```
 commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132744,1238,<2232,8>,<2261,37>)
```
 commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132902,1264,<2236,8>,<2265,41>)
```
 commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,1292,<2240,8>,<2269,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133222,1296,<2244,8>,<2273,47>)
```
 commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133384,1300,<2248,8>,<2277,41>)
```
 commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133559,1315,<2252,8>,<2281,41>)
```
 commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133731,1313,<2256,8>,<2285,41>)
```
 commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133917,1307,<2260,8>,<2289,49>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134089,1323,<2264,8>,<2293,45>)
```
 commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134265,1345,<2268,8>,<2297,51>)
```
 commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134435,1387,<2272,8>,<2301,61>)
```
 commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134609,1433,<2276,8>,<2305,47>)
```
 commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134787,1455,<2280,8>,<2309,47>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134965,1483,<2284,8>,<2313,55>)
```
 commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135133,1527,<2288,8>,<2317,51>)
```
 commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135323,1587,<2292,8>,<2321,57>)
```
 commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135521,1617,<2296,8>,<2325,53>)
```
 commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135717,1605,<2300,8>,<2329,41>)
```
 commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135955,1528,<2304,8>,<2333,47>)
```
 commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136157,1526,<2308,8>,<2337,53>)
```
 commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136355,1512,<2312,8>,<2341,35>)
```
 commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136565,1566,<2316,8>,<2345,74>)
```
 commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136807,1490,<2320,8>,<2349,39>)
```
 commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137035,1428,<2324,8>,<2353,43>)
```
 commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137249,1394,<2328,8>,<2359,37>)
```
 commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137406,1425,<2332,8>,<2363,39>)
```
 commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137570,1419,<2336,8>,<2367,41>)
```
 commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137794,1373,<2340,8>,<2371,39>)
```
 commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141485,1417,<2422,8>,<2451,43>)
```
 commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141673,1433,<2426,8>,<2455,47>)
```
 commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141859,1441,<2430,8>,<2459,39>)
```
 commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142083,1425,<2434,8>,<2463,47>)
```
 commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142251,1443,<2438,8>,<2467,37>)
```
 commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142461,1513,<2442,8>,<2473,77>)
```
 commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142631,1583,<2446,8>,<2477,63>)
```
 commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);
        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22995,253,<701,8>,<704,73>)
```
 tDestDrop.setEnabled(and && b && cDrop.getState());
        tDestCreate.setEnabled(and && b && cCreate.getState());
        tDestDelete.setEnabled(and && b && cDelete.getState());
        tDestCreateIndex.setEnabled(and && b && cCreateIndex.getState());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(23055,263,<702,8>,<705,69>)
```
 tDestCreate.setEnabled(and && b && cCreate.getState());
        tDestDelete.setEnabled(and && b && cDelete.getState());
        tDestCreateIndex.setEnabled(and && b && cCreateIndex.getState());
        tDestDropIndex.setEnabled(and && b && cDropIndex.getState());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(20487,274,<717,68>,<729,5>)
```
 {

        for (int j = 0; j < fieldCount; j++) {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[rowColMap[j]]);

            if (i != 0) {
                return i;
            }
        }

        return 0;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(20952,273,<735,51>,<747,5>)
```
 {

        for (int j = 0; j < fieldCount; j++) {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[colIndex[j]]);

            if (i != 0) {
                return i;
            }
        }

        return 0;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(20078,257,<704,8>,<713,17>)
```
 for (int j = 0; j < fieldcount; j++) {
            int i = colTypes[j].compare(session, a[colIndex[j]],
                                        b[rowColMap[j]]);

            if (i != 0) {
                return i;
            }
        }

        return 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152615,294,<5556,8>,<5562,38>)
```
 Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
        readThis(Tokens.CLOSEBRACKET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153437,296,<5591,8>,<5597,38>)
```
 Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
        readThis(Tokens.CLOSEBRACKET);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(6191,2611,<166,12>,<228,13>)
```
 if (Stmts.bDropIndex) {
                if (Stmts.sDestDropIndex.charAt(Stmts.sDestDropIndex.length()
                                                - 1) != ';') {
                    Stmts.sDestDropIndex += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDropIndex.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDropIndex.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDropIndex.substring(
                                        lastsemicolon).indexOf(';');
                }
            }

            if (Stmts.bDelete) {
                if (Stmts.sDestDelete.charAt(Stmts.sDestDelete.length() - 1)
                        != ';') {
                    Stmts.sDestDelete += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDelete.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDelete.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDelete.substring(
                                        lastsemicolon).indexOf(';');
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferTable.java|(7526,2582,<198,12>,<260,13>)
```
 if (Stmts.bDelete) {
                if (Stmts.sDestDelete.charAt(Stmts.sDestDelete.length() - 1)
                        != ';') {
                    Stmts.sDestDelete += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDelete.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDelete.substring(lastsemicolon,
                            nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDelete.substring(
                                        lastsemicolon).indexOf(';');
                }
            }

            if (Stmts.bDrop) {
                if (Stmts.sDestDrop.charAt(Stmts.sDestDrop.length() - 1)
                        != ';') {
                    Stmts.sDestDrop += ";";
                }

                int lastsemicolon = 0;
                int nextsemicolon = Stmts.sDestDrop.indexOf(';');

                while (nextsemicolon > lastsemicolon) {
                    Statement = Stmts.sDestDrop.substring(lastsemicolon,
                                                          nextsemicolon);

                    while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }

                    try {
                        tracer.trace("Executing " + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace("Ignoring error " + e.getMessage());
                    }

                    lastsemicolon = nextsemicolon + 1;
                    nextsemicolon = lastsemicolon
                                    + Stmts.sDestDrop.substring(
                                        lastsemicolon).indexOf(';');
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(35524,133,<1107,8>,<1109,9>)
```
 if (nodes[LEFT].nodes[1].isUnresolvedParam()) {
            nodes[LEFT].nodes[1].dataType = nodes[RIGHT].nodes[0].dataType;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(35667,134,<1111,8>,<1113,9>)
```
 if (nodes[RIGHT].nodes[1].isUnresolvedParam()) {
            nodes[RIGHT].nodes[1].dataType = nodes[LEFT].nodes[0].dataType;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(60409,502,<1985,12>,<1998,13>)
```
 if (indexEndCondition != null) {
                indexEndCondition =
                    indexEndCondition.replaceColumnReferences(range, list);
            }

            if (excludeConditions != null) {
                excludeConditions =
                    excludeConditions.replaceColumnReferences(range, list);
            }

            if (nonIndexCondition != null) {
                nonIndexCondition =
                    nonIndexCondition.replaceColumnReferences(range, list);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(60581,502,<1990,12>,<2003,13>)
```
 if (excludeConditions != null) {
                excludeConditions =
                    excludeConditions.replaceColumnReferences(range, list);
            }

            if (nonIndexCondition != null) {
                nonIndexCondition =
                    nonIndexCondition.replaceColumnReferences(range, list);
            }

            if (terminalCondition != null) {
                terminalCondition =
                    terminalCondition.replaceColumnReferences(range, list);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(13523,237,<291,8>,<294,62>)
```
 DSV_OPTIONS_TEXT = SqltoolRB.dsv_options.getString();
        D_OPTIONS_TEXT = SqltoolRB.d_options.getString();
        DSV_X_SYNTAX_MSG = SqltoolRB.dsv_x_syntax.getString();
        DSV_M_SYNTAX_MSG = SqltoolRB.dsv_m_syntax.getString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(13585,239,<292,8>,<295,63>)
```
 D_OPTIONS_TEXT = SqltoolRB.d_options.getString();
        DSV_X_SYNTAX_MSG = SqltoolRB.dsv_x_syntax.getString();
        DSV_M_SYNTAX_MSG = SqltoolRB.dsv_m_syntax.getString();
        nobufferYetString = SqltoolRB.nobuffer_yet.getString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35435,303,<1132,8>,<1136,53>)
```
 typeNames.put(Tokens.T_CHARACTER, Types.SQL_CHAR);
        typeNames.put(Tokens.T_VARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);
        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35494,298,<1133,8>,<1137,53>)
```
 typeNames.put(Tokens.T_VARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);
        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35554,302,<1134,8>,<1138,63>)
```
 typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);
        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35632,286,<1135,8>,<1139,61>)
```
 typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35693,281,<1136,8>,<1140,55>)
```
 typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35747,289,<1137,8>,<1141,61>)
```
 typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35801,295,<1138,8>,<1142,59>)
```
 typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35865,289,<1139,8>,<1143,57>)
```
 typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35927,281,<1140,8>,<1144,53>)
```
 typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35983,281,<1141,8>,<1145,55>)
```
 typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36045,277,<1142,8>,<1146,57>)
```
 typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36105,277,<1143,8>,<1147,59>)
```
 typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36163,279,<1144,8>,<1148,59>)
```
 typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36217,285,<1145,8>,<1149,59>)
```
 typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36273,287,<1146,8>,<1150,57>)
```
 typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36331,293,<1147,8>,<1151,63>)
```
 typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36391,287,<1148,8>,<1152,53>)
```
 typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36451,281,<1149,8>,<1153,53>)
```
 typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36511,273,<1150,8>,<1154,51>)
```
 typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36569,267,<1151,8>,<1155,51>)
```
 typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);
        typeNames.put(Tokens.T_OTHER, Types.OTHER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36905,294,<1160,8>,<1164,64>)
```
 typeAliases.put(Tokens.T_CHAR, Types.SQL_CHAR);
        typeAliases.put(Tokens.T_INT, Types.SQL_INTEGER);
        typeAliases.put(Tokens.T_DEC, Types.SQL_DECIMAL);
        typeAliases.put(Tokens.T_LONGVARCHAR, Types.LONGVARCHAR);
        typeAliases.put(Tokens.T_DATETIME, Types.SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(36961,308,<1161,8>,<1165,69>)
```
 typeAliases.put(Tokens.T_INT, Types.SQL_INTEGER);
        typeAliases.put(Tokens.T_DEC, Types.SQL_DECIMAL);
        typeAliases.put(Tokens.T_LONGVARCHAR, Types.LONGVARCHAR);
        typeAliases.put(Tokens.T_DATETIME, Types.SQL_TIMESTAMP);
        typeAliases.put(Tokens.T_LONGVARBINARY, Types.LONGVARBINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(37019,305,<1162,8>,<1166,54>)
```
 typeAliases.put(Tokens.T_DEC, Types.SQL_DECIMAL);
        typeAliases.put(Tokens.T_LONGVARCHAR, Types.LONGVARCHAR);
        typeAliases.put(Tokens.T_DATETIME, Types.SQL_TIMESTAMP);
        typeAliases.put(Tokens.T_LONGVARBINARY, Types.LONGVARBINARY);
        typeAliases.put(Tokens.T_OBJECT, Types.OTHER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(5863,345,<173,8>,<177,71>)
```
 rightsStringLookup.put(Tokens.T_ALL, GrantConstants.ALL);
        rightsStringLookup.put(Tokens.T_SELECT, GrantConstants.SELECT);
        rightsStringLookup.put(Tokens.T_UPDATE, GrantConstants.UPDATE);
        rightsStringLookup.put(Tokens.T_DELETE, GrantConstants.DELETE);
        rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(5929,353,<174,8>,<178,73>)
```
 rightsStringLookup.put(Tokens.T_SELECT, GrantConstants.SELECT);
        rightsStringLookup.put(Tokens.T_UPDATE, GrantConstants.UPDATE);
        rightsStringLookup.put(Tokens.T_DELETE, GrantConstants.DELETE);
        rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);
        rightsStringLookup.put(Tokens.T_EXECUTE, GrantConstants.EXECUTE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(6001,351,<175,8>,<179,69>)
```
 rightsStringLookup.put(Tokens.T_UPDATE, GrantConstants.UPDATE);
        rightsStringLookup.put(Tokens.T_DELETE, GrantConstants.DELETE);
        rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);
        rightsStringLookup.put(Tokens.T_EXECUTE, GrantConstants.EXECUTE);
        rightsStringLookup.put(Tokens.T_USAGE, GrantConstants.USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(6073,359,<176,8>,<180,79>)
```
 rightsStringLookup.put(Tokens.T_DELETE, GrantConstants.DELETE);
        rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);
        rightsStringLookup.put(Tokens.T_EXECUTE, GrantConstants.EXECUTE);
        rightsStringLookup.put(Tokens.T_USAGE, GrantConstants.USAGE);
        rightsStringLookup.put(Tokens.T_REFERENCES, GrantConstants.REFERENCES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(6145,361,<177,8>,<181,73>)
```
 rightsStringLookup.put(Tokens.T_INSERT, GrantConstants.INSERT);
        rightsStringLookup.put(Tokens.T_EXECUTE, GrantConstants.EXECUTE);
        rightsStringLookup.put(Tokens.T_USAGE, GrantConstants.USAGE);
        rightsStringLookup.put(Tokens.T_REFERENCES, GrantConstants.REFERENCES);
        rightsStringLookup.put(Tokens.T_TRIGGER, GrantConstants.TRIGGER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(16375,263,<417,8>,<420,70>)
```
 gm.grantSystemToPublic(TypeInvariants.SQL_IDENTIFIER, right);
        gm.grantSystemToPublic(TypeInvariants.YES_OR_NO, right);
        gm.grantSystemToPublic(TypeInvariants.TIME_STAMP, right);
        gm.grantSystemToPublic(TypeInvariants.CARDINAL_NUMBER, right);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(16445,263,<418,8>,<421,69>)
```
 gm.grantSystemToPublic(TypeInvariants.YES_OR_NO, right);
        gm.grantSystemToPublic(TypeInvariants.TIME_STAMP, right);
        gm.grantSystemToPublic(TypeInvariants.CARDINAL_NUMBER, right);
        gm.grantSystemToPublic(TypeInvariants.CHARACTER_DATA, right);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(44329,366,<1219,12>,<1228,21>)
```
 // ------------------------------------------------------------
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_TEXTTABLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(47793,305,<1315,12>,<1324,21>)
```
 //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_TABLESTATS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50552,305,<1409,12>,<1417,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(52373,288,<1464,12>,<1472,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[APPLICABLE_ROLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(54856,266,<1541,12>,<1548,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ASSERTIONS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(59181,286,<1666,12>,<1674,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHARACTER_SETS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(74673,331,<2102,12>,<2110,21>)
```
 // false PK, as rows may have NULL COLLATION_CATALOG
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLLATIONS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(168940,296,<4523,12>,<4531,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[REFERENTIAL_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(255900,284,<6723,12>,<6731,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRANSLATIONS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(275783,264,<7280,12>,<7287,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGERS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(128909,383,<3131,12>,<3140,21>)
```
 // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(133351,406,<3235,12>,<3245,21>)
```
 // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SEQUENCES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(142701,278,<3471,12>,<3479,21>)
```
 //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TABLES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(225361,284,<5488,12>,<5492,64>)
```
 rejectFile = new File(dereferenceAt(dsvRejectFile));
            rejectWriter = new PrintWriter(
                    new OutputStreamWriter(new FileOutputStream(rejectFile),
                    (shared.encoding == null)
                    ? DEFAULT_FILE_ENCODING : shared.encoding));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(226084,304,<5502,12>,<5506,64>)
```
 rejectReportFile = new File(dereferenceAt(dsvRejectReport));
            rejectReportWriter = new PrintWriter(new OutputStreamWriter(
                    new FileOutputStream(rejectReportFile),
                    (shared.encoding == null)
                    ? DEFAULT_FILE_ENCODING : shared.encoding));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(36479,169,<916,8>,<921,9>)
```
 Boolean  value;
        Object[] metaData = (Object[]) dbMeta.get(key);

        if (metaData == null) {
            throw Error.error(ErrorCode.X_42555, key);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(37276,169,<947,8>,<952,9>)
```
 String   value;
        Object[] metaData = (Object[]) dbMeta.get(key);

        if (metaData == null) {
            throw Error.error(ErrorCode.X_42555, key);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobClient.java|(24288,185,<725,8>,<728,77>)
```
 resultSet.startUpdate(colIndex + 1);

        resultSet.preparedStatement.parameterValues[colIndex] = clob;
        resultSet.preparedStatement.parameterSet[colIndex]    = Boolean.TRUE;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobClient.java|(13455,185,<379,8>,<382,77>)
```
 resultSet.startUpdate(colIndex + 1);

        resultSet.preparedStatement.parameterValues[colIndex] = blob;
        resultSet.preparedStatement.parameterSet[colIndex]    = Boolean.TRUE;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(16896,455,<543,39>,<555,13>)
```
 {
                if (otherType.typeCode == typeCode) {
                    return precision >= otherType.precision ? 0
                                                            : 1;
                }

                if (otherType.typeCode == Types.SQL_BINARY) {
                    return precision >= otherType.precision ? 0
                                                            : -1;
                }

                return -1;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(21494,453,<715,37>,<727,13>)
```
 {
                if (otherType.typeCode == typeCode) {
                    return precision >= otherType.precision ? 0
                                                            : 1;
                }

                if (otherType.typeCode == Types.SQL_CHAR) {
                    return precision >= otherType.precision ? 0
                                                            : -1;
                }

                return -1;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(33853,363,<832,12>,<837,79>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_COLUMNS]);

            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);              // 0
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);            // 1
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);             // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);            // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(59125,317,<1444,12>,<1449,71>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_PRIMARYKEYS]);

            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(70938,536,<1708,20>,<1718,73>)
```
 if (translateTTI) {
                        if (type.isIntervalType()) {
                            type = ((IntervalType) type).getCharacterType();
                        } else if (type.isDateTimeTypeWithZone()) {
                            type = ((DateTimeType) type)
                                .getDateTimeTypeWithoutZone();
                        }
                    }

                    row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(112585,434,<2728,12>,<2737,63>)
```
 if (translateTTI) {
                if (type.isIntervalType()) {
                    type = ((IntervalType) type).getCharacterType();
                } else if (type.isDateTimeTypeWithZone()) {
                    type = ((DateTimeType) type).getDateTimeTypeWithoutZone();
                }
            }

            data[type_catalog] = database.getCatalogName().name;
            data[type_schema]  = distinct.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121589,505,<2955,0>,<2970,29>)
```
 // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
        final int is_grantable   = 7;

        // enumerations
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();

// Initialization
        tables = allTables();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(139054,462,<3382,8>,<3394,29>)
```
 // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
        final int with_hierarchy = 7;
        OrderedHashSet grantees =
            session.getGrantee().getGranteeAndAllRolesWithPublic();

        tables = allTables();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(96164,393,<2325,8>,<2338,38>)
```
 final int itable_schem = 1;
        final int itable_name  = 2;
        final int itable_type  = 3;
        final int iremark      = 4;

        // JDBC 3.0
        final int itype_cat   = 5;
        final int itype_schem = 6;
        final int itype_name  = 7;
        final int isref_cname = 8;
        final int iref_gen    = 9;

        // hsqldb ext
        final int ihsqldb_type   = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(143157,512,<3487,8>,<3496,52>)
```
 final int table_schema                 = 1;
        final int table_name                   = 2;
        final int table_type                   = 3;
        final int self_referencing_column_name = 4;
        final int reference_generation         = 5;
        final int user_defined_type_catalog    = 6;
        final int user_defined_type_schema     = 7;
        final int user_defined_type_name       = 8;
        final int is_insertable_into           = 9;
        final int is_typed                     = 10;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(33112,254,<913,12>,<919,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SESSIONINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38148,317,<1054,12>,<1062,21>)
```
 // order:  SESSION_ID
            // true primary key
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SESSIONS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(57562,273,<1618,12>,<1625,21>)
```
 // true PK
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[AUTHORIZATIONS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(143741,272,<3869,12>,<3876,21>)
```
 // true PK
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ENABLED_ROLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(79811,254,<1910,12>,<1916,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(91049,344,<2202,12>,<2210,21>)
```
 // order: TABLE_SCHEM
            // true PK, as rows never have null TABLE_SCHEM
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_SCHEMAS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(99427,309,<2418,12>,<2426,21>)
```
 // order: TABLE_TYPE
            // true PK
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_TABLETYPES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(117591,298,<2844,12>,<2852,21>)
```
 // order: USER
            // true PK
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_USERS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(146738,323,<3583,12>,<3591,21>)
```
 // order:  TABLE_CAT
            // true PK
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[INFORMATION_SCHEMA_CATALOG_NAME].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(105847,364,<2493,16>,<2501,17>)
```
 if (fetchingVar != null) {
                    if (firstVal == null)
                        shared.userVars.remove(fetchingVar);
                    else
                        shared.userVars.put(fetchingVar, firstVal);
                    updateUserSettings();
                    sqlExpandMode = null;
                    fetchingVar = null;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(169732,419,<4016,24>,<4025,25>)
```
 if (fetchingVar != null) {
                            if (val == null)
                                shared.userVars.remove(fetchingVar);
                            else
                                shared.userVars.put(fetchingVar, val);
                            updateUserSettings();
                            sqlExpandMode = null;

                            fetchingVar = null;
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNitin.java|(2739,289,<71,12>,<81,49>)
```
 try {
                if (br != null) {
                    br.close();
                }
            } catch (java.io.IOException ioe) {}

            try {
                if (s != null) {
                    s.close();
                }
            } catch (java.sql.SQLException se) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNitin.java|(2891,288,<77,12>,<87,49>)
```
 try {
                if (s != null) {
                    s.close();
                }
            } catch (java.sql.SQLException se) {}

            try {
                if (c != null) {
                    c.close();
                }
            } catch (java.sql.SQLException se) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/TextFileSettings.java|(4692,475,<129,8>,<138,48>)
```
 //-- Get booleans
        ignoreFirst =
            dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_ignore_first);
        ignoreFirst = tableprops.isPropertyTrue(
            HsqlDatabaseProperties.textdb_ignore_first, ignoreFirst);
        isQuoted =
            dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted);
        isQuoted =
            tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted,
                                      isQuoted);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/TextFileSettings.java|(4939,482,<134,8>,<143,51>)
```
 isQuoted =
            dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted);
        isQuoted =
            tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted,
                                      isQuoted);
        isAllQuoted =
            dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_all_quoted);
        isAllQuoted =
            tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_all_quoted,
                                      isAllQuoted);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(52631,267,<1766,24>,<1772,36>)
```
 opTypes[indexedColumnCount]    = e.opType;
                        opTypeEnd                      = OpTypes.MAX;
                        opTypesEnd[indexedColumnCount] = OpTypes.MAX;

                        indexedColumnCount++;

                        return true;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(53915,264,<1796,24>,<1802,36>)
```
 opTypes[indexedColumnCount]    = OpTypes.NOT;
                        opTypeEnd                      = e.opType;
                        opTypesEnd[indexedColumnCount] = e.opType;

                        indexedColumnCount++;

                        return true;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38671,375,<1070,8>,<1079,38>)
```
 final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
        final int it_waiting     = 10;
        final int it_waited      = 11;
        final int it_statement   = 12;
        final int it_latch_count = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92743,495,<2600,8>,<2609,50>)
```
 final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(125155,495,<3396,8>,<3405,50>)
```
 final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
        final int numeric_precision          = 12;
        final int numeric_precision_radix    = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159192,475,<4304,8>,<4313,48>)
```
 final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219314,615,<5840,8>,<5849,62>)
```
 final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(276301,495,<7295,8>,<7304,50>)
```
 final int event_object_catalog       = 4;
        final int event_object_schema        = 5;
        final int event_object_table         = 6;
        final int action_order               = 7;
        final int action_condition           = 8;
        final int action_statement           = 9;
        final int action_orientation         = 10;
        final int action_timing              = 11;
        final int action_reference_old_table = 12;
        final int action_reference_new_table = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299490,495,<7880,8>,<7889,50>)
```
 final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(37104,415,<898,8>,<907,42>)
```
 final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
        final int icolumn_def        = 12;
        final int isql_data_type     = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46695,385,<1140,8>,<1149,39>)
```
 final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(55139,405,<1338,8>,<1347,41>)
```
 final int iindex_qualifier  = 4;
        final int iindex_name       = 5;
        final int itype             = 6;
        final int iordinal_position = 7;
        final int icolumn_name      = 8;
        final int iasc_or_desc      = 9;
        final int icardinality      = 10;
        final int ipages            = 11;
        final int ifilter_condition = 12;
        final int irow_cardinality  = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(69090,465,<1658,8>,<1667,47>)
```
 final int parameter_mode          = 4;
        final int data_type_sql_id        = 5;
        final int data_type               = 6;
        final int numeric_precision       = 7;
        final int byte_length             = 8;
        final int numeric_scale           = 9;
        final int numeric_precision_radix = 10;
        final int nullable                = 11;
        final int remark                  = 12;
        final int default_val             = 13;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(105043,425,<2539,8>,<2548,43>)
```
 final int iliteral_suffix     = 4;
        final int icreate_params      = 5;
        final int inullable           = 6;
        final int icase_sensitive     = 7;
        final int isearchable         = 8;
        final int iunsigned_attribute = 9;
        final int ifixed_prec_scale   = 10;
        final int iauto_increment     = 11;
        final int ilocal_type_name    = 12;
        final int iminimum_scale      = 13;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialog.java|(10591,311,<341,4>,<351,5>)
```
 public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java|(13295,311,<381,4>,<391,5>)
```
 public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121324,556,<2943,0>,<2962,37>)
```
 // calculated column values
        String  tableCatalog;
        String  tableSchema;
        String  tableName;
        Grantee granteeObject;

// intermediate holders
        User     user;
        Iterator tables;
        Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(138769,576,<3370,8>,<3389,37>)
```
 // calculated column values
        String  tableCatalog;
        String  tableSchema;
        String  tableName;
        Grantee granteeObject;
        String  privilege;

        // intermediate holders
        Iterator tables;
        Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83644,186,<2006,8>,<2011,32>)
```
 Object[]  row           = t.getEmptyRowData();

        row[icat]          = cat;
        row[ischem]        = schem;
        row[ipname]        = pName;
        row[iinput_parms]  = ip;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87889,210,<2112,8>,<2119,32>)
```
 // initialization
        Object[] row = t.getEmptyRowData();

        // Do it.
        row[icat]       = cat;
        row[ischem]     = schem;
        row[iname]      = pName;
        row[icol_name]  = cName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SqlInvariants.java|(4032,642,<90,8>,<102,36>)
```
 INFORMATION_SCHEMA_HSQLNAME =
            HsqlNameManager.newSystemObjectName(INFORMATION_SCHEMA,
                SchemaObject.SCHEMA);
        SYSTEM_SCHEMA_HSQLNAME =
            HsqlNameManager.newSystemObjectName(SYSTEM_SCHEMA,
                SchemaObject.SCHEMA);
        LOBS_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(LOBS_SCHEMA,
                SchemaObject.SCHEMA);
        SQLJ_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(SQLJ_SCHEMA,
                SchemaObject.SCHEMA);
        SYSTEM_SUBQUERY_HSQLNAME =
            HsqlNameManager.newSystemObjectName(SYSTEM_SUBQUERY,
                SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SqlInvariants.java|(4176,606,<93,8>,<104,37>)
```
 SYSTEM_SCHEMA_HSQLNAME =
            HsqlNameManager.newSystemObjectName(SYSTEM_SCHEMA,
                SchemaObject.SCHEMA);
        LOBS_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(LOBS_SCHEMA,
                SchemaObject.SCHEMA);
        SQLJ_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(SQLJ_SCHEMA,
                SchemaObject.SCHEMA);
        SYSTEM_SUBQUERY_HSQLNAME =
            HsqlNameManager.newSystemObjectName(SYSTEM_SUBQUERY,
                SchemaObject.TABLE);
        MODULE_HSQLNAME = HsqlNameManager.newSystemObjectName(MODULE,
                SchemaObject.SCHEMA);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SqlInvariants.java|(4310,581,<96,8>,<106,36>)
```
 LOBS_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(LOBS_SCHEMA,
                SchemaObject.SCHEMA);
        SQLJ_SCHEMA_HSQLNAME = HsqlNameManager.newSystemObjectName(SQLJ_SCHEMA,
                SchemaObject.SCHEMA);
        SYSTEM_SUBQUERY_HSQLNAME =
            HsqlNameManager.newSystemObjectName(SYSTEM_SUBQUERY,
                SchemaObject.TABLE);
        MODULE_HSQLNAME = HsqlNameManager.newSystemObjectName(MODULE,
                SchemaObject.SCHEMA);
        DUAL_TABLE_HSQLNAME = HsqlNameManager.newSystemObjectName(DUAL,
                SchemaObject.TABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(27539,240,<729,12>,<733,48>)
```
 autoRefresh      = prefs.autoRefresh;
            displayRowCounts = prefs.showRowCounts;
            showSys          = prefs.showSysTables;
            showSchemas      = prefs.showSchemas;
            gridFormat       = prefs.resultGrid;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(27589,241,<730,12>,<734,50>)
```
 displayRowCounts = prefs.showRowCounts;
            showSys          = prefs.showSysTables;
            showSchemas      = prefs.showSchemas;
            gridFormat       = prefs.resultGrid;
            showTooltips     = prefs.showTooltips;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(107160,179,<2523,24>,<2526,67>)
```
 if (cells[i] == null)
                            shared.userVars.remove(vars[i]);
                        else
                            shared.userVars.put(vars[i], cells[i]);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(108605,173,<2556,20>,<2559,66>)
```
 if (origVals[i] == null)
                        shared.userVars.remove(vars[i]);
                    else
                        shared.userVars.put(vars[i], origVals[i]);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87037,388,<2086,8>,<2097,33>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat       = 0;
        final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(93511,384,<2210,12>,<2221,64>)
```
 e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.sysprop_empty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.sysprop_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');

            varName = s.substring(b + (permitUnset ? 3 : 2), e);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(94641,384,<2246,12>,<2257,64>)
```
 e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.plvar_nameempty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.plvar_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');

            varName = s.substring(b + (permitUnset ? 3 : 2), e);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130801,3977,<2189,8>,<2279,47>)
```
 commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131261,3963,<2199,8>,<2289,49>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131781,3927,<2210,8>,<2299,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132192,4050,<2220,8>,<2309,47>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132660,4138,<2230,8>,<2319,69>)
```
 commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133054,4268,<2240,8>,<2329,41>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133484,4301,<2250,8>,<2339,45>)
```
 commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133917,4380,<2260,8>,<2349,39>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134355,4386,<2270,8>,<2361,49>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134787,4380,<2280,8>,<2371,39>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(10220,422,<335,8>,<349,9>)
```
 if (selectColumnSet != null && !selectColumnSet.isEmpty()) {
            return false;
        }

        if (insertColumnSet != null && !insertColumnSet.isEmpty()) {
            return false;
        }

        if (updateColumnSet != null && !updateColumnSet.isEmpty()) {
            return false;
        }

        if (referencesColumnSet != null && !referencesColumnSet.isEmpty()) {
            return false;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(10326,424,<339,8>,<353,9>)
```
 if (insertColumnSet != null && !insertColumnSet.isEmpty()) {
            return false;
        }

        if (updateColumnSet != null && !updateColumnSet.isEmpty()) {
            return false;
        }

        if (referencesColumnSet != null && !referencesColumnSet.isEmpty()) {
            return false;
        }

        if (triggerColumnSet != null && !triggerColumnSet.isEmpty()) {
            return false;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestQuotes.java|(4242,848,<117,12>,<147,13>)
```
 if (rs2 != null) {
                try {
                    rs2.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (pStatement != null) {
                try {
                    pStatement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestQuotes.java|(4451,862,<125,12>,<155,13>)
```
 if (rs1 != null) {
                try {
                    rs1.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (pStatement != null) {
                try {
                    pStatement.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(17750,271,<477,16>,<483,48>)
```
 Table refT = database.schemaManager.getUserTable(session,
                    c.core.refTable.getName());

                c.core.refTable = refT;

                Table mainT = database.schemaManager.getUserTable(session,
                    c.core.mainTable.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(18262,273,<489,16>,<495,47>)
```
 Table mainT = database.schemaManager.getUserTable(session,
                    c.core.mainTable.getName());

                c.core.mainTable = mainT;

                Table refT = database.schemaManager.getUserTable(session,
                    c.core.refTable.getName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(161641,599,<5185,4>,<5205,5>)
```
 void checkSchemaUpdateAuthorisation(Session session, HsqlName schema) {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(57056,618,<1482,4>,<1503,5>)
```
 static void checkSchemaUpdateAuthorisation(Session session,
            HsqlName schema) {

        if (session.isProcessingLog()) {
            return;
        }

        if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }

        if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }

        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);
        session.checkDDLWrite();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131025,4433,<2194,8>,<2294,45>)
```
 commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131781,4461,<2210,8>,<2309,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132418,4666,<2225,8>,<2324,57>)
```
 commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133054,4731,<2240,8>,<2339,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133693,4810,<2255,8>,<2354,39>)
```
 commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134355,4812,<2270,8>,<2371,39>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(2780,708,<70,12>,<84,50>)
```
 outCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outCipher.init(Cipher.ENCRYPT_MODE, key);

            outStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(3036,710,<76,12>,<90,50>)
```
 outStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);

            inCipher.init(Cipher.DECRYPT_MODE, key);

            inStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(78308,323,<2706,74>,<2717,5>)
```
 {

        RowSetNavigator nav = ins.initialiseNavigator();

        while (nav.hasNext()) {
            Object[] data = (Object[]) nav.getNext();
            Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);

            insertData(session, store, newData);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(77079,311,<2660,8>,<2668,9>)
```
 RowSetNavigator nav   = result.initialiseNavigator();

        while (nav.hasNext()) {
            Object[] data = (Object[]) nav.getNext();
            Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);

            insertData(session, store, newData);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(22637,402,<680,24>,<687,25>)
```
 if ((TTable.Stmts.bIdxForced)
                                && (!IndiceName.startsWith("Idx_"))) {
                            DropIndex += Dest.helper.formatIdentifier("Idx_"
                                    + IndiceName);
                        } else {
                            DropIndex +=
                                Dest.helper.formatIdentifier(IndiceName);
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(23301,406,<697,24>,<704,25>)
```
 if ((TTable.Stmts.bIdxForced)
                                && (!IndiceName.startsWith("Idx_"))) {
                            CreateIndex += Dest.helper.formatIdentifier("Idx_"
                                    + IndiceName);
                        } else {
                            CreateIndex +=
                                Dest.helper.formatIdentifier(IndiceName);
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(45264,362,<1225,16>,<1232,17>)
```
 if (nodes[1].dataType == null) {
                    if (nodes[0].dataType.typeCode == Types.SQL_CLOB
                            || nodes[0].dataType.isBinaryType()) {
                        nodes[1].dataType = nodes[0].dataType;
                    } else {
                        nodes[1].dataType = Type.SQL_VARCHAR;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(59429,370,<1635,16>,<1642,17>)
```
 if (nodes[1].dataType == null) {
                    if (nodes[0].dataType.typeCode == Types.SQL_CLOB
                            || nodes[0].dataType.isBinaryType()) {
                        nodes[1].dataType = nodes[0].dataType;
                    } else {
                        nodes[1].dataType = Type.SQL_VARCHAR_DEFAULT;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(65746,238,<1529,16>,<1535,17>)
```
 for (int i = 0; i < resultMetaData.colIndexes.length; i++) {
                    if (resultMetaData.colIndexes[i] < 0) {
                        isInsertable = false;

                        break;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(315795,206,<7501,12>,<7507,13>)
```
 for (int i = 0; i < metaData.colIndexes.length; i++) {
                if (metaData.colIndexes[i] < 0) {
                    isInsertable = false;

                    break;
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(24107,390,<851,8>,<865,9>)
```
 if (selectColumnSet != null) {
            setColumns(table, selectColumnSet);
        }

        if (insertColumnSet != null) {
            setColumns(table, insertColumnSet);
        }

        if (updateColumnSet != null) {
            setColumns(table, updateColumnSet);
        }

        if (referencesColumnSet != null) {
            setColumns(table, referencesColumnSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(24205,392,<855,8>,<869,9>)
```
 if (insertColumnSet != null) {
            setColumns(table, insertColumnSet);
        }

        if (updateColumnSet != null) {
            setColumns(table, updateColumnSet);
        }

        if (referencesColumnSet != null) {
            setColumns(table, referencesColumnSet);
        }

        if (triggerColumnSet != null) {
            setColumns(table, triggerColumnSet);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(37895,323,<1178,8>,<1182,63>)
```
 jdbcConvertTypes.put(Tokens.SQL_TINYINT, Type.TINYINT);
        jdbcConvertTypes.put(Tokens.SQL_SMALLINT, Type.SQL_SMALLINT);
        jdbcConvertTypes.put(Tokens.SQL_INTEGER, Type.SQL_INTEGER);
        jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);
        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(37959,324,<1179,8>,<1183,64>)
```
 jdbcConvertTypes.put(Tokens.SQL_SMALLINT, Type.SQL_SMALLINT);
        jdbcConvertTypes.put(Tokens.SQL_INTEGER, Type.SQL_INTEGER);
        jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);
        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(38029,320,<1180,8>,<1184,65>)
```
 jdbcConvertTypes.put(Tokens.SQL_INTEGER, Type.SQL_INTEGER);
        jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);
        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_DOUBLE, Type.SQL_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(38097,320,<1181,8>,<1185,67>)
```
 jdbcConvertTypes.put(Tokens.SQL_BIGINT, Type.SQL_BIGINT);
        jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_DOUBLE, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_NUMERIC, Type.SQL_NUMERIC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(38163,322,<1182,8>,<1186,67>)
```
 jdbcConvertTypes.put(Tokens.SQL_REAL, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_FLOAT, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_DOUBLE, Type.SQL_DOUBLE);
        jdbcConvertTypes.put(Tokens.SQL_NUMERIC, Type.SQL_NUMERIC);
        jdbcConvertTypes.put(Tokens.SQL_DECIMAL, Type.SQL_DECIMAL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63270,563,<2198,4>,<2218,5>)
```
 void fireTriggers(Session session, int trigVecIndex,
                      RowSetNavigatorDataChange rowSet) {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(63839,553,<2220,4>,<2240,5>)
```
 void fireTriggers(Session session, int trigVecIndex,
                      RowSetNavigator rowSet) {

        if (!database.isReferentialIntegrity()) {
            return;
        }

        TriggerDef[] trigVec = triggerLists[trigVecIndex];

        for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(11698,714,<400,8>,<419,9>)
```
 if (!containsRights(isFullSelect, selectColumnSet,
                            right.selectColumnSet, right.isFullSelect)) {
            return false;
        }

        if (!containsRights(isFullInsert, insertColumnSet,
                            right.insertColumnSet, right.isFullInsert)) {
            return false;
        }

        if (!containsRights(isFullUpdate, updateColumnSet,
                            right.updateColumnSet, right.isFullUpdate)) {
            return false;
        }

        if (!containsRights(isFullReferences, referencesColumnSet,
                            right.referencesColumnSet,
                            right.isFullReferences)) {
            return false;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(11868,718,<405,8>,<424,9>)
```
 if (!containsRights(isFullInsert, insertColumnSet,
                            right.insertColumnSet, right.isFullInsert)) {
            return false;
        }

        if (!containsRights(isFullUpdate, updateColumnSet,
                            right.updateColumnSet, right.isFullUpdate)) {
            return false;
        }

        if (!containsRights(isFullReferences, referencesColumnSet,
                            right.referencesColumnSet,
                            right.isFullReferences)) {
            return false;
        }

        if (!containsRights(isFullTrigger, triggerColumnSet,
                            right.triggerColumnSet, right.isFullTrigger)) {
            return false;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(16901,393,<541,4>,<555,5>)
```
 public boolean canRead(Session session, PersistentStore store, long id,
                           int mode) {

        if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }

        RowAction action = (RowAction) rowActionMap.get(id);

        if (action == null) {
            return true;
        }

        return action.canRead(session, mode);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(10281,393,<326,4>,<340,5>)
```
 public boolean canRead(Session session, PersistentStore store, long id,
                           int mode) {

        if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }

        RowAction action = (RowAction) rowActionMap.get(id);

        if (action == null) {
            return true;
        }

        return action.canRead(session, mode);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(9015,232,<290,4>,<298,5>)
```
 public static ResultLob newLobGetTruncateLength(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_TRUNCATE_LENGTH;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(9253,227,<300,4>,<308,5>)
```
 public static ResultLob newLobCreateBlobResponse(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.RESPONSE_CREATE_BYTES;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(9486,227,<310,4>,<318,5>)
```
 public static ResultLob newLobCreateClobResponse(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.RESPONSE_CREATE_CHARS;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(10343,225,<344,4>,<352,5>)
```
 public static ResultLob newLobDuplicateRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_DUPLICATE_LOB;
        result.lobID   = id;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(39780,395,<1127,8>,<1136,9>)
```
 baseTable.fireTriggers(session, Trigger.UPDATE_AFTER, navigator);

        if (extraUpdateTables != null) {
            for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(48607,391,<1385,8>,<1394,9>)
```
 table.fireTriggers(session, Trigger.DELETE_AFTER, navigator);

        if (extraUpdateTables != null) {
            for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(2981,561,<74,12>,<86,52>)
```
 outCipher.init(Cipher.ENCRYPT_MODE, key);

            outStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                         : Cipher.getInstance(cipherName,
                                         provider);

            outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);

            inCipher.init(Cipher.DECRYPT_MODE, key);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Crypto.java|(3243,563,<80,12>,<92,58>)
```
 outStreamCipher.init(Cipher.ENCRYPT_MODE, key);

            inCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);

            inCipher.init(Cipher.DECRYPT_MODE, key);

            inStreamCipher = provider == null ? Cipher.getInstance(cipherName)
                                        : Cipher.getInstance(cipherName,
                                        provider);

            inStreamCipher.init(Cipher.DECRYPT_MODE, key);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(44937,291,<1217,20>,<1222,21>)
```
 if (nodes[1].dataType.typeCode == Types.SQL_CLOB
                            || nodes[1].dataType.isBinaryType()) {
                        nodes[0].dataType = nodes[1].dataType;
                    } else {
                        nodes[0].dataType = Type.SQL_VARCHAR;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(59094,299,<1627,20>,<1632,21>)
```
 if (nodes[1].dataType.typeCode == Types.SQL_CLOB
                            || nodes[1].dataType.isBinaryType()) {
                        nodes[0].dataType = nodes[1].dataType;
                    } else {
                        nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(14006,463,<498,71>,<519,5>)
```
 {

        HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = grantedRightsMap.get(name);

        if (rights.hasNext()) {
            OrderedHashSet set = new OrderedHashSet();

            while (rights.hasNext()) {
                set.add(rights.next());
            }

            return set;
        }

        return Right.emptySet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(13482,445,<477,8>,<495,30>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = directRightsMap.get(name);

        if (rights.hasNext()) {
            OrderedHashSet set = new OrderedHashSet();

            while (rights.hasNext()) {
                set.add(rights.next());
            }

            return set;
        }

        return Right.emptySet;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(5668,638,<178,4>,<204,5>)
```
 /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */
    public void setBounds(int x, int y, int w, int h) {

        // fredt@users 20011210 - patch 450412 by elise@users
        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(5231,684,<159,4>,<187,5>)
```
 /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */

// fredt@users 20011210 - patch 450412 by elise@users
// with additional replacement of deprecated methods
    public void setBounds(int x, int y, int w, int h) {

        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(15877,817,<502,4>,<525,5>)
```
 public long createBlob(Session session, long length) {

        writeLock.lock();

        try {
            Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_BLOB);

            Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);

            usageChanged = true;

            return lobID.longValue();
        } finally {
            writeLock.unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(16700,817,<527,4>,<550,5>)
```
 public long createClob(Session session, long length) {

        writeLock.lock();

        try {
            Long           lobID    = getNewLobID();
            ResultMetaData meta     = createLob.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[LOB_IDS.LOB_ID]          = lobID;
            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);
            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;
            params[LOB_IDS.LOB_TYPE]        = ValuePool.getInt(Types.SQL_CLOB);

            Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);

            usageChanged = true;

            return lobID.longValue();
        } finally {
            writeLock.unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Grid.java|(7680,247,<283,8>,<291,44>)
```
 sbHoriz.setValues(iX, iWidth, 0, iGridWidth);

        int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Tree.java|(7336,247,<269,8>,<277,44>)
```
 sbHoriz.setValues(iX, iWidth, 0, iTreeWidth);

        int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(58506,192,<1674,12>,<1680,21>)
```
 gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(28196,192,<887,12>,<893,21>)
```
 gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
            s    += " / State: " + e.getSQLState();
            g[0] = s;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(60624,213,<1744,8>,<1756,9>)
```
 if (r == null) {
            String[] g = new String[1];

            g[0] = "Result";

            gResult.setHead(g);

            g[0] = "(empty)";

            gResult.addRow(g);

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(29028,213,<927,8>,<939,9>)
```
 if (r == null) {
            String[] g = new String[1];

            g[0] = "Result";

            gResult.setHead(g);

            g[0] = "(empty)";

            gResult.addRow(g);

            return;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(28145,386,<915,12>,<932,13>)
```
 if (result != 0) {
                return result;
            }

            aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(30894,382,<1005,12>,<1022,13>)
```
 if (diff != 0) {
                return diff;
            }

            aOffset++;
            bOffset++;

            if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }

            if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(20431,343,<657,12>,<664,35>)
```
 int           dayOfYear   = cal.get(Calendar.DAY_OF_YEAR);
            int           weekOfYear  = ((dayOfYear - 1) / 7) + 1;
            StringBuilder sb          = new StringBuilder(result);

            sb.replace(matchIndex, matchIndex + matchLength,
                       String.valueOf(weekOfYear));

            result = sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(20978,346,<672,12>,<679,35>)
```
 int           dayOfMonth  = cal.get(Calendar.DAY_OF_MONTH);
            int           weekOfMonth = ((dayOfMonth - 1) / 7) + 1;
            StringBuilder sb          = new StringBuilder(result);

            sb.replace(matchIndex, matchIndex + matchLength,
                       String.valueOf(weekOfMonth));

            result = sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(130410,469,<3531,37>,<3540,13>)
```
 {
                String token = Tokens.getSQLTSIString(
                    ((Number) nodes[0].getValue(null)).intValue());

                return new StringBuffer(Tokens.T_TIMESTAMPADD).append(
                    Tokens.T_OPENBRACKET).append(token).append(
                    Tokens.T_COMMA).append(nodes[1].getSQL()).append(
                    Tokens.T_COMMA).append(nodes[2].getSQL()).append(
                    Tokens.T_CLOSEBRACKET).toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(130918,470,<3541,38>,<3550,13>)
```
 {
                String token = Tokens.getSQLTSIString(
                    ((Number) nodes[0].getValue(null)).intValue());

                return new StringBuffer(Tokens.T_TIMESTAMPDIFF).append(
                    Tokens.T_OPENBRACKET).append(token).append(
                    Tokens.T_COMMA).append(nodes[1].getSQL()).append(
                    Tokens.T_COMMA).append(nodes[2].getSQL()).append(
                    Tokens.T_CLOSEBRACKET).toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/Server.java|(79155,715,<2493,8>,<2507,72>)
```
 ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(
            ServerConstants.SC_PROTOCOL_HSQL, propsPath, propsExtension);
        ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HSQL)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/WebServer.java|(6719,715,<165,8>,<179,72>)
```
 ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(
            ServerConstants.SC_PROTOCOL_HTTP, propsPath, propsExtension);
        ServerProperties props =
            fileProps == null
            ? new ServerProperties(ServerConstants.SC_PROTOCOL_HTTP)
            : fileProps;

        props.addProperties(argProps);
        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54205,347,<1766,8>,<1771,68>)
```
 ResultMetaData meta     = getSpanningBlocks.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);
        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getInt(limit);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(55505,350,<1803,8>,<1808,69>)
```
 ResultMetaData meta     = deleteLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
        params[DELETE_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DELETE_BLOCKS.BLOCK_LIMIT]  = ValuePool.getInt(limit);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(4357,300,<104,4>,<115,5>)
```
 public static long getDateSeconds(String s) {

        try {
            synchronized (sdfd) {
                java.util.Date d = sdfd.parse(s);

                return d.getTime() / 1000;
            }
        } catch (Exception e) {
            throw Error.error(ErrorCode.X_22007);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(4853,307,<126,4>,<137,5>)
```
 public static long getTimestampSeconds(String s) {

        try {
            synchronized (sdfts) {
                java.util.Date d = sdfts.parse(s);

                return d.getTime() / 1000;
            }
        } catch (Exception e) {
            throw Error.error(ErrorCode.X_22007);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java|(4601,111,<174,8>,<176,39>)
```
 int ch1 = buffer[pos++] & 0xff;
        int ch2 = buffer[pos++] & 0xff;
        int ch3 = buffer[pos++] & 0xff;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayInputStream.java|(4641,111,<175,8>,<177,39>)
```
 int ch2 = buffer[pos++] & 0xff;
        int ch3 = buffer[pos++] & 0xff;
        int ch4 = buffer[pos++] & 0xff;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(88596,361,<2330,23>,<2338,17>)
```
 {
                    if (!nodes[0].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42563);
                    }

                    part = getTSIToken((String) nodes[0].valueData);
                    nodes[0].valueData = ValuePool.getInt(part);
                    nodes[0].dataType  = Type.SQL_INTEGER;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(87021,315,<2287,16>,<2293,54>)
```
 if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }

                part               = getTSIToken((String) nodes[0].valueData);
                nodes[0].valueData = ValuePool.getInt(part);
                nodes[0].dataType  = Type.SQL_INTEGER;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(19278,265,<549,8>,<557,35>)
```
 readSetClauseList(rangeVariables, targetSet, colIndexList, exprList);

        columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(16946,266,<514,8>,<522,35>)
```
 readSetClauseList(targetRangeVars, targetSet, colIndexList, exprList);

        columnMap = new int[colIndexList.size()];

        colIndexList.toArray(columnMap);

        Expression[] targets = new Expression[targetSet.size()];

        targetSet.toArray(targets);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(21632,288,<696,12>,<701,28>)
```
 long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int[][] aAddresses = getBlockAddresses(a.getId(), 0,
                                                   Integer.MAX_VALUE);
            int aIndex  = 0;
            int bOffset = 0;
            int aOffset = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(24277,288,<791,12>,<796,28>)
```
 long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
            int[][] aAddresses = getBlockAddresses(a.getId(), 0,
                                                   Integer.MAX_VALUE);
            int aIndex  = 0;
            int bOffset = 0;
            int aOffset = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(18056,612,<537,8>,<550,9>)
```
 // conversion of right argument to character for backward compatibility
        if (nodes[LEFT].dataType.isCharacterType()
                && !nodes[RIGHT].dataType.isCharacterType()) {
            if (session.database.sqlEnforceTypes) {
                throw Error.error(ErrorCode.X_42562);
            }

            Type newType = CharacterType.getCharacterType(Types.SQL_VARCHAR,
                nodes[RIGHT].dataType.displaySize(),
                nodes[LEFT].dataType.getCollation());

            nodes[RIGHT] = ExpressionOp.getCastExpression(session,
                    nodes[RIGHT], newType);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArithmetic.java|(18678,530,<552,8>,<564,9>)
```
 if (nodes[RIGHT].dataType.isCharacterType()
                && !nodes[LEFT].dataType.isCharacterType()) {
            if (session.database.sqlEnforceTypes) {
                throw Error.error(ErrorCode.X_42562);
            }

            Type newType = CharacterType.getCharacterType(Types.SQL_VARCHAR,
                nodes[LEFT].dataType.displaySize(),
                nodes[RIGHT].dataType.getCollation());

            nodes[LEFT] = ExpressionOp.getCastExpression(session, nodes[LEFT],
                    newType);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20496,257,<621,8>,<626,50>)
```
 //
        t.Stmts.bTransfer    = cTransfer.getState();
        t.Stmts.bDrop        = cDrop.getState();
        t.Stmts.bCreate      = cCreate.getState();
        t.Stmts.bDelete      = cDelete.getState();
        t.Stmts.bInsert      = cInsert.getState();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20560,243,<623,8>,<627,49>)
```
 t.Stmts.bDrop        = cDrop.getState();
        t.Stmts.bCreate      = cCreate.getState();
        t.Stmts.bDelete      = cDelete.getState();
        t.Stmts.bInsert      = cInsert.getState();
        t.Stmts.bAlter       = cAlter.getState();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20609,250,<624,8>,<628,55>)
```
 t.Stmts.bCreate      = cCreate.getState();
        t.Stmts.bDelete      = cDelete.getState();
        t.Stmts.bInsert      = cInsert.getState();
        t.Stmts.bAlter       = cAlter.getState();
        t.Stmts.bCreateIndex = cCreateIndex.getState();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20660,253,<625,8>,<629,53>)
```
 t.Stmts.bDelete      = cDelete.getState();
        t.Stmts.bInsert      = cInsert.getState();
        t.Stmts.bAlter       = cAlter.getState();
        t.Stmts.bCreateIndex = cCreateIndex.getState();
        t.Stmts.bDropIndex   = cDropIndex.getState();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntLookup.java|(0,1989,<1,0>,<53,2>)
```
 /* Copyright (c) 2001-2011, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.hsqldb.lib;

import java.util.NoSuchElementException;

/**
 *
 * @author Fred Toussi (fredt@users dot sourceforge.net)
 * @version 2.3.0
 * @since 1.8.0
 */
public interface IntLookup {

    int add(int key, int value);

    boolean addUnsorted(int key, int value);

    int lookup(int key) throws NoSuchElementException;

    int lookup(int key, int def);

    void clear();
}

```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongLookup.java|(0,1999,<1,0>,<53,2>)
```
 /* Copyright (c) 2001-2011, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.hsqldb.lib;

import java.util.NoSuchElementException;

/**
 *
 * @author Fred Toussi (fredt@users dot sourceforge.net)
 * @version 2.3.0
 * @since 1.8.0
 */
public interface LongLookup {

    int add(long key, long value);

    boolean addUnsorted(long key, long value);

    long lookup(long key) throws NoSuchElementException;

    long lookup(long key, long def);

    void clear();
}

```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144386,252,<2482,8>,<2487,48>)
```
 //
        commandSet.put(T_ASTERISK, Tokens.ASTERISK);
        commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);
        commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144796,259,<2491,8>,<2495,46>)
```
 commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(43290,179,<1434,8>,<1438,34>)
```
 c.core.mainName   = mainName;
        c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
        c.core.refIndex   = index;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TableWorks.java|(8435,182,<222,8>,<226,37>)
```
 c.core.mainName   = mainName;
        c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
        c.core.refIndex   = refIndex;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(19908,287,<610,8>,<614,60>)
```
 t.Stmts.sSourceTable     = tSourceTable.getText();
        t.Stmts.sDestTable       = tDestTable.getText();
        t.Stmts.sDestDrop        = tDestDrop.getText();
        t.Stmts.sDestCreateIndex = tDestCreateIndex.getText();
        t.Stmts.sDestDropIndex   = tDestDropIndex.getText();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(19967,286,<611,8>,<615,57>)
```
 t.Stmts.sDestTable       = tDestTable.getText();
        t.Stmts.sDestDrop        = tDestDrop.getText();
        t.Stmts.sDestCreateIndex = tDestCreateIndex.getText();
        t.Stmts.sDestDropIndex   = tDestDropIndex.getText();
        t.Stmts.sDestCreate      = tDestCreate.getText();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20024,287,<612,8>,<616,57>)
```
 t.Stmts.sDestDrop        = tDestDrop.getText();
        t.Stmts.sDestCreateIndex = tDestCreateIndex.getText();
        t.Stmts.sDestDropIndex   = tDestDropIndex.getText();
        t.Stmts.sDestCreate      = tDestCreate.getText();
        t.Stmts.sDestDelete      = tDestDelete.getText();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20080,291,<613,8>,<617,59>)
```
 t.Stmts.sDestCreateIndex = tDestCreateIndex.getText();
        t.Stmts.sDestDropIndex   = tDestDropIndex.getText();
        t.Stmts.sDestCreate      = tDestCreate.getText();
        t.Stmts.sDestDelete      = tDestDelete.getText();
        t.Stmts.sSourceSelect    = tSourceSelect.getText();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20143,286,<614,8>,<618,57>)
```
 t.Stmts.sDestDropIndex   = tDestDropIndex.getText();
        t.Stmts.sDestCreate      = tDestCreate.getText();
        t.Stmts.sDestDelete      = tDestDelete.getText();
        t.Stmts.sSourceSelect    = tSourceSelect.getText();
        t.Stmts.sDestInsert      = tDestInsert.getText();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(20204,282,<615,8>,<619,56>)
```
 t.Stmts.sDestCreate      = tDestCreate.getText();
        t.Stmts.sDestDelete      = tDestDelete.getText();
        t.Stmts.sSourceSelect    = tSourceSelect.getText();
        t.Stmts.sDestInsert      = tDestInsert.getText();
        t.Stmts.sDestAlter       = tDestAlter.getText();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(35680,633,<1199,4>,<1223,5>)
```
 public Type getUserDefinedType(String name, String schemaName,
                                   boolean raise) {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(36319,594,<1225,4>,<1248,5>)
```
 public Type getDomainOrUDT(String name, String schemaName, boolean raise) {

        readLock.lock();

        try {
            Schema schema = (Schema) schemaMap.get(schemaName);

            if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }

            if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }

            return null;
        } finally {
            readLock.unlock();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128332,938,<2134,8>,<2153,76>)
```
 commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129851,839,<2167,8>,<2186,40>)
```
 commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(28705,1424,<675,4>,<706,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>double</code> in the Java programming language.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getFloat() or getDouble() is used to retrieve a value
     * of type DECIMAL or NUMERIC with a large precision and the value is beyond
     * the range covered by the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public double getDouble(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDatetimeSimple.java|(10446,197,<284,4>,<287,5>)
```
 public static String dump(java.sql.Timestamp t) {
        return "String (" + t.toString() + "), GMTString (" + t.toGMTString()
               + "), LocalString (" + t.toLocaleString() + ')';
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDatetimeSimple.java|(10649,192,<289,4>,<292,5>)
```
 public static String dump(java.sql.Date d) {
        return "String (" + d.toString() + "), GMTString (" + d.toGMTString()
               + "), LocalString (" + d.toLocaleString() + ')';
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(20796,1193,<510,4>,<542,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
     * as an <code>int</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setInt
     */
    public synchronized int getInt(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(24448,1408,<577,4>,<608,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * an <code>int</code> in the Java programming language.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getInt() or getLong() is used to retrieve a value
     * of type DECIMAL or NUMERIC with a large precision and the value is beyond
     * the range covered by the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public int getInt(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(56452,282,<1937,20>,<1944,79>)
```
 name = schema.triggerLookup.getName(name.name);

                    if (name == null) {
                        return null;
                    }

                    HsqlName tableName = name.parent;
                    Table table = (Table) schema.tableList.get(tableName.name);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(56879,285,<1949,20>,<1956,79>)
```
 name = schema.constraintLookup.getName(name.name);

                    if (name == null) {
                        return null;
                    }

                    HsqlName tableName = name.parent;
                    Table table = (Table) schema.tableList.get(tableName.name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(50551,389,<1697,8>,<1705,18>)
```
 String sql = chain ? StatementSession.commitAndChainStatement.sql
                           : StatementSession.commitNoChainStatement.sql;
        Statement st = new StatementSession(StatementTypes.COMMIT_WORK,
                                            new Object[]{
                                                Boolean.valueOf(chain) });

        st.setSQL(sql);

        return st;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(53540,395,<1813,8>,<1821,18>)
```
 String sql = chain ? StatementSession.rollbackAndChainStatement.sql
                           : StatementSession.rollbackNoChainStatement.sql;
        Statement st = new StatementSession(StatementTypes.ROLLBACK_WORK,
                                            new Object[]{
                                                Boolean.valueOf(chain) });

        st.setSQL(sql);

        return st;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22329,222,<678,8>,<682,52>)
```
 cTransfer.setState(t.Stmts.bTransfer);
        cDrop.setState(t.Stmts.bDrop);
        cCreate.setState(t.Stmts.bCreate);
        cDropIndex.setState(t.Stmts.bDropIndex);
        cCreateIndex.setState(t.Stmts.bCreateIndex);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22376,218,<679,8>,<683,42>)
```
 cDrop.setState(t.Stmts.bDrop);
        cCreate.setState(t.Stmts.bCreate);
        cDropIndex.setState(t.Stmts.bDropIndex);
        cCreateIndex.setState(t.Stmts.bCreateIndex);
        cDelete.setState(t.Stmts.bDelete);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22415,222,<680,8>,<684,42>)
```
 cCreate.setState(t.Stmts.bCreate);
        cDropIndex.setState(t.Stmts.bDropIndex);
        cCreateIndex.setState(t.Stmts.bCreateIndex);
        cDelete.setState(t.Stmts.bDelete);
        cInsert.setState(t.Stmts.bInsert);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22458,220,<681,8>,<685,40>)
```
 cDropIndex.setState(t.Stmts.bDropIndex);
        cCreateIndex.setState(t.Stmts.bCreateIndex);
        cDelete.setState(t.Stmts.bDelete);
        cInsert.setState(t.Stmts.bInsert);
        cAlter.setState(t.Stmts.bAlter);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22507,218,<682,8>,<686,46>)
```
 cCreateIndex.setState(t.Stmts.bCreateIndex);
        cDelete.setState(t.Stmts.bDelete);
        cInsert.setState(t.Stmts.bInsert);
        cAlter.setState(t.Stmts.bAlter);
        cFKForced.setState(t.Stmts.bFKForced);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(22560,214,<683,8>,<687,48>)
```
 cDelete.setState(t.Stmts.bDelete);
        cInsert.setState(t.Stmts.bInsert);
        cAlter.setState(t.Stmts.bAlter);
        cFKForced.setState(t.Stmts.bFKForced);
        cIdxForced.setState(t.Stmts.bIdxForced);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(46975,1982,<1245,4>,<1298,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DATE</code> parameter as a
     * <code>java.sql.Date</code> object, using
     * the given <code>Calendar</code> object
     * to construct the date.
     * With a <code>Calendar</code> object, the driver
     * can calculate the date taking into account a custom timezone and locale.
     * If no <code>Calendar</code> object is specified, the driver uses the
     * default timezone and locale.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @param cal the <code>Calendar</code> object the driver will use
     *            to construct the date
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>null</code>.
     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDate
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *      JDBCParameterMetaData)
     */
    public synchronized Date getDate(int parameterIndex,
                                     Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(parameterIndex,
            Type.SQL_DATE);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }

        return new Date(millis);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(198730,1492,<4707,4>,<4744,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object
     * in the Java programming language.
     * This method uses the given calendar to construct an appropriate millisecond
     * value for the date if the underlying database does not store
     * timezone information.
     * <!-- end generic documentation -->
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object
     * to use in constructing the date
     * @return the column value as a <code>java.sql.Date</code> object;
     * if the value is SQL <code>NULL</code>,
     * the value returned is <code>null</code> in the Java programming language
     * @exception SQLException if a database access error occurs
     * or this method is called on a closed result set
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *  JDBCResultSet)
     */
    public Date getDate(int columnIndex, Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(columnIndex,
            Type.SQL_DATE);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }

        return new Date(millis);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongDeque.java|(7579,275,<324,8>,<331,9>)
```
 System.arraycopy(list, firstindex, newList, firstindex,
                         list.length - firstindex);

        if (endindex <= firstindex) {
            System.arraycopy(list, 0, newList, list.length, endindex);

            endindex = list.length + endindex;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlDeque.java|(7984,275,<332,8>,<339,9>)
```
 System.arraycopy(list, firstindex, newList, firstindex,
                         list.length - firstindex);

        if (endindex <= firstindex) {
            System.arraycopy(list, 0, newList, list.length, endindex);

            endindex = list.length + endindex;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlob.java|(11125,206,<250,8>,<254,43>)
```
 final int result = KMPSearchAlgorithm.search(data, pattern,
            KMPSearchAlgorithm.computeTable(pattern), startIndex);

        return (result == -1) ? -1
                              : result + 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlob.java|(13083,214,<303,8>,<307,43>)
```
 final int result = KMPSearchAlgorithm.search(data, bytePattern,
            KMPSearchAlgorithm.computeTable(bytePattern), startIndex);

        return (result == -1) ? -1
                              : result + 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(51195,2342,<1359,4>,<1423,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a
     * <code>java.sql.Timestamp</code> object, using
     * the given <code>Calendar</code> object to construct
     * the <code>Timestamp</code> object.
     * With a <code>Calendar</code> object, the driver
     * can calculate the timestamp taking into account a custom timezone and locale.
     * If no <code>Calendar</code> object is specified, the driver uses the
     * default timezone and locale.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @param cal the <code>Calendar</code> object the driver will use
     *            to construct the timestamp
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>null</code>.
     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setTimestamp
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *    JDBCParameterMetaData)
     */
    public synchronized Timestamp getTimestamp(int parameterIndex,
            Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(parameterIndex,
            Type.SQL_TIMESTAMP);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (!parameterMetaData.columnTypes[--parameterIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            if (cal != null) {
                millis = HsqlDateTime.convertMillisToCalendar(calendar,
                        millis);
            }
        }

        Timestamp ts = new Timestamp(millis);

        ts.setNanos(t.getNanos());

        return ts;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(206140,2829,<4875,4>,<4943,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object
     * in the Java programming language.
     * This method uses the given calendar to construct an appropriate millisecond
     * value for the timestamp if the underlying database does not store
     * timezone information.
     * <!-- end generic documentation -->
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * The JDBC specification for this method is vague. HSQLDB interprets the
     * specification as follows:
     *
     * <ol>
     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value
     * of the returned java.sql.Timestamp object is the UTC of the SQL value
     * without modification. In other words, the Calendar object is not used.
     * </li>
     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the
     * UTC value of the returned java.sql.Timestamp will represent the correct
     * timestamp for the time zone (including daylight saving time) of the given
     * Calendar object. </li>
     * <li>In this case, if the cal argument is null, then the default Calendar
     * of the JVM is used, which results in the same Object as one returned by the
     * getTimestamp() methods without the Calendar parameter.</li>
     * </ol>
     * </div>
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object
     * to use in constructing the timestamp
     * @return the column value as a <code>java.sql.Timestamp</code> object;
     * if the value is SQL <code>NULL</code>,
     * the value returned is <code>null</code> in the Java programming language
     * @exception SQLException if a database access error occurs
     * or this method is called on a closed result set
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *  JDBCResultSet)
     */
    public Timestamp getTimestamp(int columnIndex,
                                  Calendar cal) throws SQLException {

        TimestampData t = (TimestampData) getColumnInType(columnIndex,
            Type.SQL_TIMESTAMP);

        if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (!resultMetaData.columnTypes[--columnIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            if (cal != null) {
                millis = HsqlDateTime.convertMillisToCalendar(calendar,
                        millis);
            }
        }

        Timestamp ts = new Timestamp(millis);

        ts.setNanos(t.getNanos());

        return ts;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(19573,1217,<475,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
     * as a <code>short</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setShort
     */
    public synchronized short getShort(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(23041,1401,<543,4>,<575,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>short</code> in the Java programming language.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getByte() or getShort() is used to retrieve a value
     * of type INTEGER or BIGINT and the value is beyond the range covered by
     * the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public short getShort(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128876,926,<2146,8>,<2165,41>)
```
 commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130357,895,<2179,8>,<2198,47>)
```
 commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(37412,642,<981,8>,<1002,72>)
```
 Type targetType = parameterMetaData.columnTypes[parameterIndex - 1];

        switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }

        return (BigDecimal) getColumnInType(parameterIndex, targetType);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(83665,633,<1987,8>,<2008,69>)
```
 Type targetType = resultMetaData.columnTypes[columnIndex - 1];

        switch (targetType.typeCode) {

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                break;
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
                targetType = Type.SQL_DECIMAL;

                break;
            case Types.SQL_DOUBLE :
            default :
                targetType = Type.SQL_DECIMAL_DEFAULT;

                break;
        }

        return (BigDecimal) getColumnInType(columnIndex, targetType);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(32465,260,<1066,8>,<1075,28>)
```
 p.add(tSourceTable);
        p.add(cTransfer);
        p.add(tDestTable);
        p.add(cDrop);
        p.add(tDestDrop);
        p.add(cCreate);
        p.add(tDestCreate);
        p.add(cDropIndex);
        p.add(tDestDropIndex);
        p.add(cCreateIndex);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(32520,262,<1068,8>,<1077,23>)
```
 p.add(tDestTable);
        p.add(cDrop);
        p.add(tDestDrop);
        p.add(cCreate);
        p.add(tDestCreate);
        p.add(cDropIndex);
        p.add(tDestDropIndex);
        p.add(cCreateIndex);
        p.add(tDestCreateIndex);
        p.add(cDelete);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(32569,264,<1070,8>,<1079,22>)
```
 p.add(tDestDrop);
        p.add(cCreate);
        p.add(tDestCreate);
        p.add(cDropIndex);
        p.add(tDestDropIndex);
        p.add(cCreateIndex);
        p.add(tDestCreateIndex);
        p.add(cDelete);
        p.add(tDestDelete);
        p.add(cAlter);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5396,262,<197,12>,<201,48>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_TYPE).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
            sb.append(dataType.getDefinition());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5954,264,<210,12>,<214,48>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_DOMAIN).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
            sb.append(dataType.getDefinition());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestKarl.java|(2523,173,<73,19>,<79,13>)
```
 {
                File[] list = f.listFiles();

                for (int i = 0; i < list.length; i++) {
                    list[i].delete();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/FileUtil.java|(13206,147,<418,12>,<422,13>)
```
 File[] tempList = tempDir.listFiles();

            for (int i = 0; i < tempList.length; i++) {
                tempList[i].delete();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(65095,267,<2238,42>,<2247,9>)
```
 {
            read();

            String sql = getLastPart();

            args[1] = Boolean.TRUE;

            return new StatementCommand(StatementTypes.SET_TABLE_SOURCE, args,
                                        null, new HsqlName[]{ t.getName() });
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(65403,268,<2247,50>,<2256,9>)
```
 {
            read();

            String sql = getLastPart();

            args[1] = Boolean.FALSE;

            return new StatementCommand(StatementTypes.SET_TABLE_SOURCE, args,
                                        null, new HsqlName[]{ t.getName() });
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(48963,2226,<1300,4>,<1357,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TIME</code> parameter as a
     * <code>java.sql.Time</code> object, using
     * the given <code>Calendar</code> object
     * to construct the time.
     * With a <code>Calendar</code> object, the driver
     * can calculate the time taking into account a custom timezone and locale.
     * If no <code>Calendar</code> object is specified, the driver uses the
     * default timezone and locale.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @param cal the <code>Calendar</code> object the driver will use
     *            to construct the time
     * @return the parameter value; if the value is SQL <code>NULL</code>, the result
     *         is <code>null</code>.
     * @exception SQLException  JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setTime
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *    JDBCParameterMetaData)
     */
    public synchronized Time getTime(int parameterIndex,
                                     Calendar cal) throws SQLException {

        TimeData t = (TimeData) getColumnInType(parameterIndex, Type.SQL_TIME);

        if (t == null) {
            return null;
        }

        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;

        if (!parameterMetaData.columnTypes[--parameterIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);
            millis = HsqlDateTime.getNormalisedTime(millis);
        }

        return new Time(millis);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(201543,2505,<4773,4>,<4830,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as a <code>java.sql.Time</code>
     * object in the Java programming language.
     * This method uses the given calendar to construct an appropriate millisecond
     * value for the time if the underlying database does not store
     * timezone information.
     * <!-- end generic documentation -->
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * The JDBC specification for this method is vague. HSQLDB interprets the
     * specification as follows:
     *
     * <ol>
     * <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value
     * of the returned java.sql.Time object is the UTC of the SQL value without
     * modification. In other words, the Calendar object is not used.</li>
     * <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC
     * value of the returned java.sql.Time is correct for the given Calendar
     * object.</li>
     * <li>If the cal argument is null, it it ignored and the method returns
     * the same Object as the method without the Calendar parameter.</li>
     * </ol>
     * </div>
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param cal the <code>java.util.Calendar</code> object
     * to use in constructing the time
     * @return the column value as a <code>java.sql.Time</code> object;
     * if the value is SQL <code>NULL</code>,
     * the value returned is <code>null</code> in the Java programming language
     * @exception SQLException if a database access error occurs
     * or this method is called on a closed result set
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview for
     *   JDBCResultSet)
     */
    public Time getTime(int columnIndex, Calendar cal) throws SQLException {

        TimeData t = (TimeData) getColumnInType(columnIndex, Type.SQL_TIME);

        if (t == null) {
            return null;
        }

        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;

        if (!resultMetaData.columnTypes[--columnIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);
            millis = HsqlDateTime.getNormalisedTime(millis);
        }

        return new Time(millis);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(12780,300,<415,24>,<419,64>)
```
 relatedTable.Stmts.bCreate      = false;
                        relatedTable.Stmts.bDelete      = false;
                        relatedTable.Stmts.bDrop        = false;
                        relatedTable.Stmts.bCreateIndex = false;
                        relatedTable.Stmts.bDropIndex   = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(12845,300,<416,24>,<420,64>)
```
 relatedTable.Stmts.bDelete      = false;
                        relatedTable.Stmts.bDrop        = false;
                        relatedTable.Stmts.bCreateIndex = false;
                        relatedTable.Stmts.bDropIndex   = false;
                        relatedTable.Stmts.bInsert      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferSQLText.java|(12910,300,<417,24>,<421,64>)
```
 relatedTable.Stmts.bDrop        = false;
                        relatedTable.Stmts.bCreateIndex = false;
                        relatedTable.Stmts.bDropIndex   = false;
                        relatedTable.Stmts.bInsert      = false;
                        relatedTable.Stmts.bAlter       = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(178383,416,<4348,12>,<4357,19>)
```
 if (is.session.getDatabaseUniqueName().equals(
                    session.getDatabaseUniqueName())) {
                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,
                                        "invalid Reader");
            }
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(180518,475,<4418,12>,<4429,19>)
```
 if (is.session.getDatabaseUniqueName().equals(
                    session.getDatabaseUniqueName())) {
                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,
                                        "invalid Reader");
            }

            // in the same database ? see if it blocks in
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(17775,1117,<396,4>,<424,5>)
```
 /**
     * <!-- start generic documentation -->
     * Sets the designated parameter to the given Java <code>short</code> value.
     * The driver converts this
     * to an SQL <code>SMALLINT</code> value when it sends it to the database.
     * <!-- end generic documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>PreparedStatement</code>
     */
    public synchronized void setShort(int parameterIndex,
                                      short x) throws SQLException {

        if (isClosed || connection.isClosed) {
            checkClosed();
        }
        checkSetParameterIndex(parameterIndex);

        if (parameterTypes[parameterIndex - 1].typeCode
                == Types.SQL_SMALLINT) {
            parameterValues[--parameterIndex] = Integer.valueOf(x);
            parameterSet[parameterIndex]      = Boolean.TRUE;

            return;
        }
        setIntParameter(parameterIndex, x);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(18898,1091,<426,4>,<453,5>)
```
 /**
     * <!-- start generic documentation -->
     * Sets the designated parameter to the given Java <code>int</code> value.
     * The driver converts this
     * to an SQL <code>INTEGER</code> value when it sends it to the database.
     * <!-- end generic documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>PreparedStatement</code>
     */
    public synchronized void setInt(int parameterIndex,
                                    int x) throws SQLException {

        if (isClosed || connection.isClosed) {
            checkClosed();
        }
        checkSetParameterIndex(parameterIndex);

        if (parameterTypes[parameterIndex - 1].typeCode == Types.SQL_INTEGER) {
            parameterValues[--parameterIndex] = Integer.valueOf(x);
            parameterSet[parameterIndex]      = Boolean.TRUE;

            return;
        }
        setIntParameter(parameterIndex, x);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArraySort.java|(4069,236,<129,12>,<135,13>)
```
 if (comparator.compare(array[i], array[l]) < 0) {
                swap(array, l, i);    // Tri-Median Methode!
            }

            if (comparator.compare(array[r], array[l]) < 0) {
                swap(array, l, r);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArraySort.java|(4207,210,<133,12>,<139,13>)
```
 if (comparator.compare(array[r], array[l]) < 0) {
                swap(array, l, r);
            }

            if (comparator.compare(array[r], array[i]) < 0) {
                swap(array, i, r);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(15048,174,<457,8>,<464,21>)
```
 //
        final int[] table = new int[pattern.length];
        int         i     = 2;
        int         j     = 0;

        //
        table[0] = -1;
        table[1] = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(15931,134,<496,8>,<501,21>)
```
 int[] table = new int[pattern.length];
        int   i     = 2;
        int   j     = 0;

        table[0] = -1;
        table[1] = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(177822,164,<4330,16>,<4334,23>)
```
 parameterValues[i - 1] = is;
                streamLengths[i - 1]   = streamLength;
                parameterSet[i - 1]    = Boolean.FALSE;

                return;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(179919,164,<4398,16>,<4402,23>)
```
 parameterValues[i - 1] = is;
                streamLengths[i - 1]   = streamLength;
                parameterSet[i - 1]    = Boolean.FALSE;

                return;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(3733,325,<108,8>,<119,21>)
```
 pw.close();
        acls.add(new ServerAcl(file));

        aclDenyAlls = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyAlls.length; i++) {
                aclDenyAlls[i].setPrintWriter(new PrintWriter(System.out));
            }
        }

        acls.clear();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(4619,370,<140,8>,<152,21>)
```
 pw.close();
        acls.add(new ServerAcl(file));

        aclPermitLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclPermitLocalhosts.length; i++) {
                aclPermitLocalhosts[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }

        acls.clear();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(5245,367,<162,8>,<174,21>)
```
 pw.close();
        acls.add(new ServerAcl(file));

        aclPermitLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclPermitLocalNets.length; i++) {
                aclPermitLocalNets[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }

        acls.clear();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(5901,361,<185,8>,<197,21>)
```
 pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalNets.length; i++) {
                aclDenyLocalNets[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }

        acls.clear();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(6552,364,<208,8>,<220,21>)
```
 pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalhosts.length; i++) {
                aclDenyLocalhosts[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }

        acls.clear();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(58645,351,<1920,12>,<1928,76>)
```
 resolveOuterReferencesAndTypes(routine, context, e);

            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION, e);

            list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(63519,415,<2084,12>,<2093,76>)
```
 resolveOuterReferencesAndTypes(routine, context, condition);

            statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);

            list.add(statement);
            readThis(Tokens.THEN);

            statements = compileSQLProcedureStatementList(routine, context);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59301,283,<1813,8>,<1818,32>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_SIZE).append(' ');
        sb.append(database.sqlEnforceSize ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59593,286,<1819,8>,<1824,32>)
```
 sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TYPES).append(' ');
        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2048,1052,<50,8>,<66,70>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2179,1052,<52,8>,<68,65>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,1063,<54,8>,<70,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2446,1065,<56,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2620,1075,<59,8>,<76,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2791,1043,<62,8>,<78,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2912,1054,<64,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(16296,206,<496,12>,<501,13>)
```
 Object oU   = uMap.get(uKey);
            Object hU   = hMap.get(((Integer) uKey).intValue());

            if (!oU.equals(hU)) {
                throw new Exception("HashMap value mismatch");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(16869,206,<513,12>,<518,13>)
```
 Object oU   = uMap.get(hKey);
            Object hU   = hMap.get(((Integer) hKey).intValue());

            if (!oU.equals(hU)) {
                throw new Exception("HashMap value mismatch");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(63936,331,<1914,36>,<1921,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_IGNORECASE).append(' ');
            sb.append(database.sqlIgnoreCase ? Tokens.T_TRUE
                                             : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(58308,286,<1791,8>,<1796,24>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_NAMES).append(' ');
        sb.append(database.sqlEnforceNames ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59028,289,<1808,8>,<1813,24>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_REFERENCES).append(' ');
        sb.append(database.sqlEnforceRefs ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59326,283,<1814,8>,<1819,24>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_SIZE).append(' ');
        sb.append(database.sqlEnforceSize ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59618,286,<1820,8>,<1825,24>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TYPES).append(' ');
        sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java|(8631,467,<311,4>,<328,5>)
```
 public void write(RowOutputInterface out,
                      ResultMetaData meta) throws IOException {

        reset();
        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }

        reset();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(7563,467,<295,4>,<312,5>)
```
 public void write(RowOutputInterface out,
                      ResultMetaData meta) throws IOException {

        reset();
        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }

        reset();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(85525,344,<2122,8>,<2135,39>)
```
 JDBCSavepoint sp;

        checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java|(88657,345,<2211,8>,<2224,39>)
```
 Result        req;

        checkClosed();

        if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }

        if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }
        sp = (JDBCSavepoint) savepoint;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(67483,262,<1568,8>,<1579,41>)
```
 checkSetParameterIndex(parameterIndex);

        int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type outType = parameterTypes[i];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(70326,269,<1642,8>,<1653,48>)
```
 checkSetParameterIndex(parameterIndex);

        int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(73440,269,<1717,8>,<1728,48>)
```
 checkSetParameterIndex(parameterIndex);

        int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(19941,1324,<555,8>,<574,52>)
```
 database.sqlEnforceNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_names);
        database.sqlRegularNames = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_regular_names);
        database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(20209,1318,<559,8>,<578,53>)
```
 database.sqlEnforceRefs = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_refs);
        database.sqlEnforceSize = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_size);
        database.sqlEnforceTypes = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_types);
        database.sqlEnforceTDCD = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcd);
        database.sqlEnforceTDCU = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_enforce_tdcu);
        database.sqlTranslateTTI = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.jdbc_translate_tti_types);
        database.sqlConcatNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_concat_nulls);
        database.sqlNullsFirst = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_first);
        database.sqlNullsOrder = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_nulls_order);
        database.sqlUniqueNulls = database.databaseProperties.isPropertyTrue(
            HsqlDatabaseProperties.sql_unique_nulls);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(61415,207,<1917,12>,<1923,13>)
```
 for (int i = indexLimitVisible; i < limit; i++) {
                sb.append(exprColumns[i].getSQL());

                if (i < limit - 1) {
                    sb.append(',');
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(62021,207,<1937,12>,<1943,13>)
```
 for (int i = indexStartOrderBy; i < limit; i++) {
                sb.append(exprColumns[i].getSQL());

                if (i < limit - 1) {
                    sb.append(',');
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(59623,231,<1951,8>,<1959,18>)
```
 readThis(Tokens.END);
        readThis(Tokens.IF);

        statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(60952,233,<1998,8>,<2006,18>)
```
 readThis(Tokens.END);
        readThis(Tokens.CASE);

        statements = new Statement[list.size()];

        list.toArray(statements);

        StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(5862,377,<184,8>,<195,9>)
```
 pw.println("allow 0.0.0.0/0");
        pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalNets = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalNets.length; i++) {
                aclDenyLocalNets[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAcl.java|(6513,380,<207,8>,<218,9>)
```
 pw.println("allow 0.0.0.0/0");
        pw.close();
        acls.add(new ServerAcl(file));

        aclDenyLocalhosts = (ServerAcl[]) acls.toArray(new ServerAcl[0]);

        if (verbose) {
            for (int i = 0; i < aclDenyLocalhosts.length; i++) {
                aclDenyLocalhosts[i].setPrintWriter(
                    new PrintWriter(System.out));
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(54220,143,<1670,8>,<1675,9>)
```
 if (commonType.compare(session, a[0], a[1]) > 0) {
            Object temp = a[0];

            a[0] = a[1];
            a[1] = temp;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(54373,143,<1677,8>,<1682,9>)
```
 if (commonType.compare(session, b[0], b[1]) > 0) {
            Object temp = b[0];

            b[0] = b[1];
            b[1] = temp;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(71876,282,<2129,32>,<2135,13>)
```
 {
                sb.append("SET FILES ").append(Tokens.T_SPACE).append(' ');
                sb.append(propFileSpaces ? Tokens.T_TRUE
                                         : Tokens.T_FALSE);
                list.add(sb.toString());
                sb.setLength(0);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(71197,210,<2111,8>,<2115,24>)
```
 sb.append("SET FILES ").append(Tokens.T_LOG).append(' ');
        sb.append(propLogData ? Tokens.T_TRUE
                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/WebServerConnection.java|(12703,317,<335,12>,<341,45>)
```
 int             mode       = dataIn.readByte();
            Session session = DatabaseManager.getSession(databaseID,
                sessionID);
            Result resultIn = Result.newResult(session, mode, dataIn, rowIn);

            resultIn.setDatabaseId(databaseID);
            resultIn.setSessionId(sessionID);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java|(10059,381,<260,16>,<267,49>)
```
 int  mode       = inStream.readByte();
                Session session = DatabaseManager.getSession(databaseID,
                    sessionID);
                Result resultIn = Result.newResult(session, mode, inStream,
                                                   rowIn);

                resultIn.setDatabaseId(databaseID);
                resultIn.setSessionId(sessionID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(115288,399,<3658,8>,<3667,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(119851,408,<3795,8>,<3804,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, constraint
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(121700,494,<3849,55>,<3861,17>)
```
 {
                    read();

                    String   sql  = getLastPart();
                    Object[] args = new Object[] {
                        StatementTypes.ALTER_COLUMN_DROP_DEFAULT, table,
                        column, columnIndex
                    };

                    return new StatementSchema(sql,
                                               StatementTypes.ALTER_TABLE,
                                               args, null, writeLockNames);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(122241,496,<3861,64>,<3873,17>)
```
 {
                    read();

                    String   sql  = getLastPart();
                    Object[] args = new Object[] {
                        StatementTypes.ALTER_COLUMN_DROP_GENERATED, table,
                        column, columnIndex
                    };

                    return new StatementSchema(sql,
                                               StatementTypes.ALTER_TABLE,
                                               args, null, writeLockNames);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(70555,281,<1653,8>,<1659,74>)
```
 Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
        Calendar calendar   = cal == null ? session.getCalendar()
                : cal;

        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(73669,281,<1728,8>,<1734,74>)
```
 Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
        Calendar calendar   = cal == null ? session.getCalendar()
                : cal;

        millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(65596,1328,<2142,27>,<2174,21>)
```
 {
                        if (Boolean.FALSE.equals(isForEachRow)
                                || oldRowName != null) {
                            throw unexpectedToken();
                        }

                        readIfThis(Tokens.ROW);
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();

                        oldRowName = HsqlNameManager.getSimpleName(
                            token.tokenString, token.isDelimitedIdentifier);

                        read();

                        String n = oldRowName.name;

                        if (n.equals(newTableName) || n.equals(oldTableName)
                                || n.equals(newRowName)) {
                            throw unexpectedToken();
                        }

                        isForEachRow = Boolean.TRUE;

                        RangeVariable range =
                            new RangeVariable(table.columnList, oldRowName,
                                              false,
                                              RangeVariable.TRANSITION_RANGE);

                        range.rangePosition             = TriggerDef.OLD_ROW;
                        transitions[TriggerDef.OLD_ROW] = null;
                        rangeVars[TriggerDef.OLD_ROW]   = range;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(68616,1328,<2215,27>,<2247,21>)
```
 {
                        if (Boolean.FALSE.equals(isForEachRow)
                                || newRowName != null) {
                            throw unexpectedToken();
                        }

                        readIfThis(Tokens.ROW);
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();

                        newRowName = HsqlNameManager.getSimpleName(
                            token.tokenString, token.isDelimitedIdentifier);

                        read();

                        String n = newRowName.name;

                        if (n.equals(oldTableName) || n.equals(newTableName)
                                || n.equals(oldRowName)) {
                            throw unexpectedToken();
                        }

                        isForEachRow = Boolean.TRUE;

                        RangeVariable range =
                            new RangeVariable(table.columnList, newRowName,
                                              false,
                                              RangeVariable.TRANSITION_RANGE);

                        range.rangePosition             = TriggerDef.NEW_ROW;
                        transitions[TriggerDef.NEW_ROW] = null;
                        rangeVars[TriggerDef.NEW_ROW]   = range;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaObjectSet.java|(8045,897,<267,4>,<296,5>)
```
 static int getAddErrorCode(int type) {

        int code;

        switch (type) {

            case SchemaObject.VIEW :
            case SchemaObject.TABLE :
            case SchemaObject.COLUMN :
            case SchemaObject.SEQUENCE :
            case SchemaObject.CHARSET :
            case SchemaObject.DOMAIN :
            case SchemaObject.TYPE :
            case SchemaObject.COLLATION :
            case SchemaObject.PROCEDURE :
            case SchemaObject.FUNCTION :
            case SchemaObject.SPECIFIC_ROUTINE :
            case SchemaObject.CONSTRAINT :
            case SchemaObject.ASSERTION :
            case SchemaObject.INDEX :
            case SchemaObject.TRIGGER :
                code = ErrorCode.X_42504;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "SchemaObjectSet");
        }

        return code;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaObjectSet.java|(8948,897,<298,4>,<327,5>)
```
 static int getGetErrorCode(int type) {

        int code;

        switch (type) {

            case SchemaObject.VIEW :
            case SchemaObject.TABLE :
            case SchemaObject.COLUMN :
            case SchemaObject.SEQUENCE :
            case SchemaObject.CHARSET :
            case SchemaObject.DOMAIN :
            case SchemaObject.TYPE :
            case SchemaObject.CONSTRAINT :
            case SchemaObject.COLLATION :
            case SchemaObject.PROCEDURE :
            case SchemaObject.FUNCTION :
            case SchemaObject.SPECIFIC_ROUTINE :
            case SchemaObject.ASSERTION :
            case SchemaObject.INDEX :
            case SchemaObject.TRIGGER :
                code = ErrorCode.X_42501;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "SchemaObjectSet");
        }

        return code;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130518,2299,<2183,8>,<2233,43>)
```
 commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(141273,2421,<2418,8>,<2467,37>)
```
 commandSet.put(T_NEXT_DAY, NEXT_DAY);
        commandSet.put(T_NUMTODSINTERVAL, NUMTODSINTERVAL);
        commandSet.put(T_NUMTOYMINTERVAL, NUMTOYMINTERVAL);
        commandSet.put(T_NVL, Tokens.IFNULL);
        commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(34480,737,<963,4>,<989,5>)
```
 protected final void checkIsFile(boolean checkExists) throws SQLException {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(29117,737,<770,4>,<796,5>)
```
 protected final void checkIsFile(boolean checkExists) throws SQLException {

        boolean exists = false;
        boolean isFile = false;

        try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }

        if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument("Is not a file: " + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument("Does not exist: " + m_file);
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(5379,239,<197,68>,<207,5>)
```
 {

        out.writeInt(size);

        for (int i = 0; i < size; i++) {
            Object[] data = table[i];

            out.writeData(meta.getColumnCount(), meta.columnTypes, data, null,
                          null);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(6456,224,<238,8>,<245,9>)
```
 out.writeInt(limit);

        for (int i = 0; i < limit; i++) {
            Object[] data = table[i];

            out.writeData(meta.getColumnCount(), meta.columnTypes, data, null,
                          null);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerProperties.java|(10348,363,<303,8>,<309,74>)
```
 meta.put(sc_key_system, getMeta(sc_key_system, SYSTEM_PROPERTY, null));

        // properties with fixed names
        meta.put(sc_key_silent,
                 getMeta(sc_key_silent, SERVER_PROPERTY, false));
        meta.put(sc_key_trace, getMeta(sc_key_trace, SERVER_PROPERTY, false));
        meta.put(sc_key_tls, getMeta(sc_key_tls, SERVER_PROPERTY, false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerProperties.java|(10720,415,<310,8>,<316,73>)
```
 meta.put(sc_key_acl, getMeta(sc_key_acl, SERVER_PROPERTY, null));
        meta.put(sc_key_autorestart_server,
                 getMeta(sc_key_autorestart_server, SERVER_PROPERTY, false));
        meta.put(sc_key_remote_open_db,
                 getMeta(sc_key_remote_open_db, SERVER_PROPERTY, false));
        meta.put(sc_key_no_system_exit,
                 getMeta(sc_key_no_system_exit, SERVER_PROPERTY, false));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129016,916,<2149,8>,<2168,51>)
```
 commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130470,1025,<2182,8>,<2202,67>)
```
 commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144450,237,<2484,8>,<2488,48>)
```
 commandSet.put(T_CLOSEBRACKET, CLOSEBRACKET);
        commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144861,251,<2492,8>,<2496,56>)
```
 commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144745,263,<2490,8>,<2494,58>)
```
 commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(145064,259,<2496,8>,<2500,52>)
```
 commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
        commandSet.put(T_PLUS, Tokens.PLUS);
        commandSet.put(T_QUESTION, Tokens.QUESTION);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(6625,134,<263,38>,<268,9>)
```
 {
            int v = charArray[i];

            buffer[count++] = (byte) (v >>> 8);
            buffer[count++] = (byte) v;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(8347,126,<350,40>,<355,9>)
```
 {
            int v = c[i];

            buffer[count++] = (byte) (v >>> 8);
            buffer[count++] = (byte) v;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(7339,352,<209,4>,<224,5>)
```
 public void clearSessionTables() {

        if (rowStoreMapSession.isEmpty()) {
            return;
        }

        Iterator it = rowStoreMapSession.values().iterator();

        while (it.hasNext()) {
            PersistentStore store = (PersistentStore) it.next();

            store.release();
        }

        rowStoreMapSession.clear();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(7697,368,<226,4>,<241,5>)
```
 public void clearTransactionTables() {

        if (rowStoreMapTransaction.isEmpty()) {
            return;
        }

        Iterator it = rowStoreMapTransaction.values().iterator();

        while (it.hasNext()) {
            PersistentStore store = (PersistentStore) it.next();

            store.release();
        }

        rowStoreMapTransaction.clear();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(8071,360,<243,4>,<258,5>)
```
 public void clearStatementTables() {

        if (rowStoreMapStatement.isEmpty()) {
            return;
        }

        Iterator it = rowStoreMapStatement.values().iterator();

        while (it.hasNext()) {
            PersistentStore store = (PersistentStore) it.next();

            store.release();
        }

        rowStoreMapStatement.clear();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java|(8437,352,<260,4>,<275,5>)
```
 public void clearRoutineTables() {

        if (rowStoreMapRoutine.isEmpty()) {
            return;
        }

        Iterator it = rowStoreMapRoutine.values().iterator();

        while (it.hasNext()) {
            PersistentStore store = (PersistentStore) it.next();

            store.release();
        }

        rowStoreMapRoutine.clear();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionDatabase.java|(2946,320,<81,4>,<96,5>)
```
 public void release() {

        if (rowStoreMap.isEmpty()) {
            return;
        }

        Iterator it = rowStoreMap.values().iterator();

        while (it.hasNext()) {
            PersistentStore store = (PersistentStore) it.next();

            store.release();
        }

        rowStoreMap.clear();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(128456,952,<2137,8>,<2156,45>)
```
 commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129983,857,<2170,8>,<2189,47>)
```
 commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(58192,287,<1406,8>,<1411,33>)
```
 if (columnNames == null || columnNames.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES, null,
                    columnNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(67531,285,<1610,8>,<1615,33>)
```
 if (columnNames == null || columnNames.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_ANY,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES, null,
                    columnNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269156,432,<7122,12>,<7133,21>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(315190,544,<8295,12>,<8308,21>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);    // not null

            // false PK, as VIEW_CATALOG, VIEW_SCHEMA, TABLE_CATALOG, and/or
            // TABLE_SCHEMA may be NULL
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(130806,1231,<3535,12>,<3554,57>)
```
 addColumn(t, "DATA_TYPE", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(157029,1246,<4261,12>,<4281,57>)
```
 //
            addColumn(t, "DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "CHARACTER_MAXIMUM_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_OCTET_LENGTH", CARDINAL_NUMBER);
            addColumn(t, "CHARACTER_SET_CATALOG", CHARACTER_DATA);
            addColumn(t, "CHARACTER_SET_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CHARACTER_SET_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "COLLATION_NAME", SQL_IDENTIFIER);
            addColumn(t, "NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_PRECISION_RADIX", CARDINAL_NUMBER);
            addColumn(t, "NUMERIC_SCALE", CARDINAL_NUMBER);
            addColumn(t, "DATETIME_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "INTERVAL_TYPE", CHARACTER_DATA);
            addColumn(t, "INTERVAL_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "UDT_NAME", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SCOPE_SCHEMA", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3694,288,<117,4>,<130,5>)
```
 protected String describe(Session session, int blanks) {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSimple.java|(3639,288,<106,4>,<119,5>)
```
 protected String describe(Session session, int blanks) {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementCompound.java|(7062,288,<201,4>,<214,5>)
```
 protected String describe(Session session, int blanks) {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(8783,288,<270,4>,<283,5>)
```
 protected String describe(Session session, int blanks) {

        StringBuffer sb = new StringBuffer();

        sb.append('\n');

        for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

        sb.append(Tokens.T_STATEMENT);

        return sb.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,481,<5691,16>,<5702,69>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(316586,470,<8341,16>,<8352,64>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                = t.getEmptyRowData();
                row[view_catalog]  = database.getCatalogName().name;
                row[view_schema]   = table.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(71008,377,<1994,16>,<2002,49>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(72146,378,<2027,16>,<2035,49>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = domain.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}

                t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2628,220,<80,4>,<91,5>)
```
 public boolean get(int key, int[] value) {

        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(2750,221,<87,4>,<98,5>)
```
 public boolean get(long key, int[] value) {

        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(3751,161,<125,8>,<128,35>)
```
 buffer[count++] = (byte) (v >>> 24);
        buffer[count++] = (byte) (v >>> 16);
        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(43501,169,<1615,12>,<1618,38>)
```
 bytes[count++] = (byte) (v >>> 24);
            bytes[count++] = (byte) (v >>> 16);
            bytes[count++] = (byte) (v >>> 8);
            bytes[count++] = (byte) v;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2322,177,<65,8>,<68,39>)
```
 tempBuffer[count++] = (byte) (v >>> 24);
        tempBuffer[count++] = (byte) (v >>> 16);
        tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84091,289,<2383,16>,<2387,61>)
```
 row[domain_name]    = type.getName().name;
                row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(87942,284,<2501,16>,<2505,60>)
```
 row[udt_name]      = type.getName().name;
                row[table_catalog] = database.getCatalogName().name;
                row[table_schema]  = tableName.schema.name;
                row[table_name]    = tableName.name;
                row[column_name]   = column.getNameString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(63928,449,<1785,12>,<1796,21>)
```
 addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(261857,438,<6903,12>,<6914,21>)
```
 addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(311174,420,<8179,12>,<8190,21>)
```
 addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19252,325,<539,12>,<545,56>)
```
 t = createBlankTable(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE]);

            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);    //0
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(78177,292,<2203,12>,<2208,56>)
```
 t = createBlankTable(sysTableHsqlNames[COLUMN_COLUMN_USAGE]);

            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(88955,294,<2532,12>,<2537,56>)
```
 t = createBlankTable(sysTableHsqlNames[COLUMNS]);

            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);           //0
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(103846,335,<2857,12>,<2862,75>)
```
 t = createBlankTable(sysTableHsqlNames[CONSTRAINT_COLUMN_USAGE]);

            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);        // not null
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(188988,597,<5054,12>,<5064,55>)
```
 t = createBlankTable(sysTableHsqlNames[ROUTINE_COLUMN_USAGE]);

            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(209648,596,<5643,12>,<5653,55>)
```
 t = createBlankTable(sysTableHsqlNames[ROUTINE_TABLE_USAGE]);

            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(306390,289,<8039,12>,<8044,58>)
```
 t = createBlankTable(sysTableHsqlNames[VIEW_COLUMN_USAGE]);

            addColumn(t, "VIEW_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "VIEW_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "VIEW_NAME", SQL_IDENTIFIER);
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(314873,304,<8289,12>,<8294,58>)
```
 t = createBlankTable(sysTableHsqlNames[VIEW_TABLE_USAGE]);

            addColumn(t, "VIEW_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "VIEW_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "VIEW_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(53341,256,<1494,16>,<1500,49>)
```
 Object[] row      = t.getEmptyRowData();

                row[grantee]      = role.getName().getNameString();
                row[role_name]    = roleName;
                row[is_grantable] = Tokens.T_YES;

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(53816,255,<1507,16>,<1513,49>)
```
 Object[] row      = t.getEmptyRowData();

                row[grantee]      = role.getName().getNameString();
                row[role_name]    = roleName;
                row[is_grantable] = Tokens.T_NO;

                t.insertSys(session, store, row);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312405,737,<8221,16>,<8237,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[view_catalog]     = database.getCatalogName().name;
                row[view_schema]      = table.getSchemaName().name;
                row[view_name]        = table.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(33165,213,<993,4>,<1004,5>)
```
 int nextIntRandom(Random r, int range) {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(17737,213,<540,4>,<551,5>)
```
 int nextIntRandom(Random r, int range) {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestAllTypes.java|(16369,213,<436,4>,<447,5>)
```
 int nextIntRandom(Random r, int range) {

        int b = r.nextInt();

        if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }

        b = Math.abs(b);

        return b % range;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(196516,364,<5257,20>,<5263,73>)
```
 row       = t.getEmptyRowData();

                    //
                    row[grantor]          = right.getGrantor().getName().name;
                    row[grantee]          = right.getGrantee().getName().name;
                    row[specific_catalog] = database.getCatalogName().name;
                    row[specific_schema]  = routine.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286438,341,<7568,20>,<7572,70>)
```
 row                 = t.getEmptyRowData();
                    row[grantor]        = right.getGrantor().getName().name;
                    row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(294027,341,<7761,20>,<7765,70>)
```
 row                 = t.getEmptyRowData();
                    row[grantor]        = right.getGrantor().getName().name;
                    row[grantee]        = right.getGrantee().getName().name;
                    row[object_catalog] = database.getCatalogName().name;
                    row[object_schema]  = object.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263474,356,<6952,16>,<6959,44>)
```
 row[trigger_name]     = trigger.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(267124,356,<7061,16>,<7068,44>)
```
 row[trigger_name]     = trigger.getName().name;
                row[sequence_catalog] = database.getCatalogName().name;
                row[sequence_schema]  = refName.schema.name;
                row[sequence_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(270808,352,<7172,16>,<7179,44>)
```
 row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.schema.name;
                row[table_name]      = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(312910,354,<8234,16>,<8241,44>)
```
 row[view_name]        = table.getName().name;
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = refName.schema.name;
                row[specific_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(317073,342,<8353,16>,<8360,44>)
```
 row[view_name]     = table.getName().name;
                row[table_catalog] = database.getCatalogName().name;
                row[table_schema]  = refName.schema.name;
                row[table_name]    = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126555,278,<3433,12>,<3438,59>)
```
 Object[] row = t.getEmptyRowData();

            row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(301237,326,<7921,12>,<7926,71>)
```
 Object[] row = t.getEmptyRowData();

            row[user_defined_type_catalog]  = database.getCatalogName().name;
            row[user_defined_type_schema]   = type.getSchemaName().name;
            row[user_defined_type_name]     = type.getName().name;
            row[data_type]                  = type.getFullNameString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82222,483,<2325,12>,<2335,22>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86084,480,<2443,12>,<2453,22>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_UDT_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(257894,486,<6784,12>,<6794,22>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);     // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(306692,450,<8045,12>,<8055,22>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60067,359,<1693,12>,<1701,67>)
```
 if (!session.getGrantee().isAccessible(charset)) {
                continue;
            }

            Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126454,319,<3429,12>,<3437,54>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            Object[] row = t.getEmptyRowData();

            row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(91840,516,<2578,12>,<2586,76>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION
            // added for unique: TABLE_CAT
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMNS].name, false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124456,340,<3378,12>,<3383,76>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAINS].name, false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(132232,362,<3558,12>,<3564,36>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ELEMENT_TYPES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158470,343,<4285,12>,<4290,79>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[PARAMETERS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206173,463,<5538,12>,<5548,22>)
```
 addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(265452,478,<7011,12>,<7021,22>)
```
 addColumn(t, "SEQUENCE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(176275,1115,<4719,8>,<4744,9>)
```
 Table t = sysTables[ROLE_ROUTINE_GRANTS];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROLE_ROUTINE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);          // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);          // not null
            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_ROUTINE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(193522,1184,<5177,8>,<5203,9>)
```
 Table t = sysTables[ROUTINE_PRIVILEGES];

        if (t == null) {
            t = createBlankTable(sysTableHsqlNames[ROUTINE_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "SPECIFIC_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SPECIFIC_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "ROUTINE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);      // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            //
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(5031,263,<145,8>,<151,9>)
```
 switch (core.deleteAction) {

            case SchemaObject.ReferentialAction.CASCADE :
            case SchemaObject.ReferentialAction.SET_DEFAULT :
            case SchemaObject.ReferentialAction.SET_NULL :
                core.hasDeleteAction = true;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(5304,263,<153,8>,<159,9>)
```
 switch (core.updateAction) {

            case SchemaObject.ReferentialAction.CASCADE :
            case SchemaObject.ReferentialAction.SET_DEFAULT :
            case SchemaObject.ReferentialAction.SET_NULL :
                core.hasUpdateAction = true;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/Result.java|(29373,231,<919,4>,<927,5>)
```
 public static Result newDataResult(ResultMetaData md) {

        Result result = newResult(ResultConstants.DATA);

        result.navigator = new RowSetNavigatorClient();
        result.metaData  = md;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/Result.java|(29610,245,<929,4>,<937,5>)
```
 public static Result newGeneratedDataResult(ResultMetaData md) {

        Result result = newResult(ResultConstants.GENERATED);

        result.navigator = new RowSetNavigatorClient();
        result.metaData  = md;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11674,298,<318,12>,<323,13>)
```
 if (transitions[OLD_TABLE] != null) {
                sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
                sb.append(' ');
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11986,298,<325,12>,<330,13>)
```
 if (transitions[NEW_TABLE] != null) {
                sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[NEW_TABLE].getName().statementName);
                sb.append(' ');
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(93808,1011,<2621,8>,<2640,50>)
```
 final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
        final int declared_data_type         = 44;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(220631,1251,<5861,8>,<5880,62>)
```
 final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
        final int sql_path                               = 44;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobClient.java|(5042,273,<133,8>,<143,9>)
```
 try {
            long position = blob.position(session, pattern, start - 1);

            if (position >= 0) {
                position++;
            }

            return position;
        } catch (HsqlException e) {
            throw JDBCUtil.sqlException(e);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobClient.java|(6281,308,<168,12>,<178,13>)
```
 try {
                long position = blob.position(session, searchClob, start - 1);

                if (position >= 0) {
                    position++;
                }

                return position;
            } catch (HsqlException e) {
                throw JDBCUtil.sqlException(e);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(242007,372,<6332,12>,<6339,36>)
```
 addColumn(t, "NAME", CHARACTER_DATA);
            addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PACKAGES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(243217,353,<6371,12>,<6377,78>)
```
 addColumn(t, "NAME", CHARACTER_DATA);
            addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152558,312,<5555,8>,<5561,35>)
```
 Expression e           = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153380,314,<5590,8>,<5596,35>)
```
 Expression e2          = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);

        c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);

        c.setSubType(OpTypes.CAST);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(150091,576,<5441,4>,<5468,5>)
```
 private Expression readLeastExpressionOrNull() {

        int position = getPosition();

        read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression casewhen = null;

        do {
            casewhen = readValue(casewhen, OpTypes.SMALLER);

            if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else {
                break;
            }
        } while (true);

        readThis(Tokens.CLOSEBRACKET);

        return casewhen;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(150673,579,<5470,4>,<5497,5>)
```
 private Expression readGreatestExpressionOrNull() {

        int position = getPosition();

        read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression casewhen = null;

        do {
            casewhen = readValue(casewhen, OpTypes.GREATER);

            if (token.tokenType == Tokens.COMMA) {
                readThis(Tokens.COMMA);
            } else {
                break;
            }
        } while (true);

        readThis(Tokens.CLOSEBRACKET);

        return casewhen;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144504,232,<2485,8>,<2489,48>)
```
 commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144551,236,<2486,8>,<2490,50>)
```
 commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144598,254,<2487,8>,<2491,64>)
```
 commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144913,260,<2493,8>,<2497,60>)
```
 commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(30602,239,<672,16>,<676,18>)
```
 parseList = new short[] {
                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.IN,
                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.FROM,
                    Tokens.QUESTION, Tokens.CLOSEBRACKET
                };
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(17120,246,<399,16>,<403,18>)
```
 parseListAlt = new short[] {
                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,
                    Tokens.QUESTION, Tokens.CLOSEBRACKET
                };
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(54591,414,<1416,8>,<1425,75>)
```
 if (!cascade && session.database.schemaManager.hasSchemas(role)) {
            HsqlArrayList list =
                session.database.schemaManager.getSchemas(role);
            Schema schema = (Schema) list.get(0);

            throw Error.error(ErrorCode.X_42502,
                              schema.getName().statementName);
        }

        session.database.schemaManager.dropSchemas(session, role, cascade);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(55419,423,<1438,8>,<1447,78>)
```
 if (!cascade && session.database.schemaManager.hasSchemas(grantee)) {
            HsqlArrayList list =
                session.database.schemaManager.getSchemas(grantee);
            Schema schema = (Schema) list.get(0);

            throw Error.error(ErrorCode.X_42502,
                              schema.getName().statementName);
        }

        session.database.schemaManager.dropSchemas(session, grantee, cascade);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152477,283,<5551,8>,<5557,77>)
```
 Expression c = XreadValueExpression();

        readThis(Tokens.COMMA);

        Expression e           = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e, c);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153298,286,<5586,8>,<5592,79>)
```
 Expression e1 = XreadValueExpression();

        readThis(Tokens.COMMA);

        Expression e2          = XreadValueExpression();
        Expression condition   = new ExpressionLogical(OpTypes.IS_NULL, c);
        Expression alternative = new ExpressionOp(OpTypes.ALTERNATIVE, e2, e1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java|(15701,336,<641,4>,<652,5>)
```
 private void ensureCapacity() {

        if (size == table.length) {
            int        newSize  = size == 0 ? 4
                                            : size * 2;
            Object[][] newTable = new Object[newSize][];

            System.arraycopy(table, 0, newTable, 0, size);

            table = newTable;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(7035,336,<262,4>,<273,5>)
```
 private void ensureCapacity() {

        if (size == table.length) {
            int        newSize  = size == 0 ? 4
                                            : size * 2;
            Object[][] newTable = new Object[newSize][];

            System.arraycopy(table, 0, newTable, 0, size);

            table = newTable;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(6918,242,<277,8>,<288,33>)
```
 while (left > 0) {
            int read = input.read(buffer, count, left);

            if (read == -1) {
                break;
            }

            left  -= read;
            count += read;
        }

        return countLimit - left;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/CharArrayWriter.java|(3245,239,<112,8>,<123,29>)
```
 while (left > 0) {
            int read = reader.read(buffer, count, left);

            if (read == -1) {
                break;
            }

            left  -= read;
            count += read;
        }

        return length - left;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(76631,230,<2587,16>,<2590,75>)
```
 sb.append(' ').append(Tokens.T_DEFAULT).append(' ');
                sb.append(Tokens.T_INITIAL).append(' ').append(
                    Tokens.T_SCHEMA);
                sb.append(' ').append(defaultSchemaHsqlName.statementName);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/CommonSwing.java|(4863,517,<108,60>,<122,5>)
```
 {

        /**
         * Display Jpanel Error messages any text Errors. Overloads
         * errorMessage(Exception exceptionMsg)
         */
        Object[] options = { "OK" };

        JOptionPane.showOptionDialog(null, errorMessage, messagerHeader,
                                     JOptionPane.DEFAULT_OPTION,
                                     JOptionPane.WARNING_MESSAGE, null,
                                     options, options[0]);

        // DatabaseManagerSwing.StatusMessage(READY_STATUS);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/CommonSwing.java|(5638,422,<131,8>,<140,58>)
```
 /**
         * Display Jpanel Error messages any SQL Errors. Overloads
         * errorMessage(String e)
         */
        Object[] options = { "OK", };

        JOptionPane.showOptionDialog(null, exceptionMsg, messagerHeader,
                                     JOptionPane.DEFAULT_OPTION,
                                     JOptionPane.ERROR_MESSAGE, null,
                                     options, options[0]);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/FileArchiver.java|(4852,220,<126,12>,<136,29>)
```
 while (true) {
                int l = in.read(b, 0, b.length);

                if (l == -1) {
                    break;
                }

                f.write(b, 0, l);
            }

            completed = true;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/FileArchiver.java|(7089,227,<205,12>,<215,29>)
```
 while (true) {
                int l = f.read(b, 0, b.length);

                if (l == -1) {
                    break;
                }

                outstream.write(b, 0, l);
            }

            completed = true;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntKeyLongValueHashMap.java|(2573,222,<77,4>,<88,5>)
```
 public boolean get(int key, long[] value) {

        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = longValueTable[lookup];

            return true;
        }

        return false;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(2760,223,<87,4>,<98,5>)
```
 public boolean get(long key, long[] value) {

        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = longValueTable[lookup];

            return true;
        }

        return false;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(30416,653,<989,8>,<1017,44>)
```
 tDestTable.addActionListener(this);

        tDestDrop = new TextField();

        tDestDrop.addActionListener(this);

        tDestCreate = new TextField();

        tDestCreate.addActionListener(this);

        tDestDelete = new TextField();

        tDestDelete.addActionListener(this);

        tDestCreateIndex = new TextField();

        tDestCreateIndex.addActionListener(this);

        tDestDropIndex = new TextField();

        tDestDropIndex.addActionListener(this);

        tSourceSelect = new TextField();

        tSourceSelect.addActionListener(this);

        tDestInsert = new TextField();

        tDestInsert.addActionListener(this);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(30499,654,<993,8>,<1021,43>)
```
 tDestDrop.addActionListener(this);

        tDestCreate = new TextField();

        tDestCreate.addActionListener(this);

        tDestDelete = new TextField();

        tDestDelete.addActionListener(this);

        tDestCreateIndex = new TextField();

        tDestCreateIndex.addActionListener(this);

        tDestDropIndex = new TextField();

        tDestDropIndex.addActionListener(this);

        tSourceSelect = new TextField();

        tSourceSelect.addActionListener(this);

        tDestInsert = new TextField();

        tDestInsert.addActionListener(this);

        tDestAlter = new TextField();

        tDestAlter.addActionListener(this);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(152346,260,<5543,8>,<5555,56>)
```
 read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression c = XreadValueExpression();

        readThis(Tokens.COMMA);

        Expression e           = XreadValueExpression();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(153086,251,<5574,8>,<5586,47>)
```
 read();

        if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }

        Expression c = XreadValueExpression();

        readThis(Tokens.COMMA);

        Expression e1 = XreadValueExpression();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(13578,430,<435,8>,<441,47>)
```
 ArrayUtil.projectRowReverse(leftQueryExpression.unionColumnTypes,
                                    leftQueryExpression.unionColumnMap,
                                    unionColumnTypes);
        leftQueryExpression.resolveTypesPartOne(session);
        ArrayUtil.projectRow(leftQueryExpression.unionColumnTypes,
                             leftQueryExpression.unionColumnMap,
                             unionColumnTypes);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(14017,435,<442,8>,<448,47>)
```
 ArrayUtil.projectRowReverse(rightQueryExpression.unionColumnTypes,
                                    rightQueryExpression.unionColumnMap,
                                    unionColumnTypes);
        rightQueryExpression.resolveTypesPartOne(session);
        ArrayUtil.projectRow(rightQueryExpression.unionColumnTypes,
                             rightQueryExpression.unionColumnMap,
                             unionColumnTypes);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144504,232,<2485,8>,<2489,48>)
```
 commandSet.put(T_COLON, Tokens.COLON);
        commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144551,236,<2486,8>,<2490,50>)
```
 commandSet.put(T_COMMA, Tokens.COMMA);
        commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144598,254,<2487,8>,<2491,64>)
```
 commandSet.put(T_CONCAT, Tokens.CONCAT);
        commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144913,260,<2493,8>,<2497,60>)
```
 commandSet.put(T_LESS, Tokens.LESS);
        commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Types.java|(20799,301,<553,8>,<557,59>)
```
 javaTypeNumbers.put(DateClassName, Types.SQL_DATE);
        javaTypeNumbers.put(TimeClassName, Types.SQL_TIME);
        javaTypeNumbers.put(TimestampClassName, Types.SQL_TIMESTAMP);
        javaTypeNumbers.put(BlobClassName, Types.SQL_BLOB);
        javaTypeNumbers.put(ClobClassName, Types.SQL_CLOB);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(20041,781,<427,8>,<441,50>)
```
 dbMeta.put(sql_syntax_db2,
                   HsqlProperties.getMeta(sql_syntax_db2, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_mss,
                   HsqlProperties.getMeta(sql_syntax_mss, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_mys,
                   HsqlProperties.getMeta(sql_syntax_mys, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_ora,
                   HsqlProperties.getMeta(sql_syntax_ora, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_pgs,
                   HsqlProperties.getMeta(sql_syntax_pgs, SQL_PROPERTY,
                                          false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(20199,795,<430,8>,<444,50>)
```
 dbMeta.put(sql_syntax_mss,
                   HsqlProperties.getMeta(sql_syntax_mss, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_mys,
                   HsqlProperties.getMeta(sql_syntax_mys, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_ora,
                   HsqlProperties.getMeta(sql_syntax_ora, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_pgs,
                   HsqlProperties.getMeta(sql_syntax_pgs, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_compare_in_locale,
                   HsqlProperties.getMeta(sql_compare_in_locale, SQL_PROPERTY,
                                          false));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(20357,803,<433,8>,<447,50>)
```
 dbMeta.put(sql_syntax_mys,
                   HsqlProperties.getMeta(sql_syntax_mys, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_ora,
                   HsqlProperties.getMeta(sql_syntax_ora, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_syntax_pgs,
                   HsqlProperties.getMeta(sql_syntax_pgs, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_compare_in_locale,
                   HsqlProperties.getMeta(sql_compare_in_locale, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_longvar_is_lob,
                   HsqlProperties.getMeta(sql_longvar_is_lob, SQL_PROPERTY,
                                          false));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDataStructures.java|(15055,244,<443,8>,<451,9>)
```
 for (int i = 0; i < TEST_RUNS; i++) {
            arrayList.add(INT_0);
        }

        for (int i = 0; i < TEST_RUNS; i++) {
            for (int j = 0; j < LOOP_COUNT; j++) {
                arrayList.set(i, INT_0);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestDataStructures.java|(15424,252,<457,8>,<465,9>)
```
 for (int i = 0; i < TEST_RUNS; i++) {
            utilArrayList.add(INT_0);
        }

        for (int i = 0; i < TEST_RUNS; i++) {
            for (int j = 0; j < LOOP_COUNT; j++) {
                utilArrayList.set(i, INT_0);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(54941,726,<1333,8>,<1351,78>)
```
 // column number mappings
        final int itable_cat        = 0;
        final int itable_schem      = 1;
        final int itable_name       = 2;
        final int inon_unique       = 3;
        final int iindex_qualifier  = 4;
        final int iindex_name       = 5;
        final int itype             = 6;
        final int iordinal_position = 7;
        final int icolumn_name      = 8;
        final int iasc_or_desc      = 9;
        final int icardinality      = 10;
        final int ipages            = 11;
        final int ifilter_condition = 12;
        final int irow_cardinality  = 13;

        // Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(36378,133,<1128,8>,<1129,70>)
```
 nodes[LEFT].nodeDataTypes[0]  = nodes[LEFT].nodes[0].dataType;
        nodes[LEFT].nodeDataTypes[1]  = nodes[LEFT].nodes[1].dataType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(36520,135,<1130,8>,<1131,71>)
```
 nodes[RIGHT].nodeDataTypes[0] = nodes[RIGHT].nodes[0].dataType;
        nodes[RIGHT].nodeDataTypes[1] = nodes[RIGHT].nodes[1].dataType;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(69754,401,<2177,18>,<2188,9>)
```
 {
            if (replaceColumn) {
                nodes[RIGHT]             = colExpression;
                nodes[LEFT].nodes[RIGHT] = otherExpression;

                ((ExpressionArithmetic) nodes[LEFT]).resolveTypesForArithmetic(
                    session, parent);
            } else {
                nodes[LEFT]  = colExpression;
                nodes[RIGHT] = newArg;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(70161,404,<2188,15>,<2199,9>)
```
 {
            if (replaceColumn) {
                nodes[LEFT]               = colExpression;
                nodes[RIGHT].nodes[RIGHT] = otherExpression;

                ((ExpressionArithmetic) nodes[RIGHT])
                    .resolveTypesForArithmetic(session, parent);
            } else {
                nodes[RIGHT] = colExpression;
                nodes[LEFT]  = newArg;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java|(7269,226,<207,8>,<211,35>)
```
 rowOut.reset();
        ((RowOutputTextLog) rowOut).setMode(RowOutputTextLog.MODE_INSERT);
        rowOut.write(BYTES_INSERT_INTO);
        rowOut.writeString(table.getName().statementName);
        rowOut.write(BYTES_VALUES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java|(8739,225,<259,8>,<263,34>)
```
 rowOut.reset();
        ((RowOutputTextLog) rowOut).setMode(RowOutputTextLog.MODE_DELETE);
        rowOut.write(BYTES_DELETE_FROM);
        rowOut.writeString(table.getName().statementName);
        rowOut.write(BYTES_WHERE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(20224,267,<681,27>,<687,21>)
```
 {
                        Object value = nodes[LEFT].getValue(session);

                        if (value == null || Boolean.FALSE.equals(value)) {
                            setAsConstantValue(Boolean.FALSE, parent);
                        }
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(20557,248,<688,65>,<694,17>)
```
 {
                    Object value = nodes[RIGHT].getValue(session);

                    if (value == null || Boolean.FALSE.equals(value)) {
                        setAsConstantValue(Boolean.FALSE, parent);
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3100,588,<94,4>,<115,5>)
```
 TableDerived[] getSubqueries(Session session) {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(4686,588,<128,4>,<149,5>)
```
 TableDerived[] getSubqueries(Session session) {

        OrderedHashSet subQueries = null;

        if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }

        if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }

        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];

        subQueries.toArray(subQueryArray);

        for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }

        return subQueryArray;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87230,334,<2092,8>,<2101,34>)
```
 final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(96236,399,<2327,8>,<2340,38>)
```
 final int itable_type  = 3;
        final int iremark      = 4;

        // JDBC 3.0
        final int itype_cat   = 5;
        final int itype_schem = 6;
        final int itype_name  = 7;
        final int isref_cname = 8;
        final int iref_gen    = 9;

        // hsqldb ext
        final int ihsqldb_type   = 10;
        final int iread_only     = 11;
        final int icommit_action = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124955,746,<3392,8>,<3406,50>)
```
 final int domain_catalog             = 0;
        final int domain_schema              = 1;
        final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
        final int numeric_precision          = 12;
        final int numeric_precision_radix    = 13;
        final int numeric_scale              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(158966,750,<4299,8>,<4314,48>)
```
 // column number mappings
        final int specific_cat             = 0;
        final int specific_schem           = 1;
        final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
        final int to_specific_schema       = 12;
        final int to_specific_name         = 13;
        final int data_type                = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219032,960,<5835,8>,<5850,62>)
```
 // column number mappings
        final int specific_catalog                       = 0;
        final int specific_schema                        = 1;
        final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
        final int udt_name                               = 12;
        final int data_type                              = 13;
        final int character_maximum_length               = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(276067,780,<7290,8>,<7305,50>)
```
 // column number mappings
        final int trigger_catalog            = 0;
        final int trigger_schema             = 1;
        final int trigger_name               = 2;
        final int event_manipulation         = 3;
        final int event_object_catalog       = 4;
        final int event_object_schema        = 5;
        final int event_object_table         = 6;
        final int action_order               = 7;
        final int action_condition           = 8;
        final int action_statement           = 9;
        final int action_orientation         = 10;
        final int action_timing              = 11;
        final int action_reference_old_table = 12;
        final int action_reference_new_table = 13;
        final int action_reference_old_row   = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299290,746,<7876,8>,<7890,50>)
```
 final int user_defined_type_catalog  = 0;
        final int user_defined_type_schema   = 1;
        final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
        final int data_type                  = 12;
        final int character_maximum_length   = 13;
        final int character_octet_length     = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36902,660,<893,8>,<908,42>)
```
 // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
        final int icolumn_def        = 12;
        final int isql_data_type     = 13;
        final int isql_datetime_sub  = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(68868,735,<1653,8>,<1668,47>)
```
 // column number mappings
        final int specific_cat            = 0;
        final int specific_schem          = 1;
        final int procedure_name          = 2;
        final int parameter_name          = 3;
        final int parameter_mode          = 4;
        final int data_type_sql_id        = 5;
        final int data_type               = 6;
        final int numeric_precision       = 7;
        final int byte_length             = 8;
        final int numeric_scale           = 9;
        final int numeric_precision_radix = 10;
        final int nullable                = 11;
        final int remark                  = 12;
        final int default_val             = 13;
        final int sql_data_type           = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(104732,780,<2532,8>,<2549,43>)
```
 //-----------------------------------------
        // Same as SYSTEM_TYPEINFO
        //-----------------------------------------
        final int itype_name          = 0;
        final int idata_type          = 1;
        final int iprecision          = 2;
        final int iliteral_prefix     = 3;
        final int iliteral_suffix     = 4;
        final int icreate_params      = 5;
        final int inullable           = 6;
        final int icase_sensitive     = 7;
        final int isearchable         = 8;
        final int iunsigned_attribute = 9;
        final int ifixed_prec_scale   = 10;
        final int iauto_increment     = 11;
        final int ilocal_type_name    = 12;
        final int iminimum_scale      = 13;
        final int imaximum_scale      = 14;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(52627,418,<1457,30>,<1470,9>)
```
 {

            // restore the cursors we saved
            if (fMain instanceof java.awt.Frame) {
                ((java.awt.Frame) fMain).setCursor(fMainCursor);
            } else {
                ((Component) fMain).setCursor(fMainCursor);
            }

            txtCommand.setCursor(txtCommandCursor);
            txtResult.setCursor(txtResultCursor);

            /** @todo: Enable actionButtons */
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(53479,338,<1481,12>,<1489,44>)
```
 // set the cursors to the wait cursor
            if (fMain instanceof java.awt.Frame) {
                ((java.awt.Frame) fMain).setCursor(waitCursor);
            } else {
                ((Component) fMain).setCursor(waitCursor);
            }

            txtCommand.setCursor(waitCursor);
            txtResult.setCursor(waitCursor);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(14486,363,<442,53>,<453,9>)
```
 {
            String  granteeName = (String) granteeList.get(i);
            Grantee g           = get(granteeName);

            if (g == null) {
                throw Error.error(ErrorCode.X_28501, granteeName);
            }

            if (isImmutable(granteeName)) {
                throw Error.error(ErrorCode.X_28502, granteeName);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/GranteeManager.java|(9488,309,<273,12>,<282,13>)
```
 String  name    = (String) granteeList.get(i);
            Grantee grantee = get(name);

            if (grantee == null) {
                throw Error.error(ErrorCode.X_28501, name);
            }

            if (isImmutable(name)) {
                throw Error.error(ErrorCode.X_28502, name);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121470,372,<2949,0>,<2961,37>)
```
 // intermediate holders
        User     user;
        Iterator tables;
        Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(138922,385,<3375,8>,<3388,37>)
```
 String  privilege;

        // intermediate holders
        Iterator tables;
        Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(30571,229,<764,16>,<767,59>)
```
 row[iscope]         = scope;
                row[icolumn_name]   = column.getName().name;
                row[idata_type]     = ValuePool.getInt(type.getJDBCTypeCode());
                row[itype_name]     = type.getNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(39370,241,<963,16>,<966,63>)
```
 row[itable_name]        = tableName;
                row[icolumn_name]       = column.getName().name;
                row[idata_type] = ValuePool.getInt(type.getJDBCTypeCode());
                row[itype_name]         = type.getNameString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(16298,885,<357,8>,<372,49>)
```
 // boolean defaults for user defined props
        dbMeta.put(hsqldb_tx_conflict_rollback,
                   HsqlProperties.getMeta(hsqldb_tx_conflict_rollback,
                                          SQL_PROPERTY, true));
        dbMeta.put(jdbc_translate_tti_types,
                   HsqlProperties.getMeta(jdbc_translate_tti_types,
                                          SQL_PROPERTY, true));
        dbMeta.put(hsqldb_inc_backup,
                   HsqlProperties.getMeta(hsqldb_inc_backup, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_lock_file,
                   HsqlProperties.getMeta(hsqldb_lock_file, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_log_data,
                   HsqlProperties.getMeta(hsqldb_log_data, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(16532,820,<361,8>,<375,49>)
```
 dbMeta.put(jdbc_translate_tti_types,
                   HsqlProperties.getMeta(jdbc_translate_tti_types,
                                          SQL_PROPERTY, true));
        dbMeta.put(hsqldb_inc_backup,
                   HsqlProperties.getMeta(hsqldb_inc_backup, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_lock_file,
                   HsqlProperties.getMeta(hsqldb_lock_file, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_log_data,
                   HsqlProperties.getMeta(hsqldb_log_data, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_nio_data_file,
                   HsqlProperties.getMeta(hsqldb_nio_data_file, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(18642,792,<401,8>,<415,49>)
```
 dbMeta.put(sql_enforce_tdcd,
                   HsqlProperties.getMeta(sql_enforce_tdcd, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_tdcu,
                   HsqlProperties.getMeta(sql_enforce_tdcu, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_concat_nulls,
                   HsqlProperties.getMeta(sql_concat_nulls, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_first,
                   HsqlProperties.getMeta(sql_nulls_first, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_order,
                   HsqlProperties.getMeta(sql_nulls_order, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(18803,792,<404,8>,<418,49>)
```
 dbMeta.put(sql_enforce_tdcu,
                   HsqlProperties.getMeta(sql_enforce_tdcu, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_concat_nulls,
                   HsqlProperties.getMeta(sql_concat_nulls, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_first,
                   HsqlProperties.getMeta(sql_nulls_first, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_order,
                   HsqlProperties.getMeta(sql_nulls_order, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_unique_nulls,
                   HsqlProperties.getMeta(sql_unique_nulls, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(18964,794,<407,8>,<421,49>)
```
 dbMeta.put(sql_concat_nulls,
                   HsqlProperties.getMeta(sql_concat_nulls, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_first,
                   HsqlProperties.getMeta(sql_nulls_first, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_nulls_order,
                   HsqlProperties.getMeta(sql_nulls_order, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_unique_nulls,
                   HsqlProperties.getMeta(sql_unique_nulls, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_convert_trunc,
                   HsqlProperties.getMeta(sql_convert_trunc, SQL_PROPERTY,
                                          true));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(2492,317,<57,8>,<61,64>)
```
 classCodeMap.put(byte.class, ArrayUtil.CLASS_CODE_BYTE);
        classCodeMap.put(char.class, ArrayUtil.CLASS_CODE_SHORT);
        classCodeMap.put(short.class, ArrayUtil.CLASS_CODE_SHORT);
        classCodeMap.put(int.class, ArrayUtil.CLASS_CODE_INT);
        classCodeMap.put(long.class, ArrayUtil.CLASS_CODE_LONG);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(2557,319,<58,8>,<62,66>)
```
 classCodeMap.put(char.class, ArrayUtil.CLASS_CODE_SHORT);
        classCodeMap.put(short.class, ArrayUtil.CLASS_CODE_SHORT);
        classCodeMap.put(int.class, ArrayUtil.CLASS_CODE_INT);
        classCodeMap.put(long.class, ArrayUtil.CLASS_CODE_LONG);
        classCodeMap.put(float.class, ArrayUtil.CLASS_CODE_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(2623,322,<59,8>,<63,68>)
```
 classCodeMap.put(short.class, ArrayUtil.CLASS_CODE_SHORT);
        classCodeMap.put(int.class, ArrayUtil.CLASS_CODE_INT);
        classCodeMap.put(long.class, ArrayUtil.CLASS_CODE_LONG);
        classCodeMap.put(float.class, ArrayUtil.CLASS_CODE_FLOAT);
        classCodeMap.put(double.class, ArrayUtil.CLASS_CODE_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(2690,326,<60,8>,<64,70>)
```
 classCodeMap.put(int.class, ArrayUtil.CLASS_CODE_INT);
        classCodeMap.put(long.class, ArrayUtil.CLASS_CODE_LONG);
        classCodeMap.put(float.class, ArrayUtil.CLASS_CODE_FLOAT);
        classCodeMap.put(double.class, ArrayUtil.CLASS_CODE_DOUBLE);
        classCodeMap.put(boolean.class, ArrayUtil.CLASS_CODE_BOOLEAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(2753,332,<61,8>,<65,68>)
```
 classCodeMap.put(long.class, ArrayUtil.CLASS_CODE_LONG);
        classCodeMap.put(float.class, ArrayUtil.CLASS_CODE_FLOAT);
        classCodeMap.put(double.class, ArrayUtil.CLASS_CODE_DOUBLE);
        classCodeMap.put(boolean.class, ArrayUtil.CLASS_CODE_BOOLEAN);
        classCodeMap.put(Object.class, ArrayUtil.CLASS_CODE_OBJECT);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InOutUtil.java|(5533,780,<162,8>,<187,27>)
```
 //
        long bytesCopied = 0;
        int bytesRead;        

        while ((bytesCopied < amount) && -1 != (bytesRead =
                inputStream.read(buffer, 0, maxBytesToRead))) {
            //
            outputStream.write(buffer, 0, bytesRead);

            if (bytesRead > Long.MAX_VALUE - bytesCopied) {
                // edge case...
                // extremely unlikely but included for 'correctness'
                bytesCopied = Long.MAX_VALUE;
            } else {
                bytesCopied += bytesRead;
            }

            if (bytesCopied >= amount) {
                return bytesCopied;
            }

            maxBytesToRead = (int) Math.min((long) bufferSize,
                    amount - bytesCopied);
        }

        return bytesCopied;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InOutUtil.java|(7798,769,<232,8>,<257,27>)
```
 //
        long charsCopied = 0;
        int charsRead;        

        while ((charsCopied < amount) && -1 != (charsRead =
                reader.read(buffer, 0, maxCharsToRead))) {
            //
            writer.write(buffer, 0, charsRead);

            if (charsRead > Long.MAX_VALUE - charsCopied) {
                // edge case...
                // extremely unlikely but included for 'correctness'
                charsCopied = Long.MAX_VALUE;
            } else {
                charsCopied += charsRead;
            }

            if (charsCopied >= amount) {
                return charsCopied;
            }

            maxCharsToRead = (int) Math.min((long) bufferSize,
                    amount - charsCopied);
        }

        return charsCopied;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(25778,690,<640,12>,<650,54>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_BESTROWIDENTIFIER]);

            addColumn(t, "SCOPE", Type.SQL_SMALLINT);            // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115191,1140,<2791,12>,<2808,54>)
```
 t = createBlankTable(sysTableHsqlNames[SYSTEM_VERSIONCOLUMNS]);

            // ----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns result set
            // ----------------------------------------------------------------
            addColumn(t, "SCOPE", Type.SQL_INTEGER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_SMALLINT);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(39876,628,<974,16>,<988,17>)
```
 if (type.isCharacterType()) {
                    row[icolumn_size] =
                        ValuePool.getInt(type.getJDBCPrecision());

                    // this is length not octet_length, for character columns
                    row[ichar_octet_length] =
                        ValuePool.getInt(type.getJDBCPrecision());
                }

                if (type.isBinaryType()) {
                    row[icolumn_size] =
                        ValuePool.getInt(type.getJDBCPrecision());
                    row[ichar_octet_length] =
                        ValuePool.getInt(type.getJDBCPrecision());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(72202,694,<1731,20>,<1745,21>)
```
 if (type.isCharacterType()) {
                        row[numeric_precision] =
                            ValuePool.getInt(type.getJDBCPrecision());

                        // this is length not octet_length, for character columns
                        row[character_octet_length] =
                            ValuePool.getInt(type.getJDBCPrecision());
                    }

                    if (type.isBinaryType()) {
                        row[numeric_precision] =
                            ValuePool.getInt(type.getJDBCPrecision());
                        row[character_octet_length] =
                            ValuePool.getInt(type.getJDBCPrecision());
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(35202,315,<823,8>,<827,64>)
```
 if (token.type != Token.PL_TYPE) return null;
        // The scanner assures that val is non-null for PL_TYPEs.
        String commandWord = token.val.replaceFirst("\\s.*", "");
        if (!inlineNestPLCommands.containsKey(commandWord)) return null;
        Pattern pattern = inlineNestPLCommands.get(commandWord);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(35936,309,<839,8>,<843,61>)
```
 if (token.type != Token.PL_TYPE) return null;
        // The scanner assures that val is non-null for PL_TYPEs.
        String commandWord = token.val.replaceFirst("\\s.*", "");
        if (!nestingPLCommands.containsKey(commandWord)) return null;
        Pattern pattern = nestingPLCommands.get(commandWord);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(59724,305,<1966,12>,<1973,13>)
```
 if (indexCond != null) {
                for (int i = 0; i < indexCond.length; i++) {
                    if (indexCond[i] != null) {
                        indexCond[i] =
                            indexCond[i].replaceColumnReferences(range, list);
                    }
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(60043,352,<1975,12>,<1983,13>)
```
 if (indexEndCond != null) {
                for (int i = 0; i < indexEndCond.length; i++) {
                    if (indexEndCond[i] != null) {
                        indexEndCond[i] =
                            indexEndCond[i].replaceColumnReferences(range,
                                list);
                    }
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33784,435,<1042,4>,<1061,5>)
```
 protected String getResultString() {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(42040,435,<1350,4>,<1369,5>)
```
 protected String getResultString() {

        StringBuffer sb = new StringBuffer();

        if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }

        for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append("+ " + lines[i]);
        }

        TestUtil.expandStamps(sb);

        return sb.toString().trim();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2417,890,<69,4>,<96,5>)
```
 /**
     * Prints a table displaying specified columns, and checks the expected
     * number of rows.
     */
    private void printTable(String table, String cols,
                            int expected) throws SQLException {

        int               rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);
        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting " + expected
                        + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }

            result += "\n";

            rows++;
        }

        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMultiInsert.java|(2443,719,<69,4>,<88,5>)
```
 private void printTable(String table, String cols, int expected) throws SQLException {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery("SELECT " + cols + " FROM " + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = "Table " + table + ", expecting "
            + expected + " rows total:\n";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                           + rs.getString(i + 1) + ":";
            }
            result += "\n";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(25935,667,<643,12>,<652,76>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_INTEGER);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(115554,911,<2797,12>,<2810,76>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);         // not null
            addColumn(t, "DATA_TYPE", Type.SQL_SMALLINT);        // not null
            addColumn(t, "TYPE_NAME", SQL_IDENTIFIER);           // not null
            addColumn(t, "COLUMN_SIZE", Type.SQL_SMALLINT);
            addColumn(t, "BUFFER_LENGTH", Type.SQL_INTEGER);
            addColumn(t, "DECIMAL_DIGITS", Type.SQL_SMALLINT);
            addColumn(t, "PSEUDO_COLUMN", Type.SQL_SMALLINT);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, "TABLE_CAT", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEM", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);          // not null
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(41675,513,<1273,31>,<1291,13>)
```
 {
                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);

                if (Boolean.FALSE.equals(r1)) {
                    return Boolean.FALSE;
                }

                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);

                if (Boolean.FALSE.equals(r2)) {
                    return Boolean.FALSE;
                }

                if (r1 == null || r2 == null) {
                    return null;
                }

                return Boolean.TRUE;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(42219,510,<1292,30>,<1310,13>)
```
 {
                Boolean r1 = (Boolean) nodes[LEFT].getValue(session);

                if (Boolean.TRUE.equals(r1)) {
                    return Boolean.TRUE;
                }

                Boolean r2 = (Boolean) nodes[RIGHT].getValue(session);

                if (Boolean.TRUE.equals(r2)) {
                    return Boolean.TRUE;
                }

                if (r1 == null || r2 == null) {
                    return null;
                }

                return Boolean.FALSE;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50260,514,<1216,16>,<1225,50>)
```
 row[ipk_table_cat]   = pkTableCatalog;
                row[ipk_table_schem] = pkTableSchema;
                row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50369,503,<1218,16>,<1227,46>)
```
 row[ipk_table_name]  = pkTableName;
                row[ipk_column_name] = pkColumnName;
                row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
                row[idelete_rule]    = deleteRule;
                row[ifk_name]        = fkName;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(50474,499,<1220,16>,<1229,53>)
```
 row[ifk_table_cat]   = fkTableCatalog;
                row[ifk_table_schem] = fkTableSchema;
                row[ifk_table_name]  = fkTableName;
                row[ifk_column_name] = fkColumnName;
                row[ikey_seq]        = keySequence;
                row[iupdate_rule]    = updateRule;
                row[idelete_rule]    = deleteRule;
                row[ifk_name]        = fkName;
                row[ipk_name]        = pkName;
                row[ideferrability]  = deferrability;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83700,349,<2008,8>,<2017,42>)
```
 row[icat]          = cat;
        row[ischem]        = schem;
        row[ipname]        = pName;
        row[iinput_parms]  = ip;
        row[ioutput_parms] = op;
        row[iresult_sets]  = rs;
        row[iremark]       = remark;
        row[iptype]        = pType;
        row[iporigin]      = origin;
        row[isn]           = specificName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(34909,369,<847,12>,<851,79>)
```
 addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 13
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 14
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 15
            addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER);     // not null
            addColumn(t, "IS_NULLABLE", YES_OR_NO);                 // not null
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67998,357,<1633,12>,<1637,73>)
```
 addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 14
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 15
            addColumn(t, "CHAR_OCTET_LENGTH", Type.SQL_INTEGER);    // 16
            addColumn(t, "ORDINAL_POSITION", Type.SQL_INTEGER);     // 17
            addColumn(t, "IS_NULLABLE", CHARACTER_DATA);            // 18
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(84214,439,<2025,16>,<2034,43>)
```
 row                = t.getEmptyRowData();
                pName              = (String) l.get(i);
                row[icat]          = cat;
                row[ischem]        = schem;
                row[ipname]        = pName;
                row[iinput_parms]  = ip;
                row[ioutput_parms] = op;
                row[iresult_sets]  = rs;
                row[iremark]       = remark;
                row[iptype]        = pType;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(88918,416,<2145,16>,<2154,39>)
```
 row             = t.getEmptyRowData();
                pName           = (String) l.get(i);
                row[icat]       = cat;
                row[ischem]     = schem;
                row[iname]      = pName;
                row[icol_name]  = cName;
                row[icol_type]  = cType;
                row[idata_type] = dType;
                row[itype_name] = tName;
                row[iprec]      = prec;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(35043,133,<1094,8>,<1096,9>)
```
 if (nodes[LEFT].nodes[0].isUnresolvedParam()) {
            nodes[LEFT].nodes[0].dataType = nodes[RIGHT].nodes[0].dataType;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(35186,134,<1098,8>,<1100,9>)
```
 if (nodes[RIGHT].nodes[0].isUnresolvedParam()) {
            nodes[RIGHT].nodes[0].dataType = nodes[LEFT].nodes[0].dataType;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(17192,887,<373,8>,<389,49>)
```
 dbMeta.put(hsqldb_nio_data_file,
                   HsqlProperties.getMeta(hsqldb_nio_data_file, SQL_PROPERTY,
                                          true));
        dbMeta.put(hsqldb_full_log_replay,
                   HsqlProperties.getMeta(hsqldb_full_log_replay,
                                          SQL_PROPERTY, false));
        dbMeta.put(sql_ref_integrity,
                   HsqlProperties.getMeta(sql_ref_integrity, SQL_PROPERTY,
                                          true));

        // SQL reserved words not allowed as some identifiers
        dbMeta.put(sql_enforce_names,
                   HsqlProperties.getMeta(sql_enforce_names, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_regular_names,
                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(17535,934,<379,8>,<397,49>)
```
 dbMeta.put(sql_ref_integrity,
                   HsqlProperties.getMeta(sql_ref_integrity, SQL_PROPERTY,
                                          true));

        // SQL reserved words not allowed as some identifiers
        dbMeta.put(sql_enforce_names,
                   HsqlProperties.getMeta(sql_enforce_names, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_regular_names,
                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_refs,
                   HsqlProperties.getMeta(sql_enforce_refs, SQL_PROPERTY,
                                          false));

        // char padding to size and exception if data is too long
        dbMeta.put(sql_enforce_size,
                   HsqlProperties.getMeta(sql_enforce_size, SQL_PROPERTY,
                                          true));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java|(17925,869,<387,8>,<403,49>)
```
 dbMeta.put(sql_regular_names,
                   HsqlProperties.getMeta(sql_regular_names, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_refs,
                   HsqlProperties.getMeta(sql_enforce_refs, SQL_PROPERTY,
                                          false));

        // char padding to size and exception if data is too long
        dbMeta.put(sql_enforce_size,
                   HsqlProperties.getMeta(sql_enforce_size, SQL_PROPERTY,
                                          true));
        dbMeta.put(sql_enforce_types,
                   HsqlProperties.getMeta(sql_enforce_types, SQL_PROPERTY,
                                          false));
        dbMeta.put(sql_enforce_tdcd,
                   HsqlProperties.getMeta(sql_enforce_tdcd, SQL_PROPERTY,
                                          true));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(3334,183,<98,8>,<104,36>)
```
 nodes        = new Expression[BINARY];
        nodes[LEFT]  = leftExpression;
        nodes[RIGHT] = rightExpression;

        setEqualityMode();

        dataType = Type.SQL_BOOLEAN;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(3678,163,<114,8>,<120,36>)
```
 nodes        = new Expression[BINARY];
        nodes[LEFT]  = left;
        nodes[RIGHT] = right;

        setEqualityMode();

        dataType = Type.SQL_BOOLEAN;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(28138,395,<809,8>,<820,9>)
```
 newData.beforeFirst();

        if (baseTable.triggerLists[Trigger.INSERT_BEFORE_ROW].length > 0) {
            while (newData.hasNext()) {
                Object[] data = (Object[]) newData.getNext();

                baseTable.fireTriggers(session, Trigger.INSERT_BEFORE_ROW,
                                       null, data, null);
            }

            newData.beforeFirst();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(29509,393,<854,8>,<865,9>)
```
 newData.beforeFirst();

        if (baseTable.triggerLists[Trigger.INSERT_AFTER_ROW].length > 0) {
            while (newData.hasNext()) {
                Object[] data = (Object[]) newData.getNext();

                baseTable.fireTriggers(session, Trigger.INSERT_AFTER_ROW,
                                       null, data, null);
            }

            newData.beforeFirst();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(4863,179,<145,8>,<148,29>)
```
 Long testValue;
        int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));
        int  lookup     = hashIndex.hashTable[index];
        int  lastLookup = -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(10481,185,<334,8>,<337,31>)
```
 Double testValue;
        int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(57583,282,<1796,50>,<1805,5>)
```
 {

        int[] fullCols = new int[indexLimitVisible];

        ArrayUtil.fillSequence(fullCols);

        fullIndex = resultTable.createAndAddIndexStructure(session, null,
                fullCols, null, null, false, false, false);
        resultTable.fullIndex = fullIndex;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(29169,259,<961,8>,<967,42>)
```
 int[] fullCols = new int[columnCount];

        ArrayUtil.fillSequence(fullCols);

        fullIndex = resultTable.createAndAddIndexStructure(session, null,
                fullCols, null, null, false, false, false);
        resultTable.fullIndex = fullIndex;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5352,277,<161,4>,<170,5>)
```
 public static ResultLob newLobTruncateRequest(long id, long offset) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_TRUNCATE;
        result.lobID       = id;
        result.blockOffset = offset;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(6417,269,<200,4>,<209,5>)
```
 public static ResultLob newLobSetResponse(long id, long length) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_SET;
        result.lobID       = id;
        result.blockLength = length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(9719,279,<320,4>,<329,5>)
```
 public static ResultLob newLobTruncateResponse(long id, long length) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_TRUNCATE;
        result.lobID       = id;
        result.blockLength = length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35494,888,<1133,8>,<1147,59>)
```
 typeNames.put(Tokens.T_VARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_VARCHAR_IGNORECASE, Types.VARCHAR_IGNORECASE);
        typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35632,870,<1135,8>,<1149,59>)
```
 typeNames.put(Tokens.T_NVARCHAR, Types.SQL_VARCHAR);
        typeNames.put(Tokens.T_DATE, Types.SQL_DATE);
        typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35747,877,<1137,8>,<1151,63>)
```
 typeNames.put(Tokens.T_TIME, Types.SQL_TIME);
        typeNames.put(Tokens.T_TIMESTAMP, Types.SQL_TIMESTAMP);
        typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35865,867,<1139,8>,<1153,53>)
```
 typeNames.put(Tokens.T_INTERVAL, Types.SQL_INTERVAL);
        typeNames.put(Tokens.T_TINYINT, Types.TINYINT);
        typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/Type.java|(35983,853,<1141,8>,<1155,51>)
```
 typeNames.put(Tokens.T_SMALLINT, Types.SQL_SMALLINT);
        typeNames.put(Tokens.T_INTEGER, Types.SQL_INTEGER);
        typeNames.put(Tokens.T_BIGINT, Types.SQL_BIGINT);
        typeNames.put(Tokens.T_REAL, Types.SQL_REAL);
        typeNames.put(Tokens.T_FLOAT, Types.SQL_FLOAT);
        typeNames.put(Tokens.T_DOUBLE, Types.SQL_DOUBLE);
        typeNames.put(Tokens.T_NUMERIC, Types.SQL_NUMERIC);
        typeNames.put(Tokens.T_DECIMAL, Types.SQL_DECIMAL);
        typeNames.put(Tokens.T_BOOLEAN, Types.SQL_BOOLEAN);
        typeNames.put(Tokens.T_BINARY, Types.SQL_BINARY);
        typeNames.put(Tokens.T_VARBINARY, Types.SQL_VARBINARY);
        typeNames.put(Tokens.T_CLOB, Types.SQL_CLOB);
        typeNames.put(Tokens.T_BLOB, Types.SQL_BLOB);
        typeNames.put(Tokens.T_BIT, Types.SQL_BIT);
        typeNames.put(Tokens.T_OTHER, Types.OTHER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3884,339,<107,4>,<118,5>)
```
 public static ResultLob newLobGetBytesRequest(long id, long offset,
            int length) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.blockLength = length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4229,339,<120,4>,<131,5>)
```
 public static ResultLob newLobGetCharsRequest(long id, long offset,
            int length) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.blockLength = length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(7882,372,<251,4>,<262,5>)
```
 public static ResultLob newLobGetCharPatternPositionRequest(long id,
            long otherId, long offset) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
        result.blockLength = otherId;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(10004,333,<331,4>,<342,5>)
```
 public static ResultLob newLobGetRequest(long id, long offset,
            long length) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_LOB;
        result.lobID       = id;
        result.blockOffset = offset;
        result.blockLength = length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(42643,237,<1506,31>,<1514,13>)
```
 {
                Object[] data = new Object[nodes.length];

                for (int i = 0; i < nodes.length; i++) {
                    data[i] = nodes[i].getValue(session);
                }

                return data;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(43956,240,<1551,33>,<1559,13>)
```
 {
                Object[] array = new Object[nodes.length];

                for (int i = 0; i < nodes.length; i++) {
                    array[i] = nodes[i].getValue(session);
                }

                return array;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(43706,202,<1543,16>,<1549,27>)
```
 Object[] row = new Object[nodes.length];

                for (int i = 0; i < nodes.length; i++) {
                    row[i] = nodes[i].getValue(session);
                }

                return row;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(110347,5437,<1787,8>,<1888,50>)
```
 reservedKeys.put(Tokens.T_ABS, ABS);
        reservedKeys.put(Tokens.T_AGGREGATE, AGGREGATE);
        reservedKeys.put(Tokens.T_ALL, ALL);
        reservedKeys.put(Tokens.T_ALLOCATE, ALLOCATE);
        reservedKeys.put(Tokens.T_ALTER, ALTER);
        reservedKeys.put(Tokens.T_AND, AND);
        reservedKeys.put(Tokens.T_ANY, ANY);
        reservedKeys.put(Tokens.T_ARE, ARE);
        reservedKeys.put(Tokens.T_ARRAY, ARRAY);
        reservedKeys.put(Tokens.T_ARRAY_AGG, ARRAY_AGG);
        reservedKeys.put(Tokens.T_AS, AS);
        reservedKeys.put(Tokens.T_ASENSITIVE, ASENSITIVE);
        reservedKeys.put(Tokens.T_ASYMMETRIC, ASYMMETRIC);
        reservedKeys.put(Tokens.T_AT, AT);
        reservedKeys.put(Tokens.T_ATOMIC, ATOMIC);
        reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111094,5447,<1802,8>,<1903,52>)
```
 reservedKeys.put(Tokens.T_AUTHORIZATION, AUTHORIZATION);
        reservedKeys.put(Tokens.T_AVG, AVG);
        reservedKeys.put(Tokens.T_BEGIN, BEGIN);
        reservedKeys.put(Tokens.T_BETWEEN, BETWEEN);
        reservedKeys.put(Tokens.T_BIGINT, BIGINT);
        reservedKeys.put(Tokens.T_BINARY, BINARY);
        reservedKeys.put(Tokens.T_BIT_LENGTH, BIT_LENGTH);
        reservedKeys.put(Tokens.T_BLOB, BLOB);
        reservedKeys.put(Tokens.T_BOOLEAN, BOOLEAN);
        reservedKeys.put(Tokens.T_BOTH, BOTH);
        reservedKeys.put(Tokens.T_BY, BY);
        reservedKeys.put(Tokens.T_CALL, CALL);
        reservedKeys.put(Tokens.T_CALLED, CALLED);
        reservedKeys.put(Tokens.T_CARDINALITY, CARDINALITY);
        reservedKeys.put(Tokens.T_CASCADED, CASCADED);
        reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(111871,5419,<1817,8>,<1918,54>)
```
 reservedKeys.put(Tokens.T_CASE, CASE);
        reservedKeys.put(Tokens.T_CAST, CAST);
        reservedKeys.put(Tokens.T_CEIL, CEIL);
        reservedKeys.put(Tokens.T_CEILING, CEILING);
        reservedKeys.put(Tokens.T_CHAR, CHAR);
        reservedKeys.put(Tokens.T_CHAR_LENGTH, CHAR_LENGTH);
        reservedKeys.put(Tokens.T_CHARACTER, CHARACTER);
        reservedKeys.put(Tokens.T_CHARACTER_LENGTH, CHARACTER_LENGTH);
        reservedKeys.put(Tokens.T_CHECK, CHECK);
        reservedKeys.put(Tokens.T_CLOB, CLOB);
        reservedKeys.put(Tokens.T_CLOSE, CLOSE);
        reservedKeys.put(Tokens.T_COALESCE, COALESCE);
        reservedKeys.put(Tokens.T_COLLATE, COLLATE);
        reservedKeys.put(Tokens.T_COLLECT, COLLECT);
        reservedKeys.put(Tokens.T_COLUMN, COLUMN);
        reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(112658,5399,<1832,8>,<1933,42>)
```
 reservedKeys.put(Tokens.T_COMMIT, COMMIT);
        reservedKeys.put(Tokens.T_COMPARABLE, COMPARABLE);
        reservedKeys.put(Tokens.T_CONDITION, CONDITION);
        reservedKeys.put(Tokens.T_CONNECT, CONNECT);
        reservedKeys.put(Tokens.T_CONSTRAINT, CONSTRAINT);
        reservedKeys.put(Tokens.T_CONVERT, CONVERT);
        reservedKeys.put(Tokens.T_CORR, CORR);
        reservedKeys.put(Tokens.T_CORRESPONDING, CORRESPONDING);
        reservedKeys.put(Tokens.T_COUNT, COUNT);
        reservedKeys.put(Tokens.T_COVAR_POP, COVAR_POP);
        reservedKeys.put(Tokens.T_COVAR_SAMP, COVAR_SAMP);
        reservedKeys.put(Tokens.T_CREATE, CREATE);
        reservedKeys.put(Tokens.T_CROSS, CROSS);
        reservedKeys.put(Tokens.T_CUBE, CUBE);
        reservedKeys.put(Tokens.T_CUME_DIST, CUME_DIST);
        reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(113471,5340,<1847,8>,<1948,48>)
```
 reservedKeys.put(Tokens.T_CURRENT, CURRENT);
        reservedKeys.put(Tokens.T_CURRENT_CATALOG, CURRENT_CATALOG);
        reservedKeys.put(Tokens.T_CURRENT_DATE, CURRENT_DATE);
        reservedKeys.put(Tokens.T_CURRENT_DEFAULT_TRANSFORM_GROUP,
                         CURRENT_DEFAULT_TRANSFORM_GROUP);
        reservedKeys.put(Tokens.T_CURRENT_PATH, CURRENT_PATH);
        reservedKeys.put(Tokens.T_CURRENT_ROLE, CURRENT_ROLE);
        reservedKeys.put(Tokens.T_CURRENT_SCHEMA, CURRENT_SCHEMA);
        reservedKeys.put(Tokens.T_CURRENT_TIME, CURRENT_TIME);
        reservedKeys.put(Tokens.T_CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
        reservedKeys.put(Tokens.T_DO, DO);
        reservedKeys.put(Tokens.T_CURRENT_TRANSFORM_GROUP_FOR_TYPE,
                         CURRENT_TRANSFORM_GROUP_FOR_TYPE);
        reservedKeys.put(Tokens.T_CURRENT_USER, CURRENT_USER);
        reservedKeys.put(Tokens.T_CURSOR, CURSOR);
        reservedKeys.put(Tokens.T_CYCLE, CYCLE);
        reservedKeys.put(Tokens.T_DATE, DATE);
        reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(114492,5100,<1864,8>,<1963,50>)
```
 reservedKeys.put(Tokens.T_DAY, DAY);
        reservedKeys.put(Tokens.T_DEALLOCATE, DEALLOCATE);
        reservedKeys.put(Tokens.T_DEC, DEC);
        reservedKeys.put(Tokens.T_DECIMAL, DECIMAL);
        reservedKeys.put(Tokens.T_DECLARE, DECLARE);
        reservedKeys.put(Tokens.T_DEFAULT, DEFAULT);
        reservedKeys.put(Tokens.T_DELETE, DELETE);
        reservedKeys.put(Tokens.T_DENSE_RANK, DENSE_RANK);
        reservedKeys.put(Tokens.T_DEREF, DEREF);
        reservedKeys.put(Tokens.T_DESCRIBE, DESCRIBE);
        reservedKeys.put(Tokens.T_DETERMINISTIC, DETERMINISTIC);
        reservedKeys.put(Tokens.T_DISCONNECT, DISCONNECT);
        reservedKeys.put(Tokens.T_DISTINCT, DISTINCT);
        reservedKeys.put(Tokens.T_DOUBLE, DOUBLE);
        reservedKeys.put(Tokens.T_DROP, DROP);
        reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(115291,5052,<1879,8>,<1978,50>)
```
 reservedKeys.put(Tokens.T_DYNAMIC, DYNAMIC);
        reservedKeys.put(Tokens.T_EACH, EACH);
        reservedKeys.put(Tokens.T_ELEMENT, ELEMENT);
        reservedKeys.put(Tokens.T_ELSE, ELSE);
        reservedKeys.put(Tokens.T_ELSEIF, ELSEIF);
        reservedKeys.put(Tokens.T_END, END);
        reservedKeys.put(Tokens.T_END_EXEC, END_EXEC);
        reservedKeys.put(Tokens.T_ESCAPE, ESCAPE);
        reservedKeys.put(Tokens.T_EVERY, EVERY);
        reservedKeys.put(Tokens.T_EXCEPT, EXCEPT);
        reservedKeys.put(Tokens.T_EXEC, EXEC);
        reservedKeys.put(Tokens.T_EXECUTE, EXECUTE);
        reservedKeys.put(Tokens.T_EXISTS, EXISTS);
        reservedKeys.put(Tokens.T_EXIT, EXIT);
        reservedKeys.put(Tokens.T_EXP, EXP);
        reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(116036,5060,<1894,8>,<1993,54>)
```
 reservedKeys.put(Tokens.T_EXTERNAL, EXTERNAL);
        reservedKeys.put(Tokens.T_EXTRACT, EXTRACT);
        reservedKeys.put(Tokens.T_FALSE, FALSE);
        reservedKeys.put(Tokens.T_FETCH, FETCH);
        reservedKeys.put(Tokens.T_FILTER, FILTER);
        reservedKeys.put(Tokens.T_FIRST_VALUE, FIRST_VALUE);
        reservedKeys.put(Tokens.T_FLOAT, FLOAT);
        reservedKeys.put(Tokens.T_FLOOR, FLOOR);
        reservedKeys.put(Tokens.T_FOR, FOR);
        reservedKeys.put(Tokens.T_FOREIGN, FOREIGN);
        reservedKeys.put(Tokens.T_FREE, FREE);
        reservedKeys.put(Tokens.T_FROM, FROM);
        reservedKeys.put(Tokens.T_FULL, FULL);
        reservedKeys.put(Tokens.T_FUNCTION, FUNCTION);
        reservedKeys.put(Tokens.T_FUSION, FUSION);
        reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(116797,5154,<1909,8>,<2008,46>)
```
 reservedKeys.put(Tokens.T_GET, GET);
        reservedKeys.put(Tokens.T_GLOBAL, GLOBAL);
        reservedKeys.put(Tokens.T_GRANT, GRANT);
        reservedKeys.put(Tokens.T_GROUP, GROUP);
        reservedKeys.put(Tokens.T_GROUPING, GROUPING);
        reservedKeys.put(Tokens.T_HANDLER, HANDLER);
        reservedKeys.put(Tokens.T_HAVING, HAVING);
        reservedKeys.put(Tokens.T_HOLD, HOLD);
        reservedKeys.put(Tokens.T_HOUR, HOUR);
        reservedKeys.put(Tokens.T_IDENTITY, IDENTITY);
        reservedKeys.put(Tokens.T_IF, IF);
        reservedKeys.put(Tokens.T_IMPORT, IMPORT);
        reservedKeys.put(Tokens.T_IN, IN);
        reservedKeys.put(Tokens.T_INDICATOR, INDICATOR);
        reservedKeys.put(Tokens.T_INNER, INNER);
        reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(117542,5244,<1924,8>,<2023,54>)
```
 reservedKeys.put(Tokens.T_INOUT, INOUT);
        reservedKeys.put(Tokens.T_INSENSITIVE, INSENSITIVE);
        reservedKeys.put(Tokens.T_INSERT, INSERT);
        reservedKeys.put(Tokens.T_INT, INT);
        reservedKeys.put(Tokens.T_INTEGER, INTEGER);
        reservedKeys.put(Tokens.T_INTERSECT, INTERSECT);
        reservedKeys.put(Tokens.T_INTERSECTION, INTERSECTION);
        reservedKeys.put(Tokens.T_INTERVAL, INTERVAL);
        reservedKeys.put(Tokens.T_INTO, INTO);
        reservedKeys.put(Tokens.T_IS, IS);
        reservedKeys.put(Tokens.T_ITERATE, ITERATE);
        reservedKeys.put(Tokens.T_JOIN, JOIN);
        reservedKeys.put(Tokens.T_LAG, LAG);
        reservedKeys.put(Tokens.T_LANGUAGE, LANGUAGE);
        reservedKeys.put(Tokens.T_LARGE, LARGE);
        reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(118315,5248,<1939,8>,<2038,50>)
```
 reservedKeys.put(Tokens.T_LAST_VALUE, LAST_VALUE);
        reservedKeys.put(Tokens.T_LATERAL, LATERAL);
        reservedKeys.put(Tokens.T_LEAD, LEAD);
        reservedKeys.put(Tokens.T_LEADING, LEADING);
        reservedKeys.put(Tokens.T_LEAVE, LEAVE);
        reservedKeys.put(Tokens.T_LEFT, LEFT);
        reservedKeys.put(Tokens.T_LIKE, LIKE);
        reservedKeys.put(Tokens.T_LIKE_REGX, LIKE_REGEX);
        reservedKeys.put(Tokens.T_LN, LN);
        reservedKeys.put(Tokens.T_LOCAL, LOCAL);
        reservedKeys.put(Tokens.T_LOCALTIME, LOCALTIME);
        reservedKeys.put(Tokens.T_LOCALTIMESTAMP, LOCALTIMESTAMP);
        reservedKeys.put(Tokens.T_LOOP, LOOP);
        reservedKeys.put(Tokens.T_LOWER, LOWER);
        reservedKeys.put(Tokens.T_MATCH, MATCH);
        reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(119089,5279,<1954,8>,<2053,54>)
```
 reservedKeys.put(Tokens.T_MAX, MAX);
        reservedKeys.put(Tokens.T_MAX_CARDINALITY, MAX_CARDINALITY);
        reservedKeys.put(Tokens.T_MEMBER, MEMBER);
        reservedKeys.put(Tokens.T_MERGE, MERGE);
        reservedKeys.put(Tokens.T_METHOD, METHOD);
        reservedKeys.put(Tokens.T_MIN, MIN);
        reservedKeys.put(Tokens.T_MINUTE, MINUTE);
        reservedKeys.put(Tokens.T_MOD, MOD);
        reservedKeys.put(Tokens.T_MODIFIES, MODIFIES);
        reservedKeys.put(Tokens.T_MODULE, MODULE);
        reservedKeys.put(Tokens.T_MONTH, MONTH);
        reservedKeys.put(Tokens.T_MULTISET, MULTISET);
        reservedKeys.put(Tokens.T_NATIONAL, NATIONAL);
        reservedKeys.put(Tokens.T_NATURAL, NATURAL);
        reservedKeys.put(Tokens.T_NCHAR, NCHAR);
        reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(119862,5335,<1969,8>,<2068,48>)
```
 reservedKeys.put(Tokens.T_NCLOB, NCLOB);
        reservedKeys.put(Tokens.T_NEW, NEW);
        reservedKeys.put(Tokens.T_NO, NO);
        reservedKeys.put(Tokens.T_NONE, NONE);
        reservedKeys.put(Tokens.T_NORMALIZE, NORMALIZE);
        reservedKeys.put(Tokens.T_NOT, NOT);
        reservedKeys.put(Tokens.T_NTH_VALUE, NTH_VALUE);
        reservedKeys.put(Tokens.T_NTILE, NTILE);
        reservedKeys.put(Tokens.T_NULL, NULL);
        reservedKeys.put(Tokens.T_NULLIF, NULLIF);
        reservedKeys.put(Tokens.T_NUMERIC, NUMERIC);
        reservedKeys.put(Tokens.T_OCCURRENCES_REGEX, OCCURRENCES_REGEX);
        reservedKeys.put(Tokens.T_OCTET_LENGTH, OCTET_LENGTH);
        reservedKeys.put(Tokens.T_OF, OF);
        reservedKeys.put(Tokens.T_OFFSET, OFFSET);
        reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(120635,5401,<1984,8>,<2083,58>)
```
 reservedKeys.put(Tokens.T_OLD, OLD);
        reservedKeys.put(Tokens.T_ON, ON);
        reservedKeys.put(Tokens.T_ONLY, ONLY);
        reservedKeys.put(Tokens.T_OPEN, OPEN);
        reservedKeys.put(Tokens.T_OR, OR);
        reservedKeys.put(Tokens.T_ORDER, ORDER);
        reservedKeys.put(Tokens.T_OUT, OUT);
        reservedKeys.put(Tokens.T_OUTER, OUTER);
        reservedKeys.put(Tokens.T_OVER, OVER);
        reservedKeys.put(Tokens.T_OVERLAPS, OVERLAPS);
        reservedKeys.put(Tokens.T_OVERLAY, OVERLAY);
        reservedKeys.put(Tokens.T_PARAMETER, PARAMETER);
        reservedKeys.put(Tokens.T_PARTITION, PARTITION);
        reservedKeys.put(Tokens.T_PERCENT_RANK, PERCENT_RANK);
        reservedKeys.put(Tokens.T_PERCENTILE_CONT, PERCENTILE_CONT);
        reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(121404,5383,<1999,8>,<2098,50>)
```
 reservedKeys.put(Tokens.T_PERCENTILE_DISC, PERCENTILE_DISC);
        reservedKeys.put(Tokens.T_POSITION, POSITION);
        reservedKeys.put(Tokens.T_POSITION_REGEX, POSITION_REGEX);
        reservedKeys.put(Tokens.T_POWER, POWER);
        reservedKeys.put(Tokens.T_PRECISION, PRECISION);
        reservedKeys.put(Tokens.T_PREPARE, PREPARE);
        reservedKeys.put(Tokens.T_PRIMARY, PRIMARY);
        reservedKeys.put(Tokens.T_PROCEDURE, PROCEDURE);
        reservedKeys.put(Tokens.T_RANGE, RANGE);
        reservedKeys.put(Tokens.T_RANK, RANK);
        reservedKeys.put(Tokens.T_READS, READS);
        reservedKeys.put(Tokens.T_REAL, REAL);
        reservedKeys.put(Tokens.T_RECURSIVE, RECURSIVE);
        reservedKeys.put(Tokens.T_REF, REF);
        reservedKeys.put(Tokens.T_REFERENCES, REFERENCES);
        reservedKeys.put(Tokens.T_REFERENCING, REFERENCING);
        reservedKeys.put(Tokens.T_REGR_AVGX, REGR_AVGX);
        reservedKeys.put(Tokens.T_REGR_AVGY, REGR_AVGY);
        reservedKeys.put(Tokens.T_REGR_COUNT, REGR_COUNT);
        reservedKeys.put(Tokens.T_REGR_INTERCEPT, REGR_INTERCEPT);
        reservedKeys.put(Tokens.T_REGR_R2, REGR_R2);
        reservedKeys.put(Tokens.T_REGR_SLOPE, REGR_SLOPE);
        reservedKeys.put(Tokens.T_REGR_SXX, REGR_SXX);
        reservedKeys.put(Tokens.T_REGR_SXY, REGR_SXY);
        reservedKeys.put(Tokens.T_REGR_SYY, REGR_SYY);
        reservedKeys.put(Tokens.T_RELEASE, RELEASE);
        reservedKeys.put(Tokens.T_REPEAT, REPEAT);
        reservedKeys.put(Tokens.T_RESIGNAL, RESIGNAL);
        reservedKeys.put(Tokens.T_RETURN, RETURN);
        reservedKeys.put(Tokens.T_RETURNS, RETURNS);
        reservedKeys.put(Tokens.T_REVOKE, REVOKE);
        reservedKeys.put(Tokens.T_RIGHT, RIGHT);
        reservedKeys.put(Tokens.T_ROLLBACK, ROLLBACK);
        reservedKeys.put(Tokens.T_ROLLUP, ROLLUP);
        reservedKeys.put(Tokens.T_ROW, ROW);
        reservedKeys.put(Tokens.T_ROW_NUMBER, ROW_NUMBER);
        reservedKeys.put(Tokens.T_ROWS, ROWS);
        reservedKeys.put(Tokens.T_SAVEPOINT, SAVEPOINT);
        reservedKeys.put(Tokens.T_SCOPE, SCOPE);
        reservedKeys.put(Tokens.T_SCROLL, SCROLL);
        reservedKeys.put(Tokens.T_SEARCH, SEARCH);
        reservedKeys.put(Tokens.T_SECOND, SECOND);
        reservedKeys.put(Tokens.T_SELECT, SELECT);
        reservedKeys.put(Tokens.T_SENSITIVE, SENSITIVE);
        reservedKeys.put(Tokens.T_SESSION_USER, SESSION_USER);
        reservedKeys.put(Tokens.T_SET, SET);
        reservedKeys.put(Tokens.T_SIGNAL, SIGNAL);
        reservedKeys.put(Tokens.T_SIMILAR, SIMILAR);
        reservedKeys.put(Tokens.T_SMALLINT, SMALLINT);
        reservedKeys.put(Tokens.T_SOME, SOME);
        reservedKeys.put(Tokens.T_SPECIFIC, SPECIFIC);
        reservedKeys.put(Tokens.T_SPECIFICTYPE, SPECIFICTYPE);
        reservedKeys.put(Tokens.T_SQL, SQL);
        reservedKeys.put(Tokens.T_SQLEXCEPTION, SQLEXCEPTION);
        reservedKeys.put(Tokens.T_SQLSTATE, SQLSTATE);
        reservedKeys.put(Tokens.T_SQLWARNING, SQLWARNING);
        reservedKeys.put(Tokens.T_SQRT, SQRT);
        reservedKeys.put(Tokens.T_STACKED, STACKED);
        reservedKeys.put(Tokens.T_START, START);
        reservedKeys.put(Tokens.T_STATIC, STATIC);
        reservedKeys.put(Tokens.T_STDDEV_POP, STDDEV_POP);
        reservedKeys.put(Tokens.T_STDDEV_SAMP, STDDEV_SAMP);
        reservedKeys.put(Tokens.T_SUBMULTISET, SUBMULTISET);
        reservedKeys.put(Tokens.T_SUBSTRING, SUBSTRING);
        reservedKeys.put(Tokens.T_SUBSTRING_REGEX, SUBSTRING_REGEX);
        reservedKeys.put(Tokens.T_SUM, SUM);
        reservedKeys.put(Tokens.T_SYMMETRIC, SYMMETRIC);
        reservedKeys.put(Tokens.T_SYSTEM, SYSTEM);
        reservedKeys.put(Tokens.T_SYSTEM_USER, SYSTEM_USER);
        reservedKeys.put(Tokens.T_TABLE, TABLE);
        reservedKeys.put(Tokens.T_TABLESAMPLE, TABLESAMPLE);
        reservedKeys.put(Tokens.T_THEN, THEN);
        reservedKeys.put(Tokens.T_TIME, TIME);
        reservedKeys.put(Tokens.T_TIMESTAMP, TIMESTAMP);
        reservedKeys.put(Tokens.T_TIMEZONE_HOUR, TIMEZONE_HOUR);
        reservedKeys.put(Tokens.T_TIMEZONE_MINUTE, TIMEZONE_MINUTE);
        reservedKeys.put(Tokens.T_TO, TO);
        reservedKeys.put(Tokens.T_TRAILING, TRAILING);
        reservedKeys.put(Tokens.T_TRANSLATE, TRANSLATE);
        reservedKeys.put(Tokens.T_TRANSLATE_REGEX, TRANSLATE_REGEX);
        reservedKeys.put(Tokens.T_TRANSLATION, TRANSLATION);
        reservedKeys.put(Tokens.T_TREAT, TREAT);
        reservedKeys.put(Tokens.T_TRIGGER, TRIGGER);
        reservedKeys.put(Tokens.T_TRIM, TRIM);
        reservedKeys.put(Tokens.T_TRIM_ARRAY, TRIM_ARRAY);
        reservedKeys.put(Tokens.T_TRUE, TRUE);
        reservedKeys.put(Tokens.T_TRUNCATE, TRUNCATE);
        reservedKeys.put(Tokens.T_UESCAPE, UESCAPE);
        reservedKeys.put(Tokens.T_UNDO, UNDO);
        reservedKeys.put(Tokens.T_UNION, UNION);
        reservedKeys.put(Tokens.T_UNIQUE, UNIQUE);
        reservedKeys.put(Tokens.T_UNKNOWN, UNKNOWN);
        reservedKeys.put(Tokens.T_UNNEST, UNNEST);
        reservedKeys.put(Tokens.T_UNTIL, UNTIL);
        reservedKeys.put(Tokens.T_UPDATE, UPDATE);
        reservedKeys.put(Tokens.T_UPPER, UPPER);
        reservedKeys.put(Tokens.T_USER, USER);
        reservedKeys.put(Tokens.T_USING, USING);
        reservedKeys.put(Tokens.T_VALUE, VALUE);
        reservedKeys.put(Tokens.T_VALUES, VALUES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(36976,284,<1462,60>,<1469,21>)
```
 {
                        token.tokenString = Tokens.T_LEFTBRACKET;
                        token.tokenType   = Tokens.LEFTBRACKET;
                        currentPosition   += 3;
                        token.isDelimiter = true;

                        return;
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(37306,286,<1469,67>,<1476,21>)
```
 {
                        token.tokenString = Tokens.T_RIGHTBRACKET;
                        token.tokenType   = Tokens.RIGHTBRACKET;
                        currentPosition   += 3;
                        token.isDelimiter = true;

                        return;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(65948,259,<1806,16>,<1809,47>)
```
 sb.append(Tokens.T_POSITION).append('(')                 //
                    .append(nodes[0].getSQL()).append(' ')               //
                    .append(Tokens.T_IN).append(' ')                     //
                    .append(nodes[1].getSQL());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(70840,259,<1938,16>,<1941,47>)
```
 sb.append(Tokens.T_SUBSTRING).append('(')                //
                    .append(nodes[0].getSQL()).append(' ')               //
                    .append(Tokens.T_FROM).append(' ')                   //
                    .append(nodes[1].getSQL());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(6870,2254,<231,8>,<297,9>)
```
 if (!isFullSelect && selectColumnSet == null) {}
        else if (right.isFullSelect) {
            isFullSelect    = false;
            selectColumnSet = null;
        } else if (right.selectColumnSet != null) {
            if (isFullSelect) {
                isFullSelect    = false;
                selectColumnSet = ((Table) object).getColumnNameSet();
            }

            selectColumnSet.removeAll(right.selectColumnSet);

            if (selectColumnSet.isEmpty()) {
                selectColumnSet = null;
            }
        }

        if (!isFullInsert && insertColumnSet == null) {}
        else if (right.isFullInsert) {
            isFullInsert    = false;
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (isFullInsert) {
                isFullInsert    = false;
                insertColumnSet = ((Table) object).getColumnNameSet();
            }

            insertColumnSet.removeAll(right.insertColumnSet);

            if (insertColumnSet.isEmpty()) {
                insertColumnSet = null;
            }
        }

        if (!isFullUpdate && updateColumnSet == null) {}
        else if (right.isFullUpdate) {
            isFullUpdate    = false;
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (isFullUpdate) {
                isFullUpdate    = false;
                updateColumnSet = ((Table) object).getColumnNameSet();
            }

            updateColumnSet.removeAll(right.updateColumnSet);

            if (updateColumnSet.isEmpty()) {
                updateColumnSet = null;
            }
        }

        if (!isFullReferences && referencesColumnSet == null) {}
        else if (right.isFullReferences) {
            isFullReferences    = false;
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (isFullReferences) {
                isFullReferences    = false;
                referencesColumnSet = ((Table) object).getColumnNameSet();
            }

            referencesColumnSet.removeAll(right.referencesColumnSet);

            if (referencesColumnSet.isEmpty()) {
                referencesColumnSet = null;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(7423,2267,<248,8>,<314,9>)
```
 if (!isFullInsert && insertColumnSet == null) {}
        else if (right.isFullInsert) {
            isFullInsert    = false;
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (isFullInsert) {
                isFullInsert    = false;
                insertColumnSet = ((Table) object).getColumnNameSet();
            }

            insertColumnSet.removeAll(right.insertColumnSet);

            if (insertColumnSet.isEmpty()) {
                insertColumnSet = null;
            }
        }

        if (!isFullUpdate && updateColumnSet == null) {}
        else if (right.isFullUpdate) {
            isFullUpdate    = false;
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (isFullUpdate) {
                isFullUpdate    = false;
                updateColumnSet = ((Table) object).getColumnNameSet();
            }

            updateColumnSet.removeAll(right.updateColumnSet);

            if (updateColumnSet.isEmpty()) {
                updateColumnSet = null;
            }
        }

        if (!isFullReferences && referencesColumnSet == null) {}
        else if (right.isFullReferences) {
            isFullReferences    = false;
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (isFullReferences) {
                isFullReferences    = false;
                referencesColumnSet = ((Table) object).getColumnNameSet();
            }

            referencesColumnSet.removeAll(right.referencesColumnSet);

            if (referencesColumnSet.isEmpty()) {
                referencesColumnSet = null;
            }
        }

        if (!isFullTrigger && triggerColumnSet == null) {}
        else if (right.isFullTrigger) {
            isFullTrigger    = false;
            triggerColumnSet = null;
        } else if (right.triggerColumnSet != null) {
            if (isFullTrigger) {
                isFullTrigger    = false;
                triggerColumnSet = ((Table) object).getColumnNameSet();
            }

            triggerColumnSet.removeAll(right.triggerColumnSet);

            if (triggerColumnSet.isEmpty()) {
                triggerColumnSet = null;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(46728,448,<1335,45>,<1346,21>)
```
 {
                        if (currentTable.triggerLists[Trigger.DELETE_AFTER_ROW]
                                .length > 0) {
                            hasAfterRowTriggers = true;
                        }

                        if (extraDeleteTables == null) {
                            extraDeleteTables = new OrderedHashSet();
                        }

                        extraDeleteTables.add(currentTable);
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(47182,448,<1346,27>,<1357,21>)
```
 {
                        if (currentTable.triggerLists[Trigger.UPDATE_AFTER_ROW]
                                .length > 0) {
                            hasAfterRowTriggers = true;
                        }

                        if (extraUpdateTables == null) {
                            extraUpdateTables = new OrderedHashSet();
                        }

                        extraUpdateTables.add(currentTable);
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(18935,440,<571,12>,<582,23>)
```
 for (i = 0; i < smallops; i++) {
                ps.setInt(1, nextIntRandom(randomgen, bigrows - 1));
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
            }

            ps.close();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(20123,440,<606,12>,<617,23>)
```
 for (i = 0; i < bigops; i++) {
                ps.setInt(1, nextIntRandom(randomgen, smallrows - 1));
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println("Select " + (i + 1) + " : "
                                       + (sw.elapsedTime() + 1));
                }
            }

            ps.close();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(3950,1399,<116,4>,<152,5>)
```
 String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][PostgreSQL];
                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(3357,1395,<94,4>,<130,5>)
```
 String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals("SERIAL")) {
            String SeqName = new String("_" + columnDesc.getString(4)
                                        + "_seq");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = "DROP SEQUENCE " + SeqName + ";";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][ORACLE];
                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(6914,715,<205,8>,<229,9>)
```
 int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }

        if (hashIndex.elementCount >= threshold) {
            reset();

            return getOrAddString(key);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(8133,715,<250,8>,<274,9>)
```
 int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }

        if (hashIndex.elementCount >= threshold) {
            reset();

            return getOrAddString(key);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16302,521,<585,4>,<602,5>)
```
 public void checkReferences(SchemaObject object, boolean[] checkList) {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(16829,518,<604,4>,<621,5>)
```
 public void checkTrigger(SchemaObject object, boolean[] checkList) {

        if (object instanceof Table) {
            Table table = (Table) object;

            if (isFullyAccessibleByRole(table.getName())) {
                return;
            }

            Right right = (Right) fullRightsMap.get(table.getName());

            if (right != null && right.canReference(table, checkList)) {
                return;
            }
        }

        throw Error.error(ErrorCode.X_42501, object.getName().name);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56582,582,<1830,4>,<1844,5>)
```
 private Result createBlockAddresses(long lobID, int offset, int count) {

        ResultMetaData meta     = createLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createLobPartCall, params,
                0);

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(57170,606,<1846,4>,<1861,5>)
```
 private Result createFullBlockAddresses(long lobID, int offset,
            int count) {

        ResultMetaData meta = createSingleLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(createSingleLobPartCall,
                params, 0);

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java|(5218,263,<181,4>,<190,5>)
```
 public CachedObject getAccessor(Index key) {

        int position = key.getPosition();

        if (position >= accessorList.length) {
            throw Error.runtimeError(ErrorCode.U_S0500, "RowStoreAVL");
        }

        return accessorList[position];
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RowStoreAVL.java|(5451,263,<171,4>,<180,5>)
```
 public CachedObject getAccessor(Index key) {

        int position = key.getPosition();

        if (position >= accessorList.length) {
            throw Error.runtimeError(ErrorCode.U_S0500, "RowStoreAVL");
        }

        return accessorList[position];
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(19751,134,<592,12>,<594,13>)
```
 if (expr.nodes[RIGHT].nodes[LEFT].dataType == null) {
                expr.nodes[RIGHT].nodes[LEFT].dataType = dataType;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(19899,136,<596,12>,<598,13>)
```
 if (expr.nodes[RIGHT].nodes[RIGHT].dataType == null) {
                expr.nodes[RIGHT].nodes[RIGHT].dataType = dataType;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(10131,1330,<300,12>,<321,76>)
```
 getLob            = sysLobSession.compileStatement(getLobSQL);
            getSpanningBlocks = sysLobSession.compileStatement(getLobPartSQL);
            createLob         = sysLobSession.compileStatement(createLobSQL);
            createLobPartCall =
                sysLobSession.compileStatement(createLobPartCallSQL);
            createSingleLobPartCall =
                sysLobSession.compileStatement(createSingleLobPartCallSQL);
            divideLobPartCall =
                sysLobSession.compileStatement(divideLobPartCallSQL);
            deleteLobCall = sysLobSession.compileStatement(deleteLobCallSQL);
            deleteLobPartCall =
                sysLobSession.compileStatement(deleteLobPartCallSQL);
            updateLobLength =
                sysLobSession.compileStatement(updateLobLengthSQL);
            updateLobUsage = sysLobSession.compileStatement(updateLobUsageSQL);
            getNextLobId   = sysLobSession.compileStatement(getNextLobIdSQL);
            deleteUnusedLobs =
                sysLobSession.compileStatement(deleteUnusedCallSQL);
            mergeUnusedSpace =
                sysLobSession.compileStatement(mergeUnusedSpaceSQL);
            getLobUseLimit = sysLobSession.compileStatement(getLobUseLimitSQL);
            getLobCount    = sysLobSession.compileStatement(getLobCountSQL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(10285,1347,<302,12>,<325,78>)
```
 createLob         = sysLobSession.compileStatement(createLobSQL);
            createLobPartCall =
                sysLobSession.compileStatement(createLobPartCallSQL);
            createSingleLobPartCall =
                sysLobSession.compileStatement(createSingleLobPartCallSQL);
            divideLobPartCall =
                sysLobSession.compileStatement(divideLobPartCallSQL);
            deleteLobCall = sysLobSession.compileStatement(deleteLobCallSQL);
            deleteLobPartCall =
                sysLobSession.compileStatement(deleteLobPartCallSQL);
            updateLobLength =
                sysLobSession.compileStatement(updateLobLengthSQL);
            updateLobUsage = sysLobSession.compileStatement(updateLobUsageSQL);
            getNextLobId   = sysLobSession.compileStatement(getNextLobIdSQL);
            deleteUnusedLobs =
                sysLobSession.compileStatement(deleteUnusedCallSQL);
            mergeUnusedSpace =
                sysLobSession.compileStatement(mergeUnusedSpaceSQL);
            getLobUseLimit = sysLobSession.compileStatement(getLobUseLimitSQL);
            getLobCount    = sysLobSession.compileStatement(getLobCountSQL);

            //
            getSpanningParts = sysLobSession.compileStatement(getPartsSQL);
            getLastPart      = sysLobSession.compileStatement(getLastPartSQL);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(58258,210,<1872,8>,<1874,72>)
```
 params[ALLOC_PART.PART_OFFSET]  = ValuePool.getLong(partOffset);
        params[ALLOC_PART.PART_LENGTH]  = ValuePool.getLong(dataLength);
        params[ALLOC_PART.PART_BYTES]   = ValuePool.getLong(byteLength);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(58331,205,<1873,8>,<1875,67>)
```
 params[ALLOC_PART.PART_LENGTH]  = ValuePool.getLong(dataLength);
        params[ALLOC_PART.PART_BYTES]   = ValuePool.getLong(byteLength);
        params[ALLOC_PART.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60428,202,<1948,8>,<1950,69>)
```
 params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);
        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getLong(offset);
        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(19271,257,<607,8>,<611,71>)
```
 StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
        sb.append(' ').append(Tokens.T_INDEX).append(' ').append('\'');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TextTable.java|(9969,258,<338,8>,<342,72>)
```
 StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
        sb.append(' ').append(Tokens.T_SOURCE).append(' ').append('\'');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(37875,391,<1256,8>,<1265,9>)
```
 int blockOffset     = (int) (offset / lobBlockSize);
        int byteBlockOffset = (int) (offset % lobBlockSize);
        int blockLimit      = (int) ((offset + length) / lobBlockSize);
        int byteLimitOffset = (int) ((offset + length) % lobBlockSize);

        if (byteLimitOffset == 0) {
            byteLimitOffset = lobBlockSize;
        } else {
            blockLimit++;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(41821,415,<1374,8>,<1383,9>)
```
 int     blockOffset     = (int) (offset / lobBlockSize);
        int     byteBlockOffset = (int) (offset % lobBlockSize);
        int     blockLimit      = (int) ((offset + dataLength) / lobBlockSize);
        int     byteLimitOffset = (int) ((offset + dataLength) % lobBlockSize);

        if (byteLimitOffset == 0) {
            byteLimitOffset = lobBlockSize;
        } else {
            blockLimit++;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(4484,421,<157,4>,<169,5>)
```
 public long position(SessionInterface session, BlobData pattern,
                         long start) {

        ResultLob resultOut = ResultLob.newLobGetCharPatternPositionRequest(id,
            pattern.getId(), start);
        Result resultIn = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getOffset();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/ClobDataID.java|(6388,425,<206,4>,<218,5>)
```
 public long position(SessionInterface session, ClobData searchstr,
                         long start) {

        ResultLob resultOut = ResultLob.newLobGetCharPatternPositionRequest(id,
            searchstr.getId(), start);
        Result resultIn = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getOffset();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62453,141,<1815,8>,<1822,51>)
```
 g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;

        lTime = System.currentTimeMillis() - lTime;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30544,141,<992,8>,<999,51>)
```
 g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;

        lTime = System.currentTimeMillis() - lTime;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllSimpleTests.java|(2134,272,<54,8>,<58,76>)
```
 System.out.println("*********** " + TestDima.class.getName());
        TestDima.main(args);
        System.out.println("*********** " + TestHSQLDB.class.getName());
        TestHSQLDB.main(args);
        System.out.println("*********** " + TestObjectSize.class.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllSimpleTests.java|(2234,329,<56,8>,<62,66>)
```
 System.out.println("*********** " + TestHSQLDB.class.getName());
        TestHSQLDB.main(args);
        System.out.println("*********** " + TestObjectSize.class.getName());
        TestObjectSize.main(args);
        System.out.println(
            "*********** "
            + TestSubQueriesInPreparedStatements.class.getName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(97661,860,<2579,16>,<2599,52>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                /*
                                if (nodes[1] != null) {
                                    if (nodes[1].dataType == null) {
                 nodes[1].dataType = Type.SQL_VARCHAR_DEFAULT;
                                    }

                                    if (!nodes[1].dataType.isCharacterType()) {
                                        throw Error.error(ErrorCode.X_42563);
                                    }
                                }
                 */
                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                // fixed maximum as format is a variable
                dataType = Type.SQL_DECIMAL_DEFAULT;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(108402,291,<2880,16>,<2888,44>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42561);
                }

                dataType = Type.SQL_INTEGER;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(62140,401,<1799,8>,<1820,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(30231,401,<976,8>,<997,20>)
```
 long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = "ms";
        g[1] = "count";
        g[2] = "sql";
        g[3] = "error";

        gResult.setHead(g);

        int max = 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableJoined.java|(10064,531,<346,8>,<364,9>)
```
 String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");

        if (tableAlias != null) {
            sb.append(b).append("alias=").append(tableAlias.name).append("\n");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(27618,531,<932,8>,<950,9>)
```
 String temp = "INNER";

        if (isLeftJoin) {
            temp = "LEFT OUTER";

            if (isRightJoin) {
                temp = "FULL";
            }
        } else if (isRightJoin) {
            temp = "RIGHT OUTER";
        }

        sb.append(b).append("join type=").append(temp).append("\n");
        sb.append(b).append("table=").append(rangeTable.getName().name).append(
            "\n");

        if (tableAlias != null) {
            sb.append(b).append("alias=").append(tableAlias.name).append("\n");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/CodeSwitcher.java|(12109,506,<364,24>,<377,25>)
```
 if (vSwitchOn.indexOf(s) != -1) {
                            working   = true;
                            switchoff = false;
                        } else if (vSwitchOff.indexOf(s) != -1) {
                            working = true;

                            v.insertElementAt("/*", ++i);

                            switchoff = true;
                        }

                        if (vSwitches.indexOf(s) == -1) {
                            vSwitches.addElement(s);
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/CodeSwitcher.java|(13022,506,<390,24>,<403,25>)
```
 if (vSwitchOff.indexOf(s) != -1) {
                            working   = true;
                            switchoff = false;
                        } else if (vSwitchOn.indexOf(s) != -1) {
                            working = true;

                            v.insertElementAt("/*", ++i);

                            switchoff = true;
                        }

                        if (vSwitches.indexOf(s) == -1) {
                            vSwitches.addElement(s);
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5443,241,<161,8>,<169,62>)
```
 subList = sequenceLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = tableLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = functionLookup.getSQL(resolved, unresolved);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5538,242,<165,8>,<173,63>)
```
 subList = tableLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = functionLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = procedureLookup.getSQL(resolved, unresolved);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Schema.java|(5630,246,<169,8>,<177,63>)
```
 subList = functionLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = procedureLookup.getSQL(resolved, unresolved);

        list.addAll(subList);

        subList = assertionLookup.getSQL(resolved, unresolved);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(63937,236,<2068,12>,<2073,30>)
```
 int aPartLength = (int) aParts[i][ALLOC_PART.PART_LENGTH];

            getPartBytesCompressedInBuffer(aID, aParts[i], true);

            String aString = new String(ArrayUtil.byteArrayToChars(dataBuffer,
                aPartLength));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(64186,236,<2074,12>,<2079,30>)
```
 int bPartLength = (int) bParts[i][ALLOC_PART.PART_LENGTH];

            getPartBytesCompressedInBuffer(bID, bParts[i], true);

            String bString = new String(ArrayUtil.byteArrayToChars(dataBuffer,
                bPartLength));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54562,287,<1773,8>,<1780,56>)
```
 sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningBlocks.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
        int             size      = navigator.getSize();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60640,286,<1952,8>,<1959,56>)
```
 sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningParts.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
        int             size      = navigator.getSize();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(70489,281,<2270,8>,<2277,56>)
```
 sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getLastPart.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
        int             size      = navigator.getSize();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAShadowFile.java|(8682,272,<282,12>,<290,55>)
```
 if (fetchedSize == limitSize) {
                return -1;
            }

            if (limitSize >= 0 && limitSize - fetchedSize < length) {
                length = (int) (limitSize - fetchedSize);
            }

            int count = is.read(bytes, offset, length);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/InputStreamWrapper.java|(2691,248,<80,8>,<88,51>)
```
 if (fetchedSize == limitSize) {
            return -1;
        }

        if (limitSize >= 0 && limitSize - fetchedSize < length) {
            length = (int) (limitSize - fetchedSize);
        }

        int count = is.read(bytes, offset, length);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(6942,213,<226,8>,<231,9>)
```
 for (int i = 0; i < readTableNames.length; i++) {
            HsqlName name = readTableNames[i];

            result.navigator.add(new Object[]{
                name.getSchemaQualifiedStatementName() });
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDMQL.java|(7226,215,<235,8>,<240,9>)
```
 for (int i = 0; i < writeTableNames.length; i++) {
            HsqlName name = writeTableNames[i];

            result.navigator.add(new Object[]{
                name.getSchemaQualifiedStatementName() });
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(55047,195,<1788,12>,<1791,62>)
```
 blocks[i][LOBS.BLOCK_ADDR] =
                ((Integer) data[LOBS.BLOCK_ADDR]).intValue();
            blocks[i][LOBS.BLOCK_COUNT] =
                ((Integer) data[LOBS.BLOCK_COUNT]).intValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(55150,199,<1790,12>,<1793,63>)
```
 blocks[i][LOBS.BLOCK_COUNT] =
                ((Integer) data[LOBS.BLOCK_COUNT]).intValue();
            blocks[i][LOBS.BLOCK_OFFSET] =
                ((Integer) data[LOBS.BLOCK_OFFSET]).intValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(11379,1150,<221,8>,<240,62>)
```
 nonDeterministicFuncSet.add(FUNC_ACTION_ID);
        nonDeterministicFuncSet.add(FUNC_CRYPT_KEY);
        nonDeterministicFuncSet.add(FUNC_DATABASE);
        nonDeterministicFuncSet.add(FUNC_DATABASE_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_DATABASE_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_IDENTITY);
        nonDeterministicFuncSet.add(FUNC_ISAUTOCOMMIT);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYSESSION);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASE);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASEFILES);
        nonDeterministicFuncSet.add(FUNC_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_ID);
        nonDeterministicFuncSet.add(FUNC_SESSION_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SESSIONTIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SYSDATE);
        nonDeterministicFuncSet.add(FUNC_SYSTIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_CONTROL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(11537,1158,<224,8>,<243,47>)
```
 nonDeterministicFuncSet.add(FUNC_DATABASE_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_DATABASE_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_IDENTITY);
        nonDeterministicFuncSet.add(FUNC_ISAUTOCOMMIT);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYSESSION);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASE);
        nonDeterministicFuncSet.add(FUNC_ISREADONLYDATABASEFILES);
        nonDeterministicFuncSet.add(FUNC_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_ID);
        nonDeterministicFuncSet.add(FUNC_SESSION_ISOLATION_LEVEL);
        nonDeterministicFuncSet.add(FUNC_SESSION_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SESSIONTIMEZONE);
        nonDeterministicFuncSet.add(FUNC_SYSDATE);
        nonDeterministicFuncSet.add(FUNC_SYSTIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMESTAMP);
        nonDeterministicFuncSet.add(FUNC_TIMEZONE);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_CONTROL);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_ID);
        nonDeterministicFuncSet.add(FUNC_TRANSACTION_SIZE);
        nonDeterministicFuncSet.add(FUNC_UUID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(3734,373,<88,8>,<94,31>)
```
 tempCalGMT.setLenient(false);
        sdfd.setCalendar(new GregorianCalendar(TimeZone.getTimeZone("GMT"),
                                               defaultLocale));
        sdfd.setLenient(false);
        sdft.setCalendar(new GregorianCalendar(TimeZone.getTimeZone("GMT"),
                                               defaultLocale));
        sdft.setLenient(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/HsqlDateTime.java|(3912,338,<91,8>,<97,32>)
```
 sdfd.setLenient(false);
        sdft.setCalendar(new GregorianCalendar(TimeZone.getTimeZone("GMT"),
                                               defaultLocale));
        sdft.setLenient(false);
        sdfts.setCalendar(new GregorianCalendar(TimeZone.getTimeZone("GMT"),
                defaultLocale));
        sdfts.setLenient(false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(58416,208,<1671,12>,<1678,57>)
```
 lTime = System.currentTimeMillis() - lTime;
            g[0]  = "SQL Error";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManager.java|(28106,208,<884,12>,<891,57>)
```
 lTime = System.currentTimeMillis() - lTime;
            g[0]  = "SQL Error";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += " / Error Code: " + e.getErrorCode();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129505,2267,<2159,8>,<2209,39>)
```
 commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137994,2282,<2344,8>,<2395,43>)
```
 commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
        commandSet.put(T_BITXOR, BITXOR);
        commandSet.put(T_CASEWHEN, Tokens.CASEWHEN);
        commandSet.put(T_CONCAT_WORD, CONCAT_WORD);
        commandSet.put(T_CONCAT_WS, CONCAT_WS);
        commandSet.put(T_CHR, CHR);
        commandSet.put(T_COS, COS);
        commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(34420,1553,<898,8>,<940,9>)
```
 switch (sourceType.typeCode) {

            case Types.SQL_ARRAY :
                return getArray(parameterIndex);
            case Types.SQL_DATE :
                return getDate(parameterIndex);
            case Types.SQL_TIME :
            case Types.SQL_TIME_WITH_TIME_ZONE :
                return getTime(parameterIndex);
            case Types.SQL_TIMESTAMP :
            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :
                return getTimestamp(parameterIndex);
            case Types.SQL_BINARY :
            case Types.SQL_VARBINARY :
                return getBytes(parameterIndex);
            case Types.SQL_BIT : {
                boolean b = getBoolean(parameterIndex);

                return wasNull() ? null
                                 : b ? Boolean.TRUE
                                     : Boolean.FALSE;
            }
            case Types.SQL_CLOB :
                return getClob(parameterIndex);
            case Types.SQL_BLOB :
                return getBlob(parameterIndex);
            case Types.OTHER :
            case Types.JAVA_OBJECT : {
                Object o = getColumnInType(parameterIndex, sourceType);

                if (o == null) {
                    return null;
                }

                try {
                    return ((JavaObjectData) o).getObject();
                } catch (HsqlException e) {
                    throw JDBCUtil.sqlException(e);
                }
            }
            default :
                return getColumnInType(parameterIndex, sourceType);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(70749,1523,<1652,8>,<1694,9>)
```
 switch (sourceType.typeCode) {

            case Types.SQL_ARRAY :
                return getArray(columnIndex);
            case Types.SQL_DATE :
                return getDate(columnIndex);
            case Types.SQL_TIME :
            case Types.SQL_TIME_WITH_TIME_ZONE :
                return getTime(columnIndex);
            case Types.SQL_TIMESTAMP :
            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :
                return getTimestamp(columnIndex);
            case Types.SQL_BINARY :
            case Types.SQL_VARBINARY :
                return getBytes(columnIndex);
            case Types.SQL_BIT : {
                boolean b = getBoolean(columnIndex);

                return wasNull() ? null
                                 : b ? Boolean.TRUE
                                     : Boolean.FALSE;
            }
            case Types.SQL_CLOB :
                return getClob(columnIndex);
            case Types.SQL_BLOB :
                return getBlob(columnIndex);
            case Types.OTHER :
            case Types.JAVA_OBJECT : {
                Object o = getColumnInType(columnIndex, sourceType);

                if (o == null) {
                    return null;
                }

                try {
                    return ((JavaObjectData) o).getObject();
                } catch (HsqlException e) {
                    throw JDBCUtil.sqlException(e);
                }
            }
            default :
                return getColumnInType(columnIndex, sourceType);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/NumberSequence.java|(7551,174,<262,12>,<264,53>)
```
 sb.append(Tokens.T_BY).append(' ').append(Tokens.T_DEFAULT);
            sb.append(' ').append(Tokens.T_AS).append(' ');
            sb.append(Tokens.T_SEQUENCE).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(18374,1193,<441,4>,<473,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
     * as a <code>byte</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setByte
     */
    public synchronized byte getByte(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(21650,1385,<510,4>,<541,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>byte</code> in the Java programming language.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB converts the numeric value to the return type. If the value is
     * out of the range for the return type, an error is returned. For example,
     * this can happen if getByte() or getShort() is used to retrieve a value
     * of type INTEGER or BIGINT and the value is beyond the range covered by
     * the return type.
     *
     * </div>
     * <!-- end release-specific documentation -->
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>0</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public byte getByte(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81355,302,<2750,16>,<2754,63>)
```
 sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(82150,305,<2770,16>,<2774,63>)
```
 sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_ROUTINE).append(' ');
                sb.append(object.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144647,257,<2488,8>,<2492,51>)
```
 commandSet.put(T_DIVIDE, Tokens.DIVIDE);
        commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(144958,267,<2494,8>,<2498,51>)
```
 commandSet.put(T_LESS_EQUALS, Tokens.LESS_EQUALS);
        commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(23497,187,<709,8>,<713,40>)
```
 cDrop.setEnabled(and && b);
        cCreate.setEnabled(and && b);
        cDelete.setEnabled(and && b);
        cCreateIndex.setEnabled(and && b);
        cDropIndex.setEnabled(and && b);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(23533,189,<710,8>,<714,37>)
```
 cCreate.setEnabled(and && b);
        cDelete.setEnabled(and && b);
        cCreateIndex.setEnabled(and && b);
        cDropIndex.setEnabled(and && b);
        cInsert.setEnabled(and && b);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(23571,188,<711,8>,<715,36>)
```
 cDelete.setEnabled(and && b);
        cCreateIndex.setEnabled(and && b);
        cDropIndex.setEnabled(and && b);
        cInsert.setEnabled(and && b);
        cAlter.setEnabled(and && b);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(17067,1301,<404,4>,<439,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * (JDBC4 modified:)
     * Retrieves the value of the designated JDBC <code>BIT</code>
     * or <code>BOOLEAN</code> parameter as a
     * <code>boolean</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>,
     *         the result is <code>false</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setBoolean
     */
    public synchronized boolean getBoolean(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BOOLEAN);

        return o == null ? false
                         : ((Boolean) o).booleanValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(20304,1340,<480,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     * Retrieves the value of the designated column in the current row
     * of this <code>ResultSet</code> object as
     * a <code>boolean</code> in the Java programming language.
     *
     *
     * <P>(JDBC4 clarification:)
     * <P>If the designated column has a datatype of CHAR or VARCHAR
     * and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
     * and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype
     * of CHAR or VARCHAR
     * and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
     * and contains  a 1, a value of <code>true</code> is returned.
     * <!-- end generic documentation -->
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @return the column value; if the value is SQL <code>NULL</code>, the
     * value returned is <code>false</code>
     * @exception SQLException if a database access error occurs or this method is
     *            called on a closed result set
     */
    public boolean getBoolean(int columnIndex) throws SQLException {

        Object o = getColumnInType(columnIndex, Type.SQL_BOOLEAN);

        return o == null ? false
                         : ((Boolean) o).booleanValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Routine.java|(19505,280,<694,12>,<699,13>)
```
 for (int i = 0; i < names.length; i++) {
                if (names[i].schema != SqlInvariants.MODULE_HSQLNAME) {
                    throw Error.error(ErrorCode.X_42608,
                                      Tokens.T_MODIFIES + ' ' + Tokens.T_SQL);
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Routine.java|(19925,277,<705,12>,<710,13>)
```
 for (int i = 0; i < names.length; i++) {
                if (names[i].schema != SqlInvariants.MODULE_HSQLNAME) {
                    throw Error.error(ErrorCode.X_42608,
                                      Tokens.T_READS + ' ' + Tokens.T_SQL);
                }
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/DataSpaceManagerBlocks.java|(3491,573,<100,8>,<109,57>)
```
 //
        rootStore = new BlockObjectStore(cache, directorySpaceManager,
                                         IntArrayCachedObject.class,
                                         IntArrayCachedObject.fileSizeFactor
                                         * blockSize, blockSize);
        directoryStore =
            new BlockObjectStore(cache, directorySpaceManager,
                                 DirectoryBlockCachedObject.class,
                                 DirectoryBlockCachedObject.fileSizeFactor
                                 * blockSize, blockSize);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/DataSpaceManagerBlocks.java|(3785,574,<105,8>,<113,75>)
```
 directoryStore =
            new BlockObjectStore(cache, directorySpaceManager,
                                 DirectoryBlockCachedObject.class,
                                 DirectoryBlockCachedObject.fileSizeFactor
                                 * blockSize, blockSize);
        bitMapStore = new BlockObjectStore(cache, directorySpaceManager,
                                           BitMapCachedObject.class,
                                           BitMapCachedObject.fileSizeFactor
                                           * bitmapIntSize, bitmapIntSize);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(22074,446,<638,4>,<659,5>)
```
 public static int getRandomID(int type) {

        int min = 0,
            max = 0;

        switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }

        return (getRandomInt(min, max));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(23468,446,<730,4>,<751,5>)
```
 public static int getRandomID(int type) {

        int min = 0,
            max = 0;

        switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }

        return (getRandomInt(min, max));
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlob.java|(10619,361,<233,8>,<243,47>)
```
 final byte[] data = getData();
        final int    dlen = data.length;

        if (start < MIN_POS) {
            throw JDBCUtil.outOfRangeArgument("start: " + start);
        } else if (start > dlen || pattern == null) {
            return -1L;
        }

        // by now, we know start <= Integer.MAX_VALUE;
        final int startIndex = (int) start - 1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlob.java|(12260,362,<276,8>,<286,48>)
```
 final byte[] data = getData();
        final int    dlen = data.length;

        if (start < MIN_POS) {
            throw JDBCUtil.outOfRangeArgument("start: " + start);
        } else if (start > dlen || pattern == null) {
            return -1L;
        }

        // by now, we know start <= Integer.MAX_VALUE;
        final int  startIndex = (int) start - 1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(14619,937,<533,34>,<559,13>)
```
 {
                read();

                Expression e = XreadValueSpecificationOrNull();

                if (e == null) {
                    HsqlName name = readSchemaName();
                    Object[] args = new Object[]{ name };

                    return new StatementSession(StatementTypes.SET_CATALOG,
                                                args);
                }

                if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };

                return new StatementSession(StatementTypes.SET_CATALOG, args);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(15590,935,<560,33>,<586,13>)
```
 {
                read();

                Expression e = XreadValueSpecificationOrNull();

                if (e == null) {
                    HsqlName name = readSchemaName();
                    Object[] args = new Object[]{ name };

                    return new StatementSession(StatementTypes.SET_SCHEMA,
                                                args);
                }

                if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                Expression[] args = new Expression[]{ e };

                return new StatementSession(StatementTypes.SET_SCHEMA, args);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(19407,255,<674,8>,<682,9>)
```
 for (int i = 0; i < nameList.length; i++) {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            tableWriteLocks.put(name, session);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(19719,254,<686,8>,<694,9>)
```
 for (int i = 0; i < nameList.length; i++) {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            tableReadLocks.put(name, session);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(33648,248,<1063,8>,<1071,9>)
```
 public void reset() {

            System.gc();

            long currentFree  = Runtime.getRuntime().freeMemory();
            long currentAlloc = Runtime.getRuntime().totalMemory();

            min = max = (currentAlloc - currentFree);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(33625,248,<1080,8>,<1088,9>)
```
 public void reset() {

            System.gc();

            long currentFree  = Runtime.getRuntime().freeMemory();
            long currentAlloc = Runtime.getRuntime().totalMemory();

            min = max = (currentAlloc - currentFree);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128746,922,<2143,8>,<2162,45>)
```
 commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130235,865,<2176,8>,<2195,43>)
```
 commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(8210,292,<302,8>,<313,32>)
```
 row.setNodesChanged();

        node.iParent = n == null ? NO_POS
                                 : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nParent = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(9496,286,<355,8>,<366,32>)
```
 row.setNodesChanged();

        node.iLeft = n == null ? NO_POS
                               : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nLeft = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java|(10235,289,<385,8>,<396,32>)
```
 row.setNodesChanged();

        node.iRight = n == null ? NO_POS
                                : n.getPos();

        if (n != null && !n.isInMemory()) {
            n = findNode(store, n.getPos());
        }

        node.nRight = (NodeAVLDiskLarge) n;

        row.keepInMemory(false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(37538,231,<1070,12>,<1077,33>)
```
 if (updateExpressions.size() != 0) {
                throw Error.error(ErrorCode.X_42547);
            }

            read();
            readThis(Tokens.THEN);
            readThis(Tokens.UPDATE);
            readThis(Tokens.SET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDML.java|(37968,235,<1081,12>,<1088,36>)
```
 if (insertExpressions.size() != 0) {
                throw Error.error(ErrorCode.X_42548);
            }

            read();
            readThis(Tokens.MATCHED);
            readThis(Tokens.THEN);
            readThis(Tokens.INSERT);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(3930,247,<99,12>,<102,65>)
```
 schema.typeLookup.add(TypeInvariants.CARDINAL_NUMBER);
            schema.typeLookup.add(TypeInvariants.YES_OR_NO);
            schema.typeLookup.add(TypeInvariants.CHARACTER_DATA);
            schema.typeLookup.add(TypeInvariants.SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(3997,242,<100,12>,<103,61>)
```
 schema.typeLookup.add(TypeInvariants.YES_OR_NO);
            schema.typeLookup.add(TypeInvariants.CHARACTER_DATA);
            schema.typeLookup.add(TypeInvariants.SQL_IDENTIFIER);
            schema.typeLookup.add(TypeInvariants.TIME_STAMP);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(12105,636,<327,8>,<338,40>)
```
 System.out.println("\n--------------------");
        System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/JDBCBench.java|(11851,636,<336,8>,<347,40>)
```
 System.out.println("\n--------------------");
        System.out.println("Time to execute " + transaction_count
                           + " transactions: " + completion_time
                           + " seconds.");
        System.out.println("Max/Min memory usage: "
                           + (MemoryWatcher.max / 1024) + " / "
                           + (MemoryWatcher.min / 1024) + " kb");
        System.out.println(failed_transactions + " / " + transaction_count
                           + " failed to complete.");

        double rate = (transaction_count - failed_transactions)
                      / completion_time;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(34921,403,<1194,54>,<1206,5>)
```
 {

        NodeAVL node = findNode(session, store, rowdata, colIndex,
                                colIndex.length, OpTypes.EQUAL,
                                TransactionManager.ACTION_READ, false);

        if (node == null) {
            return emptyIterator;
        }

        return new IndexRowIterator(session, store, this, node, 0, false,
                                    false);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVL.java|(35797,405,<1219,71>,<1231,5>)
```
 {

        NodeAVL node = findNode(session, store, rowdata, rowColMap,
                                rowColMap.length, OpTypes.EQUAL,
                                TransactionManager.ACTION_READ, false);

        if (node == null) {
            return emptyIterator;
        }

        return new IndexRowIterator(session, store, this, node, 0, false,
                                    false);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(67706,485,<2298,46>,<2313,17>)
```
 {
                    set = schema.procedureLookup;

                    RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);

                    object = routine;

                    Routine[] specifics = routine.getSpecificRoutines();

                    for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }

                    break;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(68237,484,<2314,45>,<2329,17>)
```
 {
                    set = schema.functionLookup;

                    RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);

                    object = routine;

                    Routine[] specifics = routine.getSpecificRoutines();

                    for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }

                    break;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(4561,309,<118,4>,<132,5>)
```
 public String getDefinition() {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BitType.java|(3222,309,<93,4>,<107,5>)
```
 public String getDefinition() {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/CharacterType.java|(5001,309,<165,4>,<179,5>)
```
 public String getDefinition() {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59149,283,<1810,8>,<1815,45>)
```
 sb.append(database.sqlEnforceRefs ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_SIZE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59441,284,<1816,8>,<1821,46>)
```
 sb.append(database.sqlEnforceSize ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TYPES).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59734,284,<1822,8>,<1827,44>)
```
 sb.append(database.sqlEnforceTypes ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60075,282,<1829,8>,<1834,44>)
```
 sb.append(database.sqlEnforceTDCD ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60791,292,<1843,8>,<1848,52>)
```
 sb.append(database.sqlTranslateTTI ? Tokens.T_TRUE
                                           : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONCAT_WORD).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62313,286,<1878,8>,<1883,48>)
```
 sb.append(database.sqlUniqueNulls ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_CONVERT).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(62658,290,<1885,8>,<1890,44>)
```
 sb.append(database.sqlConvertTruncate ? Tokens.T_TRUE
                                              : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_AVG).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(70375,296,<1644,8>,<1655,32>)
```
 int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(73489,296,<1719,8>,<1730,32>)
```
 int i = parameterIndex - 1;

        if (x == null) {
            parameterValues[i] = null;
            parameterSet[i]    = Boolean.TRUE;

            return;
        }

        Type     outType    = parameterTypes[i];
        long     millis     = x.getTime();
        int      zoneOffset = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(71345,273,<1717,20>,<1720,67>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[procedure_name]   = routine.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53861,524,<1749,8>,<1767,25>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.WHILE, label);

        statement.setStatements(statements);
        statement.setCondition(condition);

        return statement;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55050,525,<1791,8>,<1809,25>)
```
 if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }

        StatementCompound statement =
            new StatementCompound(StatementTypes.REPEAT, label);

        statement.setStatements(statements);
        statement.setCondition(condition);

        return statement;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(53670,496,<1741,8>,<1759,9>)
```
 readThis(Tokens.DO);

        Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.WHILE);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(55722,497,<1815,8>,<1833,9>)
```
 readThis(Tokens.LOOP);

        Statement[] statements = compileSQLProcedureStatementList(routine,
            context);

        readThis(Tokens.END);
        readThis(Tokens.LOOP);

        if (isSimpleName() && !isReservedKey()) {
            if (label == null) {
                throw unexpectedToken();
            }

            if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }

            read();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(6622,355,<227,4>,<237,5>)
```
 public void setBytes(SessionInterface session, long pos, BlobData b,
                         long offset, long length) {

        if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        byte[] bytes = b.getBytes(session, offset, (int) length);

        setBytes(session, pos, bytes, 0, bytes.length);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryData.java|(6425,355,<199,4>,<209,5>)
```
 public void setBytes(SessionInterface session, long pos, BlobData b,
                         long offset, long length) {

        if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        byte[] bytes = b.getBytes(session, offset, (int) length);

        setBytes(session, pos, bytes, 0, bytes.length);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(58635,383,<1798,39>,<1806,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_REGULAR).append(' ');
            sb.append(Tokens.T_NAMES).append(' ');
            sb.append(database.sqlRegularNames ? Tokens.T_TRUE
                                               : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64304,374,<1923,35>,<1931,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_DB2).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(64715,374,<1933,35>,<1941,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MSS).append(' ');
            sb.append(database.sqlSyntaxMss ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(65126,374,<1943,35>,<1951,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_MYS).append(' ');
            sb.append(database.sqlSyntaxMys ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(65537,374,<1953,35>,<1961,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_ORA).append(' ');
            sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(65948,374,<1963,35>,<1971,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_SYNTAX).append(' ');
            sb.append(Tokens.T_PGS).append(' ');
            sb.append(database.sqlSyntaxPgs ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(120370,800,<2921,12>,<2934,36>)
```
 t = createBlankTable(sysTableHsqlNames[COLUMN_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_PRIVILEGES].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(1907,393,<48,8>,<53,64>)
```
 //suite.addTestSuite(org.hsqldb.test.TestHTTPKeepAlive.class);
        suite.addTestSuite(org.hsqldb.test.TestBatchExecution.class);
        suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2048,317,<50,8>,<54,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug1191815.class);
        suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2114,323,<51,8>,<55,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug778213.class);
        suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2179,322,<52,8>,<56,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug785429.class);
        suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2244,367,<53,8>,<58,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestBug808460.class);
        suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2309,378,<54,8>,<59,75>)
```
 suite.addTestSuite(org.hsqldb.test.TestCollation.class);
        suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2374,408,<55,8>,<61,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestDatabaseMetaData.class);
        suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2446,396,<56,8>,<62,59>)
```
 suite.addTestSuite(org.hsqldb.test.TestDateTime.class);
        suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2510,393,<57,8>,<63,60>)
```
 suite.addTestSuite(org.hsqldb.test
            .TestINPredicateParameterizationAndCorrelation.class);
        suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2620,350,<59,8>,<64,66>)
```
 suite.addTestSuite(org.hsqldb.test.TestJDBCGeneratedColumns.class);
        suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2696,333,<60,8>,<65,58>)
```
 suite.addTestSuite(
            org.hsqldb.test.TestLikePredicateOptimizations.class);
        suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2791,309,<62,8>,<66,70>)
```
 suite.addTestSuite(org.hsqldb.test.TestLobs.class);
        suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2851,314,<63,8>,<67,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestMerge.class);
        suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2912,319,<64,8>,<68,65>)
```
 suite.addTestSuite(org.hsqldb.test.TestMultiInsert.class);
        suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(2979,321,<65,8>,<69,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestSql.class);
        suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3038,334,<66,8>,<70,71>)
```
 suite.addTestSuite(org.hsqldb.test.TestStoredProcedure.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3109,338,<67,8>,<71,74>)
```
 suite.addTestSuite(org.hsqldb.test.TestTextTable.class);
        suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3174,337,<68,8>,<72,63>)
```
 suite.addTestSuite(org.hsqldb.test.TestTextTables.class);
        suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3240,381,<69,8>,<75,69>)
```
 suite.addTestSuite(org.hsqldb.test.TestViewAsterisks.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3309,386,<70,8>,<76,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestUpdatableResults.class);
        suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3381,388,<71,8>,<77,73>)
```
 suite.addTestSuite(org.hsqldb.test.TestUpdatableResultSets.class);
        suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3456,378,<72,8>,<78,64>)
```
 suite.addTestSuite(org.hsqldb.test.TestTriggers.class);

        // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3521,376,<74,8>,<79,62>)
```
 // Suites that extend TestCase
        suite.addTestSuite(org.hsqldb.test.TestJDBCSavepoints.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3630,336,<76,8>,<80,68>)
```
 suite.addTestSuite(org.hsqldb.test.TestPreparedStatements.class);
        suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/AllTests.java|(3704,397,<77,8>,<81,134>)
```
 suite.addTestSuite(org.hsqldb.test.TestPreparedSubQueries.class);
        suite.addTestSuite(org.hsqldb.test.TestSubselect.class);
        suite.addTestSuite(org.hsqldb.test.TestCascade.class);
        suite.addTestSuite(org.hsqldb.test.TestGroupByHaving.class);
        suite.addTestSuite(org.hsqldb.test.TestSqlPersistent.class);     // Sometimes hangs on Connection.close after SHUTDOWN problem
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(53834,183,<1658,8>,<1662,9>)
```
 if (ta[1].isIntervalType()) {
            a[1] = commonType.add(session, a[0], a[1], ta[1]);
        } else {
            a[1] = commonType.castToType(session, a[1], ta[1]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(54027,183,<1664,8>,<1668,9>)
```
 if (tb[1].isIntervalType()) {
            b[1] = commonType.add(session, b[0], b[1], tb[1]);
        } else {
            b[1] = commonType.castToType(session, b[1], tb[1]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(61292,406,<1854,8>,<1862,9>)
```
 if (!database.sqlNullsFirst) {
            sb.setLength(0);
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_NULLS).append(' ');
            sb.append(Tokens.T_FIRST).append(' ');
            sb.append(database.sqlNullsFirst ? Tokens.T_TRUE
                                             : Tokens.T_FALSE);
            list.add(sb.toString());
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(61708,406,<1864,8>,<1872,9>)
```
 if (!database.sqlNullsOrder) {
            sb.setLength(0);
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_NULLS).append(' ');
            sb.append(Tokens.T_ORDER).append(' ');
            sb.append(database.sqlNullsOrder ? Tokens.T_TRUE
                                             : Tokens.T_FALSE);
            list.add(sb.toString());
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(32437,1070,<820,28>,<840,62>)
```
 rowNum++;

                            Object[] rowData = navigator.getCurrent();

                            // Row.getData().  Don't know why *Data.getCurrent()
                            //                 method returns Object instead of O[].
                            //  TODO:  Remove the assertion here:
                            if (rowData == null) {
                                throw new RecoverableOdbcFailure("Null row?");
                            }

                            if (rowData.length < columnCount) {
                                throw new RecoverableOdbcFailure(
                                    "Data element mismatch. " + columnCount
                                    + " metadata cols, yet " + rowData.length
                                    + " data elements for row " + rowNum);
                            }

                            //server.printWithThread("Row " + rowNum + " has "
                            //+ rowData.length + " elements");
                            outPacket.writeShort(columnCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConnection.java|(55440,777,<1330,24>,<1347,55>)
```
 rowNum++;

                        Object[] rowData = navigator.getCurrent();

                        if (rowData == null) {
                            throw new RecoverableOdbcFailure("Null row?");
                        }

                        if (rowData.length < colCount) {
                            throw new RecoverableOdbcFailure(
                                "Data element mismatch. " + colCount
                                + " metadata cols, yet " + rowData.length
                                + " data elements for row " + rowNum);
                        }

                        //server.printWithThread("Row " + rowNum + " has "
                        //+ rowData.length + " elements");
                        outPacket.writeShort(colCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(93832,480,<2994,16>,<3006,48>)
```
 read();

                if (constName == null) {
                    constName = database.nameManager.newAutoName("CT",
                            schemaObject.getSchemaName(),
                            schemaObject.getName(), SchemaObject.CONSTRAINT);
                }

                Constraint c =
                    new Constraint(constName, null,
                                   SchemaObject.ConstraintTypes.CHECK);

                readCheckConstraintCondition(c);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(97796,502,<3118,20>,<3130,52>)
```
 read();

                    if (constName == null) {
                        constName = database.nameManager.newAutoName("CT",
                                table.getSchemaName(), table.getName(),
                                SchemaObject.CONSTRAINT);
                    }

                    Constraint c =
                        new Constraint(constName, null,
                                       SchemaObject.ConstraintTypes.CHECK);

                    readCheckConstraintCondition(c);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(225841,197,<5956,12>,<5960,41>)
```
 row[module_catalog]   = null;
            row[module_schema]    = null;
            row[module_name]      = null;
            row[udt_catalog]      = null;
            row[udt_schema]       = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(225883,197,<5957,12>,<5961,41>)
```
 row[module_schema]    = null;
            row[module_name]      = null;
            row[udt_catalog]      = null;
            row[udt_schema]       = null;
            row[udt_name]         = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(229557,197,<6034,12>,<6038,41>)
```
 row[type_udt_catalog] = null;
            row[type_udt_schema]  = null;
            row[type_udt_name]    = null;
            row[scope_catalog]    = null;
            row[scope_schema]     = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(229599,197,<6035,12>,<6039,41>)
```
 row[type_udt_schema]  = null;
            row[type_udt_name]    = null;
            row[scope_catalog]    = null;
            row[scope_schema]     = null;
            row[scope_name]       = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232073,307,<6074,12>,<6078,63>)
```
 row[is_udt_dependent]                       = null;
            row[result_cast_from_data_type]             = null;
            row[result_cast_as_locator]                 = null;
            row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232137,307,<6075,12>,<6079,63>)
```
 row[result_cast_from_data_type]             = null;
            row[result_cast_as_locator]                 = null;
            row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232201,307,<6076,12>,<6080,63>)
```
 row[result_cast_as_locator]                 = null;
            row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232265,307,<6077,12>,<6081,63>)
```
 row[result_cast_char_max_length]            = null;
            row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232329,307,<6078,12>,<6082,63>)
```
 row[result_cast_char_octet_length]          = null;
            row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232393,307,<6079,12>,<6083,63>)
```
 row[result_cast_char_set_catalog]           = null;
            row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232457,307,<6080,12>,<6084,63>)
```
 row[result_cast_char_set_schema]            = null;
            row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232521,307,<6081,12>,<6085,63>)
```
 row[result_cast_character_set_name]         = null;
            row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232585,307,<6082,12>,<6086,63>)
```
 row[result_cast_collation_catalog]          = null;
            row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232649,307,<6083,12>,<6087,63>)
```
 row[result_cast_collation_schema]           = null;
            row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232713,307,<6084,12>,<6088,63>)
```
 row[result_cast_collation_name]             = null;
            row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232777,307,<6085,12>,<6089,63>)
```
 row[result_cast_numeric_precision]          = null;
            row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232841,307,<6086,12>,<6090,63>)
```
 row[result_cast_numeric_radix]              = null;
            row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232905,307,<6087,12>,<6091,63>)
```
 row[result_cast_numeric_scale]              = null;
            row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(232969,307,<6088,12>,<6092,63>)
```
 row[result_cast_datetime_precision]         = null;
            row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233033,307,<6089,12>,<6093,63>)
```
 row[result_cast_interval_type]              = null;
            row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233097,307,<6090,12>,<6094,63>)
```
 row[result_cast_interval_precision]         = null;
            row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233161,307,<6091,12>,<6095,63>)
```
 row[result_cast_type_udt_catalog]           = null;
            row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233225,307,<6092,12>,<6096,63>)
```
 row[result_cast_type_udt_schema]            = null;
            row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
            row[result_cast_scope_name]                 = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233289,307,<6093,12>,<6097,63>)
```
 row[result_cast_type_udt_name]              = null;
            row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
            row[result_cast_scope_name]                 = null;
            row[result_cast_max_cardinality]            = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(233353,307,<6094,12>,<6098,63>)
```
 row[result_cast_scope_catalog]              = null;
            row[result_cast_scope_schema]               = null;
            row[result_cast_scope_name]                 = null;
            row[result_cast_max_cardinality]            = null;
            row[result_cast_dtd_identifier]             = null;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(145173,257,<3539,12>,<3543,53>)
```
 row[self_referencing_column_name] = null;
            row[reference_generation]         = null;
            row[user_defined_type_catalog]    = null;
            row[user_defined_type_schema]     = null;
            row[user_defined_type_name]       = null;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(127093,444,<4005,8>,<4015,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_TYPE_IDENTITY, table, column, type,
            sequence
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(130394,463,<4108,8>,<4118,57>)
```
 String         sql      = getLastPart();
        Object[]       args     = new Object[] {
            StatementTypes.ALTER_COLUMN_SEQUENCE, table, column, colIndex,
            sequence
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(55419,222,<1719,8>,<1725,42>)
```
 cal.setTimeInMillis(s1);

        int lastDay1;
        int months1 = cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;
        int day1    = cal.get(Calendar.DAY_OF_MONTH);

        cal.set(Calendar.DAY_OF_MONTH, 1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/DateTimeType.java|(55914,222,<1738,8>,<1744,42>)
```
 cal.setTimeInMillis(s2);

        int lastDay2;
        int months2 = cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;
        int day2    = cal.get(Calendar.DAY_OF_MONTH);

        cal.set(Calendar.DAY_OF_MONTH, 1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(18913,266,<578,8>,<584,18>)
```
 Object[] args = new Object[]{ routine };
        String   sql  = getLastPart();
        StatementSchema cs = new StatementSchema(sql,
            StatementTypes.ALTER_ROUTINE, args, null,
            database.schemaManager.getCatalogNameArray());

        return cs;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(21241,267,<661,8>,<667,18>)
```
 Object[] args = new Object[]{ routine };
        String   sql  = getLastPart();
        StatementSchema cs = new StatementSchema(sql,
            StatementTypes.CREATE_ROUTINE, args, null,
            database.schemaManager.getCatalogNameArray());

        return cs;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(9264,252,<250,8>,<259,32>)
```
 if (source == null || pattern == null || pattern.length == 0) {
            return -1;
        }

        //
        final int sourceLength  = source.length;
        final int patternLength = pattern.length;

        //
        int sourceIndex = start;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java|(11311,237,<323,8>,<329,40>)
```
 if (source == null || pattern == null || pattern.length == 0) {
            return -1;
        }

        final int sourceLength  = source.length;
        final int patternLength = pattern.length;
        int       sourceIndex   = start;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/WebServerConnection.java|(12643,331,<334,12>,<340,47>)
```
 long            sessionID  = dataIn.readLong();
            int             mode       = dataIn.readByte();
            Session session = DatabaseManager.getSession(databaseID,
                sessionID);
            Result resultIn = Result.newResult(session, mode, dataIn, rowIn);

            resultIn.setDatabaseId(databaseID);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/server/Servlet.java|(10004,386,<259,16>,<266,51>)
```
 long sessionID  = inStream.readLong();
                int  mode       = inStream.readByte();
                Session session = DatabaseManager.getSession(databaseID,
                    sessionID);
                Result resultIn = Result.newResult(session, mode, inStream,
                                                   rowIn);

                resultIn.setDatabaseId(databaseID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVLMemory.java|(14190,281,<438,8>,<455,22>)
```
 NodeAVL r = x.nRight;

        if (r != null) {
            x = r;

            NodeAVL l = x.nLeft;

            while (l != null) {
                x = l;
                l = x.nLeft;
            }

            return x;
        }

        NodeAVL ch = x;

        x = x.nParent;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/index/IndexAVLMemory.java|(14726,311,<471,8>,<488,22>)
```
 NodeAVL left = x.nLeft;

        if (left != null) {
            x = left;

            NodeAVL right = x.nRight;

            while (right != null) {
                x     = right;
                right = x.nRight;
            }

            return x;
        }

        NodeAVL ch = x;

        x = x.nParent;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java|(35380,362,<998,4>,<1010,5>)
```
 protected void createFile() throws SQLException {

        try {
            if (!m_file.exists()) {
                FileUtil.getFileUtil().makeParentDirectories(m_file);
                m_file.createNewFile();
            }
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        checkIsFile( /*checkExists*/true);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java|(30015,360,<805,4>,<817,5>)
```
 private void createFile() throws SQLException {

        try {
            if (!m_file.exists()) {
                FileUtil.getFileUtil().makeParentDirectories(m_file);
                m_file.createNewFile();
            }
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }

        checkIsFile( /*checkExists*/true);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(139015,370,<4391,16>,<4403,23>)
```
 read();
                readThis(Tokens.SCHEMA);

                HsqlName schemaName;

                if (token.tokenType == Tokens.DEFAULT) {
                    schemaName = null;
                } else {
                    schemaName = database.schemaManager.getSchemaHsqlName(
                        token.tokenString);
                }

                read();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(23262,358,<812,16>,<824,23>)
```
 read();
                readThis(Tokens.SCHEMA);

                HsqlName schema;

                if (token.tokenType == Tokens.DEFAULT) {
                    schema = null;
                } else {
                    schema = database.schemaManager.getSchemaHsqlName(
                        token.tokenString);
                }

                read();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(128586,954,<2140,8>,<2159,43>)
```
 commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130113,859,<2173,8>,<2192,43>)
```
 commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
        commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(5028,229,<183,67>,<194,5>)
```
 {

        size = in.readInt();

        if (table.length < size) {
            table = new Object[size][];
        }

        for (int i = 0; i < size; i++) {
            table[i] = in.readData(meta.columnTypes);
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java|(5850,248,<215,8>,<223,9>)
```
 baseBlockSize = in.readInt();

        if (table.length < baseBlockSize) {
            table = new Object[baseBlockSize][];
        }

        for (int i = 0; i < baseBlockSize; i++) {
            table[i] = in.readData(meta.columnTypes);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(144696,253,<2489,8>,<2493,44>)
```
 commandSet.put(T_EQUALS, Tokens.EQUALS);
        commandSet.put(T_GREATER, Tokens.GREATER);
        commandSet.put(T_GREATER_EQUALS, Tokens.GREATER_EQUALS);
        commandSet.put(T_LEFTBRACKET, LEFTBRACKET);
        commandSet.put(T_LESS, Tokens.LESS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(145017,253,<2495,8>,<2499,44>)
```
 commandSet.put(T_MINUS, Tokens.MINUS);
        commandSet.put(T_NOT_EQUALS, Tokens.NOT_EQUALS);
        commandSet.put(T_NOT_EQUALS_ALT, Tokens.NOT_EQUALS);
        commandSet.put(T_OPENBRACKET, OPENBRACKET);
        commandSet.put(T_PLUS, Tokens.PLUS);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129152,904,<2152,8>,<2171,39>)
```
 commandSet.put(T_COMPRESSED, COMPRESSED);
        commandSet.put(T_CONDITION_IDENTIFIER, Tokens.CONDITION_IDENTIFIER);
        commandSet.put(T_CONFLICT, CONFLICT);
        commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130616,992,<2185,8>,<2205,35>)
```
 commandSet.put(T_HEADER, HEADER);
        commandSet.put(T_IF, Tokens.IF);
        commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191366,329,<5118,16>,<5122,67>)
```
 row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.parent.schema.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(259562,343,<6838,16>,<6843,66>)
```
 //
                row[trigger_catalog] = database.getCatalogName().name;
                row[trigger_schema]  = trigger.getSchemaName().name;
                row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.parent.schema.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149742,625,<4051,8>,<4064,78>)
```
 // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
        final int position_in_unique_constraint = 8;

        // Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251807,526,<6616,8>,<6629,78>)
```
 // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
        final int table_name         = 6;
        final int is_deferable       = 7;
        final int initially_deferred = 8;

        // initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(210587,418,<5666,8>,<5678,20>)
```
 // column number mappings
        final int specific_catalog = 0;
        final int specific_schema  = 1;
        final int specific_name    = 2;
        final int routine_catalog  = 3;
        final int routine_schema   = 4;
        final int routine_name     = 5;
        final int table_catalog    = 6;
        final int table_schema     = 7;
        final int table_name       = 8;

        //
        Iterator it;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(22069,422,<707,8>,<718,9>)
```
 if (oldTable == core.mainTable) {
            core.mainTable = newTable;

            if (core.mainIndex != null) {
                core.mainIndex =
                    core.mainTable.getIndex(core.mainIndex.getName().name);
                core.mainCols = ArrayUtil.toAdjustedColumnArray(core.mainCols,
                        colIndex, adjust);

                core.mainIndex.setTable(newTable);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Constraint.java|(22501,413,<720,8>,<731,9>)
```
 if (oldTable == core.refTable) {
            core.refTable = newTable;

            if (core.refIndex != null) {
                core.refIndex =
                    core.refTable.getIndex(core.refIndex.getName().name);
                core.refCols = ArrayUtil.toAdjustedColumnArray(core.refCols,
                        colIndex, adjust);

                core.refIndex.setTable(newTable);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206235,424,<5539,12>,<5550,21>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(265514,439,<7012,12>,<7023,21>)
```
 addColumn(t, "SEQUENCE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(210084,335,<5651,12>,<5657,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_TABLE_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269097,352,<7121,12>,<7127,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(315131,464,<8294,12>,<8302,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);    // not null

            // false PK, as VIEW_CATALOG, VIEW_SCHEMA, TABLE_CATALOG, and/or
            // TABLE_SCHEMA may be NULL
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_TABLE_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(183078,309,<4897,12>,<4902,55>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_UDT_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);     // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);     // not null
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(284257,276,<7508,12>,<7513,55>)
```
 t = createBlankTable(sysTableHsqlNames[UDT_PRIVILEGES]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "UDT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "UDT_SCHEMA", SQL_IDENTIFIER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86607,575,<2458,8>,<2478,47>)
```
 // column number mappings
        final int udt_catalog   = 0;
        final int udt_schema    = 1;
        final int udt_name      = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
        final int column_name   = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSubselect.java|(6296,257,<153,12>,<156,67>)
```
 assertTrue("Statement <" + sql + "> returned too many rows.",
                       (rowCount < expected.length));
            assertEquals("Statement <" + sql + "> returned wrong value.",
                         expected[rowCount], results.getString(1));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSubselect.java|(16671,267,<434,12>,<437,72>)
```
 assertTrue("Statement <" + sql + "> returned too many rows.",
                       (rowCount < expectedSizes.length));
            assertEquals("Statement <" + sql + "> returned wrong value.",
                         expectedSizes[rowCount], results.getString(1));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(4915,384,<130,8>,<140,9>)
```
 tempJoinExpressions   = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            tempJoinExpressions[i] = new HsqlArrayList();
        }

        joinExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            joinExpressions[i] = new HsqlArrayList();
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariableResolver.java|(5117,376,<136,8>,<146,9>)
```
 joinExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            joinExpressions[i] = new HsqlArrayList();
        }

        whereExpressions = new HsqlArrayList[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            whereExpressions[i] = new HsqlArrayList();
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(6303,464,<206,8>,<217,47>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }

        Object removedObj = elementData[index];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(7163,465,<237,8>,<248,48>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }

        Object replacedObj = elementData[index];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(16206,498,<481,4>,<500,5>)
```
 /**
     *  Return the type code for operation tokens
     */
    static int getOperationType(int token) {

        switch (token) {

            case Tokens.INSERT :
                return StatementTypes.INSERT;

            case Tokens.DELETE :
                return StatementTypes.DELETE_WHERE;

            case Tokens.UPDATE :
                return StatementTypes.UPDATE_WHERE;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "TriggerDef");
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(16710,401,<502,4>,<518,5>)
```
 static int getTiming(int token) {

        switch (token) {

            case Tokens.BEFORE :
                return TriggerDef.BEFORE;

            case Tokens.AFTER :
                return TriggerDef.AFTER;

            case Tokens.INSTEAD :
                return TriggerDef.INSTEAD;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, "TriggerDef");
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(144992,439,<3914,12>,<3924,22>)
```
 addColumn(t, "JAR_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "JAR_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JAR_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(199194,443,<5330,12>,<5340,22>)
```
 addColumn(t, "JAR_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "JAR_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19773,306,<550,12>,<558,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(22752,293,<644,12>,<652,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COMMENTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(78545,297,<2211,12>,<2219,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(114141,298,<3125,12>,<3133,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DATA_TYPE_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(284714,292,<7518,12>,<7526,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[UDT_PRIVILEGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(24238,283,<690,8>,<696,9>)
```
 // populate insert and update lists
        RangeIterator[] rangeIterators =
            new RangeIterator[joinRangeIterators.length];

        for (int i = 0; i < joinRangeIterators.length; i++) {
            rangeIterators[i] = joinRangeIterators[i].getIterator(session);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QuerySpecification.java|(48296,227,<1480,8>,<1485,9>)
```
 RangeIterator[] rangeIterators =
            new RangeIterator[rangeVariables.length];

        for (int i = 0; i < rangeVariables.length; i++) {
            rangeIterators[i] = rangeVariables[i].getIterator(session);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/RAFile.java|(14725,368,<487,4>,<500,5>)
```
 /**
     * uses 2**scale form and returns a multipe of this that is larger or equal to value
     */
    static long getBinaryNormalisedCeiling(long value, int scale) {

        long mask    = 0xffffffffffffffffl << scale;
        long newSize = value & mask;

        if (newSize != value) {
            newSize += 1 << scale;
        }

        return newSize;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(44914,375,<1671,4>,<1684,5>)
```
 /**
     * uses 2**scale form and returns a multipe of this that is larger or equal to value
     */
    public static long getBinaryNormalisedCeiling(long value, int scale) {

        long mask    = 0xffffffffffffffffl << scale;
        long newSize = value & mask;

        if (newSize != value) {
            newSize += 1 << scale;
        }

        return newSize;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82280,448,<2326,12>,<2337,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(86142,445,<2444,12>,<2455,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_UDT_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(257952,451,<6785,12>,<6796,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);     // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(306750,415,<8046,12>,<8057,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[VIEW_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(242057,394,<6333,12>,<6341,70>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PACKAGES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(243267,375,<6372,12>,<6379,70>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_PARTS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(93247,1521,<2610,8>,<2639,50>)
```
 final int interval_type              = 14;
        final int interval_precision         = 15;
        final int character_set_catalog      = 16;
        final int character_set_schema       = 17;
        final int character_set_name         = 18;
        final int collation_catalog          = 19;
        final int collation_schema           = 20;
        final int collation_name             = 21;
        final int domain_catalog             = 22;
        final int domain_schema              = 23;
        final int domain_name                = 24;
        final int udt_catalog                = 25;
        final int udt_schema                 = 26;
        final int udt_name                   = 27;
        final int scope_catalog              = 28;
        final int scope_schema               = 29;
        final int scope_name                 = 30;
        final int maximum_cardinality        = 31;
        final int dtd_identifier             = 32;
        final int is_self_referencing        = 33;
        final int is_identity                = 34;
        final int identity_generation        = 35;
        final int identity_start             = 36;
        final int identity_increment         = 37;
        final int identity_maximum           = 38;
        final int identity_minimum           = 39;
        final int identity_cycle             = 40;
        final int is_generated               = 41;
        final int generation_expression      = 42;
        final int is_updatable               = 43;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219938,1881,<5850,8>,<5879,62>)
```
 final int character_maximum_length               = 14;
        final int character_octet_length                 = 15;
        final int character_set_catalog                  = 16;
        final int character_set_schema                   = 17;
        final int character_set_name                     = 18;
        final int collation_catalog                      = 19;
        final int collation_schema                       = 20;
        final int collation_name                         = 21;
        final int numeric_precision                      = 22;
        final int numeric_precision_radix                = 23;
        final int numeric_scale                          = 24;
        final int datetime_precision                     = 25;
        final int interval_type                          = 26;
        final int interval_precision                     = 27;
        final int type_udt_catalog                       = 28;
        final int type_udt_schema                        = 29;
        final int type_udt_name                          = 30;
        final int scope_catalog                          = 31;
        final int scope_schema                           = 32;
        final int scope_name                             = 33;
        final int maximum_cardinality                    = 34;
        final int dtd_identifier                         = 35;
        final int routine_body                           = 36;
        final int routine_definition                     = 37;
        final int external_name                          = 38;
        final int external_language                      = 39;
        final int parameter_style                        = 40;
        final int is_deterministic                       = 41;
        final int sql_data_access                        = 42;
        final int is_null_call                           = 43;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestObjectSize.java|(2236,211,<59,8>,<62,54>)
```
 Object[] objectArray2 = new Object[testCount];
        Object[] objectArray3 = new Object[testCount];
        Object[] objectArray4 = new Object[testCount];
        Object[] objectArray5 = new Object[testCount];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestObjectSize.java|(2291,211,<60,8>,<63,54>)
```
 Object[] objectArray3 = new Object[testCount];
        Object[] objectArray4 = new Object[testCount];
        Object[] objectArray5 = new Object[testCount];
        Object[] objectArray6 = new Object[testCount];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191438,318,<5119,16>,<5123,60>)
```
 row[routine_schema]   = routine.getSchemaName().name;
                row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.parent.schema.name;
                row[table_name]       = refName.parent.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(259652,313,<6840,16>,<6844,59>)
```
 row[trigger_schema]  = trigger.getSchemaName().name;
                row[trigger_name]    = trigger.getName().name;
                row[table_catalog]   = database.getCatalogName().name;
                row[table_schema]    = refName.parent.schema.name;
                row[table_name]      = refName.parent.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23828,331,<686,16>,<693,56>)
```
 if (column.getName().comment == null) {
                    continue;
                }

                row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
                row[name]        = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25418,309,<730,12>,<737,53>)
```
 if (object.getName().comment == null) {
                continue;
            }

            row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40403,504,<1123,12>,<1138,13>)
```
 if (s.waitingSessions.size() > 0) {
                StringBuffer sb    = new StringBuffer();
                Session[]    array = new Session[s.waitingSessions.size()];

                s.waitingSessions.toArray(array);

                for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }

                row[it_waiting] = sb.toString();
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40921,500,<1140,12>,<1155,13>)
```
 if (s.waitedSessions.size() > 0) {
                StringBuffer sb    = new StringBuffer();
                Session[]    array = new Session[s.waitedSessions.size()];

                s.waitedSessions.toArray(array);

                for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }

                row[it_waited] = sb.toString();
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(104194,369,<2863,12>,<2869,36>)
```
 addColumn(t, "CONSTRAINT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CONSTRAINT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CONSTRAINT_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CONSTRAINT_COLUMN_USAGE].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(111583,368,<3052,12>,<3058,36>)
```
 addColumn(t, "CONSTRAINT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "CONSTRAINT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "CONSTRAINT_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CONSTRAINT_TABLE_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(87630,353,<2494,16>,<2501,57>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                = t.getEmptyRowData();
                row[udt_catalog]   = database.getCatalogName().name;
                row[udt_schema]    = type.getSchemaName().name;
                row[udt_name]      = type.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/ArrayUtil.java|(44178,257,<1640,8>,<1647,9>)
```
 for (int i = 0; i < length; i++) {
            if (a[i] == b[i]) {
                continue;
            }

            return (((int) a[i]) & 0xff) > (((int) b[i]) & 0xff) ? 1
                                                                 : -1;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(10509,274,<317,12>,<325,13>)
```
 for (int i = 0; i < length; i++) {
                if (data1[i] == data2[i]) {
                    continue;
                }

                return (((int) data1[i]) & 0xff) > (((int) data2[i]) & 0xff)
                       ? 1
                       : -1;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(15515,357,<443,16>,<454,17>)
```
 f.show();

                String sFileName = f.getFile();
                String Path      = f.getDirectory();

                if ((sFileName == null) || (sFileName.equals(""))) {
                    exit();

                    return;
                } else {
                    sourceDb = new TransferSQLText(Path + sFileName, this);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/Transfer.java|(16446,357,<472,16>,<483,17>)
```
 f.show();

                String sFileName = f.getFile();
                String Path      = f.getDirectory();

                if ((sFileName == null) || (sFileName.equals(""))) {
                    exit();

                    return;
                } else {
                    targetDb = new TransferSQLText(Path + sFileName, this);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(2660,502,<66,12>,<76,49>)
```
 if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(largeBlock, blockOffset * lobBlockSize,
                             dataBytes, dataBlockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
            dataBlockOffset += currentBlockCount;
            blockCount      -= currentBlockCount;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(3809,502,<98,12>,<108,49>)
```
 if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(dataBytes, dataBlockOffset * lobBlockSize,
                             largeBlock, blockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);

            blockAddress    += currentBlockCount;
            dataBlockOffset += currentBlockCount;
            blockCount      -= currentBlockCount;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(19912,235,<464,12>,<472,13>)
```
 if (x == null) {
                return null;
            }

            long length = x.length(session);

            if (length > Integer.MAX_VALUE) {
                JDBCUtil.throwError(Error.error(ErrorCode.X_42561));
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(33125,235,<788,12>,<796,13>)
```
 if (x == null) {
                return null;
            }

            long length = x.length(session);

            if (length > Integer.MAX_VALUE) {
                JDBCUtil.throwError(Error.error(ErrorCode.X_42561));
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(10546,304,<326,16>,<334,62>)
```
 if (index == -1) {
                    throw Error.error(ErrorCode.X_42501);
                }

                if (!leftQueryExpression.accessibleColumns[index]) {
                    throw Error.error(ErrorCode.X_42578);
                }

                leftQueryExpression.unionColumnMap[i] = index;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/QueryExpression.java|(10926,306,<337,16>,<345,63>)
```
 if (index == -1) {
                    throw Error.error(ErrorCode.X_42501);
                }

                if (!rightQueryExpression.accessibleColumns[index]) {
                    throw Error.error(ErrorCode.X_42578);
                }

                rightQueryExpression.unionColumnMap[i] = index;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQLInvoked.java|(8813,148,<291,8>,<297,33>)
```
 Object[] array = (Object[]) currValue;

        if (array == null) {
            array = new Object[3];
        }

        array[0] = Boolean.FALSE;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQLInvoked.java|(9118,147,<306,8>,<312,32>)
```
 Object[] array = (Object[]) currValue;

        if (array == null) {
            array = new Object[3];
        }

        array[0] = Boolean.TRUE;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(147866,611,<2579,11>,<2590,5>)
```
 {
        sqlTSILookup.put(SQL_TSI_DAY, T_SQL_TSI_DAY);
        sqlTSILookup.put(SQL_TSI_FRAC_SECOND, T_SQL_TSI_FRAC_SECOND);
        sqlTSILookup.put(SQL_TSI_MILLI_SECOND, T_SQL_TSI_MILLI_SECOND);
        sqlTSILookup.put(SQL_TSI_HOUR, T_SQL_TSI_HOUR);
        sqlTSILookup.put(SQL_TSI_MINUTE, T_SQL_TSI_MINUTE);
        sqlTSILookup.put(SQL_TSI_MONTH, T_SQL_TSI_MONTH);
        sqlTSILookup.put(SQL_TSI_QUARTER, T_SQL_TSI_QUARTER);
        sqlTSILookup.put(SQL_TSI_SECOND, T_SQL_TSI_SECOND);
        sqlTSILookup.put(SQL_TSI_WEEK, T_SQL_TSI_WEEK);
        sqlTSILookup.put(SQL_TSI_YEAR, T_SQL_TSI_YEAR);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127680,417,<2119,8>,<2128,41>)
```
 commandSet.put(T_ACTION, ACTION);
        commandSet.put(T_ADD, ADD);
        commandSet.put(T_ADMIN, ADMIN);
        commandSet.put(T_AFTER, AFTER);
        commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127758,437,<2121,8>,<2130,55>)
```
 commandSet.put(T_ADMIN, ADMIN);
        commandSet.put(T_AFTER, AFTER);
        commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127838,447,<2123,8>,<2132,35>)
```
 commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(127920,449,<2125,8>,<2134,45>)
```
 commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128014,433,<2127,8>,<2136,39>)
```
 commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128106,427,<2129,8>,<2138,43>)
```
 commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128204,433,<2131,8>,<2140,59>)
```
 commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128294,443,<2133,8>,<2142,49>)
```
 commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128378,449,<2135,8>,<2144,47>)
```
 commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128456,459,<2137,8>,<2146,47>)
```
 commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128542,465,<2139,8>,<2148,47>)
```
 commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128646,453,<2141,8>,<2150,47>)
```
 commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(128746,447,<2143,8>,<2152,49>)
```
 commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129325,435,<2155,8>,<2164,45>)
```
 commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129417,425,<2157,8>,<2166,39>)
```
 commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129505,427,<2159,8>,<2168,51>)
```
 commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129593,423,<2161,8>,<2170,41>)
```
 commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129677,427,<2163,8>,<2172,47>)
```
 commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129769,417,<2165,8>,<2174,37>)
```
 commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129851,415,<2167,8>,<2176,39>)
```
 commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(129941,407,<2169,8>,<2178,41>)
```
 commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130025,402,<2171,8>,<2180,38>)
```
 commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130113,396,<2173,8>,<2182,47>)
```
 commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130195,412,<2175,8>,<2184,53>)
```
 commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130699,449,<2187,8>,<2196,47>)
```
 commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130801,451,<2189,8>,<2198,47>)
```
 commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130897,530,<2191,8>,<2201,51>)
```
 commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130981,552,<2193,8>,<2203,37>)
```
 commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131065,543,<2195,8>,<2205,35>)
```
 commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131157,533,<2197,8>,<2207,43>)
```
 commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131261,511,<2199,8>,<2209,39>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131436,420,<2202,8>,<2211,39>)
```
 commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131542,388,<2204,8>,<2213,37>)
```
 commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131617,391,<2206,8>,<2215,37>)
```
 commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131699,401,<2208,8>,<2217,45>)
```
 commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131781,402,<2210,8>,<2219,38>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131865,406,<2212,8>,<2221,43>)
```
 commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131939,420,<2214,8>,<2223,41>)
```
 commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132017,442,<2216,8>,<2225,49>)
```
 commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132109,446,<2218,8>,<2227,53>)
```
 commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132192,459,<2220,8>,<2229,53>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132280,455,<2222,8>,<2231,37>)
```
 commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132368,449,<2224,8>,<2233,43>)
```
 commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132468,425,<2226,8>,<2235,37>)
```
 commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132564,409,<2228,8>,<2237,35>)
```
 commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132660,385,<2230,8>,<2239,35>)
```
 commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132744,383,<2232,8>,<2241,41>)
```
 commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132826,387,<2234,8>,<2243,37>)
```
 commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132902,395,<2236,8>,<2245,41>)
```
 commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132982,393,<2238,8>,<2247,41>)
```
 commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,421,<2240,8>,<2249,49>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133136,414,<2242,8>,<2251,35>)
```
 commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133222,418,<2244,8>,<2253,45>)
```
 commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133306,416,<2246,8>,<2255,37>)
```
 commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133384,428,<2248,8>,<2257,43>)
```
 commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133484,424,<2250,8>,<2259,45>)
```
 commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133559,423,<2252,8>,<2261,37>)
```
 commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133649,431,<2254,8>,<2263,51>)
```
 commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133731,435,<2256,8>,<2265,41>)
```
 commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133821,435,<2258,8>,<2267,39>)
```
 commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133917,429,<2260,8>,<2269,45>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133991,435,<2262,8>,<2271,37>)
```
 commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134089,429,<2264,8>,<2273,47>)
```
 commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134175,425,<2266,8>,<2275,39>)
```
 commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134265,419,<2268,8>,<2277,41>)
```
 commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134355,423,<2270,8>,<2279,47>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134435,439,<2272,8>,<2281,41>)
```
 commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134527,429,<2274,8>,<2283,37>)
```
 commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134609,435,<2276,8>,<2285,41>)
```
 commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134693,431,<2278,8>,<2287,41>)
```
 commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134787,437,<2280,8>,<2289,49>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134883,431,<2282,8>,<2291,45>)
```
 commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134965,447,<2284,8>,<2293,45>)
```
 commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135053,459,<2286,8>,<2295,53>)
```
 commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135133,477,<2288,8>,<2297,51>)
```
 commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135233,475,<2290,8>,<2299,47>)
```
 commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135323,499,<2292,8>,<2301,61>)
```
 commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135421,525,<2294,8>,<2303,59>)
```
 commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135521,521,<2296,8>,<2305,47>)
```
 commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135619,529,<2298,8>,<2307,53>)
```
 commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135717,525,<2300,8>,<2309,47>)
```
 commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135831,515,<2302,8>,<2311,49>)
```
 commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(135955,493,<2304,8>,<2313,55>)
```
 commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136051,505,<2306,8>,<2315,55>)
```
 commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136157,503,<2308,8>,<2317,51>)
```
 commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136251,547,<2310,8>,<2319,69>)
```
 commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136355,555,<2312,8>,<2321,57>)
```
 commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136457,569,<2314,8>,<2323,59>)
```
 commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136565,573,<2316,8>,<2325,53>)
```
 commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136669,571,<2318,8>,<2327,47>)
```
 commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136807,515,<2320,8>,<2329,41>)
```
 commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(136919,478,<2322,8>,<2331,35>)
```
 commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137035,448,<2324,8>,<2333,47>)
```
 commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137147,414,<2326,8>,<2335,39>)
```
 commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137249,434,<2328,8>,<2337,53>)
```
 commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137331,454,<2330,8>,<2339,45>)
```
 commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137406,461,<2332,8>,<2341,35>)
```
 commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137492,493,<2334,8>,<2343,65>)
```
 commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137570,561,<2336,8>,<2345,74>)
```
 commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137692,513,<2338,8>,<2347,37>)
```
 commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137794,503,<2340,8>,<2349,39>)
```
 commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137876,505,<2342,8>,<2351,45>)
```
 commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(137994,469,<2344,8>,<2353,43>)
```
 commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138140,415,<2346,8>,<2355,51>)
```
 commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138214,429,<2348,8>,<2359,37>)
```
 commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138306,435,<2350,8>,<2361,49>)
```
 commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138390,441,<2352,8>,<2363,39>)
```
 commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138472,435,<2354,8>,<2365,37>)
```
 commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138564,425,<2356,8>,<2367,41>)
```
 commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138652,433,<2360,8>,<2369,47>)
```
 commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(138750,417,<2362,8>,<2371,39>)
```
 commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139271,437,<2374,8>,<2383,45>)
```
 commandSet.put(T_CONCAT_WORD, CONCAT_WORD);
        commandSet.put(T_CONCAT_WS, CONCAT_WS);
        commandSet.put(T_CHR, CHR);
        commandSet.put(T_COS, COS);
        commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139371,437,<2376,8>,<2385,53>)
```
 commandSet.put(T_CHR, CHR);
        commandSet.put(T_COS, COS);
        commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139443,469,<2378,8>,<2387,51>)
```
 commandSet.put(T_COT, COT);
        commandSet.put(T_DATABASE_NAME, DATABASE_NAME);
        commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139535,471,<2380,8>,<2389,49>)
```
 commandSet.put(T_DATE_ADD, DATE_ADD);
        commandSet.put(T_DATE_SUB, DATE_SUB);
        commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139627,475,<2382,8>,<2391,47>)
```
 commandSet.put(T_DATEADD, DATEADD);
        commandSet.put(T_DATEDIFF, DATEDIFF);
        commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139717,473,<2384,8>,<2393,49>)
```
 commandSet.put(T_DAY_NAME, DAY_NAME);
        commandSet.put(T_DAY_OF_MONTH, DAY_OF_MONTH);
        commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139817,459,<2386,8>,<2395,43>)
```
 commandSet.put(T_DAY_OF_WEEK, DAY_OF_WEEK);
        commandSet.put(T_DAY_OF_YEAR, DAY_OF_YEAR);
        commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(139921,443,<2388,8>,<2397,37>)
```
 commandSet.put(T_DAYNAME, DAYNAME);
        commandSet.put(T_DAYOFMONTH, DAYOFMONTH);
        commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
        commandSet.put(T_DIFFERENCE, DIFFERENCE);
        commandSet.put(T_DMOD, DMOD);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(140015,439,<2390,8>,<2399,45>)
```
 commandSet.put(T_DAYOFWEEK, DAYOFWEEK);
        commandSet.put(T_DAYOFYEAR, DAYOFYEAR);
        commandSet.put(T_DAYS, DAYS);
        commandSet.put(T_DBTIMEZONE, DBTIMEZONE);
        commandSet.put(T_DECODE, DECODE);
        commandSet.put(T_DEGREES, DEGREES);
        commandSet.put(T_DIFFERENCE, DIFFERENCE);
        commandSet.put(T_DMOD, DMOD);
        commandSet.put(T_FROM_TZ, FROM_TZ);
        commandSet.put(T_GREATEST, GREATEST);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(140654,411,<2404,8>,<2413,49>)
```
 commandSet.put(T_LAST_DAY, LAST_DAY);
        commandSet.put(T_LCASE, LCASE);
        commandSet.put(T_LEAST, LEAST);
        commandSet.put(T_LOAD_FILE, LOAD_FILE);
        commandSet.put(T_LOCATE, LOCATE);
        commandSet.put(T_LOG, LOG);
        commandSet.put(T_LOG10, LOG10);
        commandSet.put(T_LPAD, LPAD);
        commandSet.put(T_LTRIM, LTRIM);
        commandSet.put(T_MONTH_NAME, MONTH_NAME);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(140740,431,<2406,8>,<2415,57>)
```
 commandSet.put(T_LEAST, LEAST);
        commandSet.put(T_LOAD_FILE, LOAD_FILE);
        commandSet.put(T_LOCATE, LOCATE);
        commandSet.put(T_LOG, LOG);
        commandSet.put(T_LOG10, LOG10);
        commandSet.put(T_LPAD, LPAD);
        commandSet.put(T_LTRIM, LTRIM);
        commandSet.put(T_MONTH_NAME, MONTH_NAME);
        commandSet.put(T_MONTHNAME, MONTHNAME);
        commandSet.put(T_MONTHS_BETWEEN, MONTHS_BETWEEN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141485,501,<2422,8>,<2431,73>)
```
 commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141571,503,<2424,8>,<2433,43>)
```
 commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141673,491,<2426,8>,<2435,49>)
```
 commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141755,487,<2428,8>,<2437,39>)
```
 commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141859,495,<2430,8>,<2439,49>)
```
 commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(141995,457,<2432,8>,<2441,37>)
```
 commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142083,455,<2434,8>,<2443,49>)
```
 commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142173,449,<2436,8>,<2445,39>)
```
 commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142251,473,<2438,8>,<2447,59>)
```
 commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142363,459,<2440,8>,<2449,53>)
```
 commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142461,441,<2442,8>,<2451,43>)
```
 commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142547,455,<2444,8>,<2453,55>)
```
 commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142631,475,<2446,8>,<2455,47>)
```
 commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142733,487,<2448,8>,<2457,59>)
```
 commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142831,469,<2450,8>,<2459,39>)
```
 commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(142911,487,<2452,8>,<2461,57>)
```
 commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143011,497,<2454,8>,<2463,47>)
```
 commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143115,483,<2456,8>,<2465,51>)
```
 commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143229,465,<2458,8>,<2467,37>)
```
 commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143309,511,<2460,8>,<2471,59>)
```
 commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143407,567,<2462,8>,<2473,77>)
```
 commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143517,571,<2464,8>,<2475,45>)
```
 commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143607,607,<2466,8>,<2477,63>)
```
 commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);
        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(143703,615,<2468,8>,<2479,41>)
```
 commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);
        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);
        commandSet.put(T_DATABASE_VERSION, DATABASE_VERSION);
        commandSet.put(T_LOB_ID, LOB_ID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(130801,3977,<2189,8>,<2279,47>)
```
 commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131261,3963,<2199,8>,<2289,49>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131781,3927,<2210,8>,<2299,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132192,4050,<2220,8>,<2309,47>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132660,4138,<2230,8>,<2319,69>)
```
 commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,4268,<2240,8>,<2329,41>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133484,4301,<2250,8>,<2339,45>)
```
 commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133917,4380,<2260,8>,<2349,39>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134355,4386,<2270,8>,<2361,49>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134787,4380,<2280,8>,<2371,39>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(276422,1852,<6526,4>,<6562,5>)
```
 /**
     * Updates the designated column with a character stream value.
     * The data will be read from the stream
     * as needed until end-of-stream is reached.  The
     * driver does the necessary conversion from Java character format to
     * the national character set in the database.
     * It is intended for use when
     * updating  <code>NCHAR</code>,<code>NVARCHAR</code>
     * and <code>LONGNVARCHAR</code> columns.
     * <p>
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the <code>updateRow</code> or
     * <code>insertRow</code> methods are called to update the database.
     *
     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
     * it might be more efficient to use a version of
     * <code>updateNCharacterStream</code> which takes a length parameter.
     *
     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
     * @param reader the <code>java.io.Reader</code> object containing
     *        the new column value
     * @exception SQLException if the columnLabel is not valid;
     * if a database access error occurs;
     * the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set
     *  @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since 1.6
     */
    public void updateNCharacterStream(
            String columnLabel, java.io.Reader reader) throws SQLException {

        int columnIndex = findColumn(columnLabel);

        startUpdate(columnIndex);
        preparedStatement.setCharacterStream(columnIndex, reader);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(285468,1580,<6720,4>,<6751,5>)
```
 /**
     * Updates the designated column with a character stream value.
     * The data will be read from the stream
     * as needed until end-of-stream is reached.
     * <p>
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the <code>updateRow</code> or
     * <code>insertRow</code> methods are called to update the database.
     *
     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if
     * it might be more efficient to use a version of
     * <code>updateCharacterStream</code> which takes a length parameter.
     *
     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column
     * @param reader the <code>java.io.Reader</code> object containing
     *        the new column value
     * @exception SQLException if the columnLabel is not valid; if a database access error occurs;
     * the result set concurrency is <code>CONCUR_READ_ONLY</code>
     * or this method is called on a closed result set
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since 1.6
     */
    public void updateCharacterStream(
            String columnLabel, java.io.Reader reader) throws SQLException {

        int columnIndex = findColumn(columnLabel);

        startUpdate(columnIndex);
        preparedStatement.setCharacterStream(columnIndex, reader);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/ScriptRunner.java|(9940,397,<271,10>,<282,9>)
```
 catch (HsqlException e) {

            // stop processing on bad log line
            String error = "statement error processing log " + databaseFile
                           + "line: " + scr.getLineNumber();

            database.logger.logSevereEvent(error, e);

            if (fullReplay) {
                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/ScriptRunner.java|(10680,396,<290,10>,<301,9>)
```
 catch (Throwable e) {

            // stop processing on bad script line
            String error = "statement error processing log " + databaseFile
                           + "line: " + scr.getLineNumber();

            database.logger.logSevereEvent(error, e);

            if (fullReplay) {
                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(116434,242,<3119,16>,<3125,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_INTEGER;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(54597,404,<1500,16>,<1509,17>)
```
 if (nodes[0].dataType == null) {

                    // in 20.6 parameter not allowed as type cannot be determined as binary or char
                    // throw Error.error(ErrorCode.X_42567);
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_NUMERIC;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(10788,431,<345,16>,<355,17>)
```
 if (action.type == ACTION_INSERT) {
                    actiontype = action.type;
                } else if (action.type == ACTION_DELETE) {
                    if (actiontype == ACTION_INSERT) {

                        // ACTION_INSERT + ACTION_DELETE
                        actiontype = ACTION_INSERT_DELETE;
                    } else {
                        actiontype = action.type;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(12129,431,<393,16>,<403,17>)
```
 if (action.type == ACTION_INSERT) {
                    actionType = action.type;
                } else if (action.type == ACTION_DELETE) {
                    if (actionType == ACTION_INSERT) {

                        // ACTION_INSERT + ACTION_DELETE
                        actionType = ACTION_INSERT_DELETE;
                    } else {
                        actionType = action.type;
                    }
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(12956,741,<446,72>,<461,25>)
```
 {
                            NumberSequence seq =
                                session.database.schemaManager.getSequence(
                                    tableName, session.getSchemaName(schema),
                                    false);

                            if (seq != null) {
                                opType     = OpTypes.SEQUENCE_CURRENT;
                                dataType   = seq.getDataType();
                                sequence   = seq;
                                schema     = null;
                                tableName  = null;
                                columnName = null;
                                resolved   = true;
                            }
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionColumn.java|(13744,733,<461,72>,<476,25>)
```
 {
                            NumberSequence seq =
                                session.database.schemaManager.getSequence(
                                    tableName, session.getSchemaName(schema),
                                    false);

                            if (seq != null) {
                                opType     = OpTypes.SEQUENCE;
                                dataType   = seq.getDataType();
                                sequence   = seq;
                                schema     = null;
                                tableName  = null;
                                columnName = null;
                                resolved   = true;
                            }
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(21188,602,<639,4>,<659,5>)
```
 void readSimpleColumnNames(OrderedHashSet columns, RangeVariable rangeVar,
                               boolean withPrefix) {

        while (true) {
            ColumnSchema col = readSimpleColumnName(rangeVar, withPrefix);

            if (!columns.add(col.getName().name)) {
                throw Error.error(ErrorCode.X_42579, col.getName().name);
            }

            if (readIfThis(Tokens.COMMA)) {
                continue;
            }

            if (token.tokenType == Tokens.CLOSEBRACKET) {
                break;
            }

            throw unexpectedToken();
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(23106,588,<707,4>,<727,5>)
```
 void readSimpleColumnNames(OrderedHashSet columns, Table table,
                               boolean withPrefix) {

        while (true) {
            ColumnSchema col = readSimpleColumnName(table, withPrefix);

            if (!columns.add(col.getName().name)) {
                throw Error.error(ErrorCode.X_42577, col.getName().name);
            }

            if (readIfThis(Tokens.COMMA)) {
                continue;
            }

            if (token.tokenType == Tokens.CLOSEBRACKET) {
                break;
            }

            throw unexpectedToken();
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(4442,379,<118,2>,<128,3>)
```
 private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java|(10110,382,<267,2>,<277,3>)
```
 private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(16375,415,<477,37>,<490,13>)
```
 {
                if (database.sqlLongvarIsLob) {
                    typeNumber = Types.SQL_CLOB;
                    length     = ClobType.defaultClobSize;
                } else {
                    typeNumber = Types.SQL_VARCHAR;

                    if (!hasLength) {
                        length = ClobType.defaultShortClobSize;
                    }
                }

                break;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(16830,417,<491,39>,<504,13>)
```
 {
                if (database.sqlLongvarIsLob) {
                    typeNumber = Types.SQL_BLOB;
                    length     = BlobType.defaultBlobSize;
                } else {
                    typeNumber = Types.SQL_VARBINARY;

                    if (!hasLength) {
                        length = BlobType.defaultShortBlobSize;
                    }
                }

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(2457,554,<62,12>,<72,63>)
```
 byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);
            int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(largeBlock, blockOffset * lobBlockSize,
                             dataBytes, dataBlockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobStoreMem.java|(3606,554,<94,12>,<104,63>)
```
 byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);
            int    blockOffset       = blockAddress % blocksInLargeBlock;
            int    currentBlockCount = blockCount;

            if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

            System.arraycopy(dataBytes, dataBlockOffset * lobBlockSize,
                             largeBlock, blockOffset * lobBlockSize,
                             currentBlockCount * lobBlockSize);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131025,4433,<2194,8>,<2294,45>)
```
 commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(131781,4461,<2210,8>,<2309,47>)
```
 commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(132418,4666,<2225,8>,<2324,57>)
```
 commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133054,4731,<2240,8>,<2339,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(133693,4810,<2255,8>,<2354,39>)
```
 commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Tokens.java|(134355,4812,<2270,8>,<2371,39>)
```
 commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(68272,472,<2142,18>,<2151,9>)
```
 {
            if (nodes[LEFT].nodes[LEFT].opType == OpTypes.COLUMN) {
                colExpression    = nodes[LEFT].nodes[LEFT];
                nonColExpression = nodes[LEFT].nodes[RIGHT];
            } else if (nodes[LEFT].nodes[RIGHT].opType == OpTypes.COLUMN) {
                replaceColumn    = operation == OpTypes.ADD;
                colExpression    = nodes[LEFT].nodes[RIGHT];
                nonColExpression = nodes[LEFT].nodes[LEFT];
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionLogical.java|(68750,478,<2151,15>,<2160,9>)
```
 {
            if (nodes[RIGHT].nodes[LEFT].opType == OpTypes.COLUMN) {
                colExpression    = nodes[RIGHT].nodes[LEFT];
                nonColExpression = nodes[RIGHT].nodes[RIGHT];
            } else if (nodes[RIGHT].nodes[RIGHT].opType == OpTypes.COLUMN) {
                replaceColumn    = operation == OpTypes.ADD;
                colExpression    = nodes[RIGHT].nodes[RIGHT];
                nonColExpression = nodes[RIGHT].nodes[LEFT];
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(34681,363,<844,12>,<848,73>)
```
 addColumn(t, "NULLABLE", Type.SQL_INTEGER);             // not null
            addColumn(t, "REMARKS", CHARACTER_DATA);                // 11
            addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 12
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 13
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 14
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67585,548,<1626,12>,<1634,73>)
```
 addColumn(t, "NULLABLE", Type.SQL_SMALLINT);            // not null
            addColumn(t, "REMARKS", CHARACTER_DATA);                // 12

            // ----------------------------------------------------------------
            // JDBC 4.0
            // ----------------------------------------------------------------
            addColumn(t, "COLUMN_DEF", CHARACTER_DATA);             // 13
            addColumn(t, "SQL_DATA_TYPE", Type.SQL_INTEGER);        // 14
            addColumn(t, "SQL_DATETIME_SUB", Type.SQL_INTEGER);     // 15
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowOutputText.java|(4472,329,<132,4>,<148,5>)
```
 public void writeString(String s) {

        s = checkConvertString(s, fieldSep);

        // error
        if (s == null) {
            return;
        }

        // writeBytes(s);
        byte[] bytes = getBytes(s);

        write(bytes, 0, bytes.length);

        nextSep    = fieldSep;
        nextSepEnd = fieldSepEnd;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowOutputText.java|(4807,312,<150,4>,<165,5>)
```
 protected void writeVarString(String s) {

        s = checkConvertString(s, varSep);

        if (s == null) {
            return;
        }

        // writeBytes(s);
        byte[] bytes = getBytes(s);

        write(bytes, 0, bytes.length);

        nextSep    = varSep;
        nextSepEnd = varSepEnd;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rowio/RowOutputText.java|(5125,328,<167,4>,<182,5>)
```
 protected void writeLongVarString(String s) {

        s = checkConvertString(s, longvarSep);

        if (s == null) {
            return;
        }

        // writeBytes(s);
        byte[] bytes = getBytes(s);

        write(bytes, 0, bytes.length);

        nextSep    = longvarSep;
        nextSepEnd = longvarSepEnd;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(36852,624,<890,8>,<906,42>)
```
 Object[]    row;
        DITableInfo ti;

        // column number mappings
        final int itable_cat         = 0;
        final int itable_schem       = 1;
        final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
        final int icolumn_def        = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(3988,457,<132,4>,<151,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(9077,457,<285,4>,<304,5>)
```
 public Result execute(Session session) {

        Result result;

        try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }

        if (result.isError()) {
            result.getException().setStatementType(group, type);
        }

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(45632,498,<1105,8>,<1122,29>)
```
 // calculated column values
        String  pkTableCatalog;
        String  pkTableSchema;
        String  pkTableName;
        String  pkColumnName;
        String  fkTableCatalog;
        String  fkTableSchema;
        String  fkTableName;
        String  fkColumnName;
        Integer keySequence;
        Integer updateRule;
        Integer deleteRule;
        String  fkName;
        String  pkName;
        Integer deferrability;

        // Intermediate holders
        Iterator      tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(45731,459,<1108,8>,<1124,30>)
```
 String  pkTableName;
        String  pkColumnName;
        String  fkTableCatalog;
        String  fkTableSchema;
        String  fkTableName;
        String  fkColumnName;
        Integer keySequence;
        Integer updateRule;
        Integer deleteRule;
        String  fkName;
        String  pkName;
        Integer deferrability;

        // Intermediate holders
        Iterator      tables;
        Table         table;
        Table         fkTable;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(146628,304,<3494,47>,<3499,25>)
```
 {
                            table = (matcher.group(2).length() > 0)
                                    ? matcher.group(2) : null;
                            schema = (matcher.group(1).length() > 0)
                                    ? matcher.group(1) : getCurrentSchema();
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(148458,317,<3536,43>,<3542,21>)
```
 {
                        filter = (matcher.group(2).length() > 0)
                                ? matcher.group(2) : null;
                        schema = (matcher.group(1).length() > 0)
                                ? matcher.group(1)
                                : getCurrentSchema();
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TextTable.java|(9899,255,<334,8>,<341,63>)
```
 if (dataSource == null) {
            return null;
        }

        StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TextTable.java|(10521,251,<357,8>,<364,63>)
```
 if (header == null) {
            return null;
        }

        StringBuffer sb = new StringBuffer(128);

        sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');
        sb.append(getName().getSchemaQualifiedStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialog.java|(2884,288,<77,4>,<86,5>)
```
 /**
     * @throws Exception
     */
    public static Connection createConnection(String driver, String url,
            String user, String password) throws Exception {

        Class.forName(driver).newInstance();

        return DriverManager.getConnection(url, user, password);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java|(3940,247,<99,4>,<105,5>)
```
 public static Connection createConnection(String driver, String url,
            String user, String password) throws Exception {

        Class.forName(driver).newInstance();

        return DriverManager.getConnection(url, user, password);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(93444,385,<2208,12>,<2219,51>)
```
 if (b < 0) break; // No more unexpanded variable uses

            e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.sysprop_empty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.sysprop_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/cmdline/SqlFile.java|(94574,385,<2244,12>,<2255,51>)
```
 if (b < 0) break; // No more unexpanded variable uses

            e = s.indexOf('}', b + 2);

            if (e == b + 2)
                throw new SqlToolError(SqltoolRB.plvar_nameempty.getString());

            if (e < 0)
                throw new SqlToolError(
                        SqltoolRB.plvar_unterminated.getString());

            permitUnset = (s.charAt(b + 2) == ':');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/TextFileSettings.java|(3803,375,<105,8>,<109,75>)
```
 //-- Get separators: from database properties, then from table properties
        fs  = dbProps.getStringProperty(HsqlDatabaseProperties.textdb_fs);
        fs  = tableprops.getProperty(HsqlDatabaseProperties.textdb_fs, fs);
        vs  = dbProps.getStringProperty(HsqlDatabaseProperties.textdb_vs);
        vs  = tableprops.getProperty(HsqlDatabaseProperties.textdb_vs, vs);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/TextFileSettings.java|(4036,296,<108,8>,<111,77>)
```
 vs  = dbProps.getStringProperty(HsqlDatabaseProperties.textdb_vs);
        vs  = tableprops.getProperty(HsqlDatabaseProperties.textdb_vs, vs);
        lvs = dbProps.getStringProperty(HsqlDatabaseProperties.textdb_lvs);
        lvs = tableprops.getProperty(HsqlDatabaseProperties.textdb_lvs, lvs);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(8765,396,<194,16>,<207,44>)
```
 ResultSetMetaData rsmd = rs.getMetaData();

                result1 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result1 += rs.getString(i + 1) + ":";
                    }

                    result1 += "\n";
                }

                rs.close();
                System.out.println(result1);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(9427,396,<214,16>,<227,44>)
```
 ResultSetMetaData rsmd = rs.getMetaData();

                result2 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result2 += rs.getString(i + 1) + ":";
                    }

                    result2 += "\n";
                }

                rs.close();
                System.out.println(result2);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(9948,396,<232,16>,<245,44>)
```
 ResultSetMetaData rsmd = rs.getMetaData();

                result3 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result3 += rs.getString(i + 1) + ":";
                    }

                    result3 += "\n";
                }

                rs.close();
                System.out.println(result3);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(10603,396,<252,16>,<265,44>)
```
 ResultSetMetaData rsmd = rs.getMetaData();

                result4 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result4 += rs.getString(i + 1) + ":";
                    }

                    result4 += "\n";
                }

                rs.close();
                System.out.println(result4);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251752,416,<6613,8>,<6624,41>)
```
 String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
        final int table_name         = 6;
        final int is_deferable       = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46436,406,<1132,8>,<1143,38>)
```
 HsqlArrayList fkConstraintsList;
        Object[]      row;

        // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(121550,368,<2952,8>,<2963,37>)
```
 Table    table;
        Object[] row;

// column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int column_name    = 5;
        final int privilege_type = 6;
        final int is_grantable   = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(139007,376,<3379,8>,<3390,37>)
```
 Table    table;
        Object[] row;

        // column number mappings
        final int grantor        = 0;
        final int grantee        = 1;
        final int table_catalog  = 2;
        final int table_schema   = 3;
        final int table_name     = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;
        final int with_hierarchy = 7;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(33059,682,<1020,12>,<1036,13>)
```
 try {

                // Would like to use String.split(), but don't know if Java 4
                // is allowed here.
                // Until we can use Java 4, prohibit tabs as white space.
                int index = trimmed.indexOf(' ');

                if (index < 0) {
                    throw new IllegalArgumentException();
                }

                enforceSequence = Boolean.valueOf(trimmed.substring(0,
                        index)).booleanValue();
                waiter = Waiter.getWaiter(trimmed.substring(index).trim());
            } catch (IllegalArgumentException ie) {
                throw new IllegalArgumentException(W_SYNTAX_MSG);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestUtil.java|(35618,630,<1107,8>,<1123,9>)
```
 try {

            // Would like to use String.split(), but don't know if Java 4
            // is allowed here.
            // Until we can use Java 4, prohibit tabs as white space.
            int index = trimmed.indexOf(' ');

            if (index < 0) {
                throw new IllegalArgumentException();
            }

            enforceSequence = Boolean.valueOf(trimmed.substring(0,
                    index)).booleanValue();
            waiter = Waiter.getWaiter(trimmed.substring(index).trim());
        } catch (IllegalArgumentException ie) {
            throw new IllegalArgumentException(P_SYNTAX_MSG);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(6867,483,<200,8>,<207,73>)
```
 p.setProperty(ServerProperties.sc_key_autorestart_server,
                      SC_DEFAULT_SERVER_AUTORESTART);
        p.setProperty(ServerProperties.sc_key_address, SC_DEFAULT_ADDRESS);
        p.setProperty(ServerProperties.sc_key_no_system_exit,
                      SC_DEFAULT_NO_SYSTEM_EXIT);
        p.setProperty(ServerProperties.sc_key_max_databases,
                      SC_DEFAULT_MAX_DATABASES);
        p.setProperty(ServerProperties.sc_key_silent, SC_DEFAULT_SILENT);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(6987,431,<202,8>,<208,67>)
```
 p.setProperty(ServerProperties.sc_key_address, SC_DEFAULT_ADDRESS);
        p.setProperty(ServerProperties.sc_key_no_system_exit,
                      SC_DEFAULT_NO_SYSTEM_EXIT);
        p.setProperty(ServerProperties.sc_key_max_databases,
                      SC_DEFAULT_MAX_DATABASES);
        p.setProperty(ServerProperties.sc_key_silent, SC_DEFAULT_SILENT);
        p.setProperty(ServerProperties.sc_key_tls, SC_DEFAULT_TLS);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(7063,427,<203,8>,<209,71>)
```
 p.setProperty(ServerProperties.sc_key_no_system_exit,
                      SC_DEFAULT_NO_SYSTEM_EXIT);
        p.setProperty(ServerProperties.sc_key_max_databases,
                      SC_DEFAULT_MAX_DATABASES);
        p.setProperty(ServerProperties.sc_key_silent, SC_DEFAULT_SILENT);
        p.setProperty(ServerProperties.sc_key_tls, SC_DEFAULT_TLS);
        p.setProperty(ServerProperties.sc_key_trace, SC_DEFAULT_TRACE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(7175,423,<205,8>,<211,43>)
```
 p.setProperty(ServerProperties.sc_key_max_databases,
                      SC_DEFAULT_MAX_DATABASES);
        p.setProperty(ServerProperties.sc_key_silent, SC_DEFAULT_SILENT);
        p.setProperty(ServerProperties.sc_key_tls, SC_DEFAULT_TLS);
        p.setProperty(ServerProperties.sc_key_trace, SC_DEFAULT_TRACE);
        p.setProperty(ServerProperties.sc_key_web_default_page,
                      SC_DEFAULT_WEB_PAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/server/ServerConfiguration.java|(7285,391,<207,8>,<212,77>)
```
 p.setProperty(ServerProperties.sc_key_silent, SC_DEFAULT_SILENT);
        p.setProperty(ServerProperties.sc_key_tls, SC_DEFAULT_TLS);
        p.setProperty(ServerProperties.sc_key_trace, SC_DEFAULT_TRACE);
        p.setProperty(ServerProperties.sc_key_web_default_page,
                      SC_DEFAULT_WEB_PAGE);
        p.setProperty(ServerProperties.sc_key_web_root, SC_DEFAULT_WEB_ROOT);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/TimestampData.java|(3042,191,<103,8>,<112,29>)
```
 if (diff == 0) {
            diff = nanos - b.nanos;

            if (diff == 0) {
                return 0;
            }
        }

        return diff > 0 ? 1
                        : -1;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/TimeData.java|(2906,191,<97,8>,<106,29>)
```
 if (diff == 0) {
            diff = nanos - b.nanos;

            if (diff == 0) {
                return 0;
            }
        }

        return diff > 0 ? 1
                        : -1;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(51017,238,<1392,16>,<1396,49>)
```
 prefs.autoRefresh   = autoRefresh;
                prefs.showRowCounts = displayRowCounts;
                prefs.showSysTables = showSys;
                prefs.showSchemas   = showSchemas;
                prefs.resultGrid    = gridFormat;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java|(51068,239,<1393,16>,<1397,51>)
```
 prefs.showRowCounts = displayRowCounts;
                prefs.showSysTables = showSys;
                prefs.showSchemas   = showSchemas;
                prefs.resultGrid    = gridFormat;
                prefs.showTooltips  = showTooltips;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4105,298,<107,8>,<111,65>)
```
 token.isDelimiter              = isDelimiter;
        token.isDelimitedIdentifier    = isDelimitedIdentifier;
        token.isDelimitedPrefix        = isDelimitedPrefix;
        token.isDelimitedPrePrefix     = isDelimitedPrePrefix;
        token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4159,310,<108,8>,<112,65>)
```
 token.isDelimitedIdentifier    = isDelimitedIdentifier;
        token.isDelimitedPrefix        = isDelimitedPrefix;
        token.isDelimitedPrePrefix     = isDelimitedPrePrefix;
        token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;
        token.isUndelimitedIdentifier  = isUndelimitedIdentifier;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4223,305,<109,8>,<113,58>)
```
 token.isDelimitedPrefix        = isDelimitedPrefix;
        token.isDelimitedPrePrefix     = isDelimitedPrePrefix;
        token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;
        token.isUndelimitedIdentifier  = isUndelimitedIdentifier;
        token.hasIrregularChar         = hasIrregularChar;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4283,308,<110,8>,<114,62>)
```
 token.isDelimitedPrePrefix     = isDelimitedPrePrefix;
        token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;
        token.isUndelimitedIdentifier  = isUndelimitedIdentifier;
        token.hasIrregularChar         = hasIrregularChar;
        token.isReservedIdentifier     = isReservedIdentifier;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4346,312,<111,8>,<115,66>)
```
 token.isDelimitedPrePrePrefix  = isDelimitedPrePrePrefix;
        token.isUndelimitedIdentifier  = isUndelimitedIdentifier;
        token.hasIrregularChar         = hasIrregularChar;
        token.isReservedIdentifier     = isReservedIdentifier;
        token.isCoreReservedIdentifier = isCoreReservedIdentifier;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4412,304,<112,8>,<116,57>)
```
 token.isUndelimitedIdentifier  = isUndelimitedIdentifier;
        token.hasIrregularChar         = hasIrregularChar;
        token.isReservedIdentifier     = isReservedIdentifier;
        token.isCoreReservedIdentifier = isCoreReservedIdentifier;
        token.isHostParameter          = isHostParameter;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Token.java|(4478,292,<113,8>,<117,53>)
```
 token.hasIrregularChar         = hasIrregularChar;
        token.isReservedIdentifier     = isReservedIdentifier;
        token.isCoreReservedIdentifier = isCoreReservedIdentifier;
        token.isHostParameter          = isHostParameter;
        token.isMalformed              = isMalformed;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialog.java|(5324,422,<156,16>,<165,17>)
```
 ConnectionSetting setting =
                    (ConnectionSetting) settings.get(s);

                if (setting != null) {
                    mName.setText(setting.getName());
                    mDriver.setText(setting.getDriver());
                    mURL.setText(setting.getUrl());
                    mUser.setText(setting.getUser());
                    mPassword.setText(setting.getPassword());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java|(12478,375,<357,12>,<365,13>)
```
 ConnectionSetting setting = (ConnectionSetting) settings.get(s2);

            if (setting != null) {
                mName.setText(setting.getName());
                mDriver.setText(setting.getDriver());
                mURL.setText(setting.getUrl());
                mUser.setText(setting.getUser());
                mPassword.setText(setting.getPassword());
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38595,373,<1068,8>,<1077,38>)
```
 final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
        final int it_waiting     = 10;
        final int it_waited      = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(44821,353,<1234,8>,<1243,36>)
```
 final int itable_name  = 2;
        final int idsd         = 3;
        final int ifile_path   = 4;
        final int ifile_enc    = 5;
        final int ifs          = 6;
        final int ivfs         = 7;
        final int ilvfs        = 8;
        final int iif          = 9;
        final int iiq          = 10;
        final int iiaq         = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92643,493,<2598,8>,<2607,50>)
```
 final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(125055,493,<3394,8>,<3403,50>)
```
 final int domain_name                = 2;
        final int data_type                  = 3;
        final int character_maximum_length   = 4;
        final int character_octet_length     = 5;
        final int character_set_catalog      = 6;
        final int character_set_schema       = 7;
        final int character_set_name         = 8;
        final int collation_catalog          = 9;
        final int collation_schema           = 10;
        final int collation_name             = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(159096,473,<4302,8>,<4311,48>)
```
 final int specific_name            = 2;
        final int ordinal_position         = 3;
        final int parameter_mode           = 4;
        final int is_result                = 5;
        final int as_locator               = 6;
        final int parameter_name           = 7;
        final int from_specific_catalog    = 8;
        final int from_specific_schema     = 9;
        final int from_specific_name       = 10;
        final int to_specific_catalog      = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(219190,613,<5838,8>,<5847,62>)
```
 final int specific_name                          = 2;
        final int routine_catalog                        = 3;
        final int routine_schema                         = 4;
        final int routine_name                           = 5;
        final int routine_type                           = 6;
        final int module_catalog                         = 7;
        final int module_schema                          = 8;
        final int module_name                            = 9;
        final int udt_catalog                            = 10;
        final int udt_schema                             = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(276201,493,<7293,8>,<7302,50>)
```
 final int trigger_name               = 2;
        final int event_manipulation         = 3;
        final int event_object_catalog       = 4;
        final int event_object_schema        = 5;
        final int event_object_table         = 6;
        final int action_order               = 7;
        final int action_condition           = 8;
        final int action_statement           = 9;
        final int action_orientation         = 10;
        final int action_timing              = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(299390,493,<7878,8>,<7887,50>)
```
 final int user_defined_type_name     = 2;
        final int user_defined_type_category = 3;
        final int is_instantiable            = 4;
        final int is_final                   = 5;
        final int ordering_form              = 6;
        final int ordering_category          = 7;
        final int ordering_routine_catalog   = 8;
        final int ordering_routine_schema    = 9;
        final int ordering_routine_name      = 10;
        final int reference_type             = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28521,383,<704,8>,<713,39>)
```
 final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(37020,413,<896,8>,<905,42>)
```
 final int itable_name        = 2;
        final int icolumn_name       = 3;
        final int idata_type         = 4;
        final int itype_name         = 5;
        final int icolumn_size       = 6;
        final int ibuffer_length     = 7;
        final int idecimal_digits    = 8;
        final int inum_prec_radix    = 9;
        final int inullable          = 10;
        final int iremark            = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46617,383,<1138,8>,<1147,39>)
```
 final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(55057,403,<1336,8>,<1345,41>)
```
 final int itable_name       = 2;
        final int inon_unique       = 3;
        final int iindex_qualifier  = 4;
        final int iindex_name       = 5;
        final int itype             = 6;
        final int iordinal_position = 7;
        final int icolumn_name      = 8;
        final int iasc_or_desc      = 9;
        final int icardinality      = 10;
        final int ipages            = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(68996,463,<1656,8>,<1665,47>)
```
 final int procedure_name          = 2;
        final int parameter_name          = 3;
        final int parameter_mode          = 4;
        final int data_type_sql_id        = 5;
        final int data_type               = 6;
        final int numeric_precision       = 7;
        final int byte_length             = 8;
        final int numeric_scale           = 9;
        final int numeric_precision_radix = 10;
        final int nullable                = 11;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(104957,423,<2537,8>,<2546,43>)
```
 final int iprecision          = 2;
        final int iliteral_prefix     = 3;
        final int iliteral_suffix     = 4;
        final int icreate_params      = 5;
        final int inullable           = 6;
        final int icase_sensitive     = 7;
        final int isearchable         = 8;
        final int iunsigned_attribute = 9;
        final int ifixed_prec_scale   = 10;
        final int iauto_increment     = 11;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(30137,462,<754,16>,<764,44>)
```
 if (translateTTI) {
                    if (type.isIntervalType()) {
                        type = ((IntervalType) type).getCharacterType();
                    } else if (type.isDateTimeTypeWithZone()) {
                        type = ((DateTimeType) type)
                            .getDateTimeTypeWithoutZone();
                    }
                }

                row                 = t.getEmptyRowData();
                row[iscope]         = scope;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(38821,477,<949,16>,<961,55>)
```
 if (translateTTI) {
                    if (type.isIntervalType()) {
                        type = ((IntervalType) type).getCharacterType();
                    } else if (type.isDateTimeTypeWithZone()) {
                        type = ((DateTimeType) type)
                            .getDateTimeTypeWithoutZone();
                    }
                }

                row = t.getEmptyRowData();

                //
                row[itable_cat]         = tableCatalog;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(106363,396,<2573,12>,<2582,39>)
```
 if (translateTTI) {
                if (type.isIntervalType()) {
                    type = ((IntervalType) type).getCharacterType();
                } else if (type.isDateTimeTypeWithZone()) {
                    type = ((DateTimeType) type).getDateTimeTypeWithoutZone();
                }
            }

            row             = t.getEmptyRowData();
            row[itype_name] = typeName;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultProperties.java|(5122,171,<131,4>,<134,5>)
```
 public static int addUpdatable(int props, boolean flag) {
        return flag ? props | ((1) << idx_updatable)
                    : props & (~(1 << idx_updatable));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultProperties.java|(5299,168,<136,4>,<139,5>)
```
 public static int addHoldable(int props, boolean flag) {
        return flag ? props | ((1) << idx_holdable)
                    : props & (~(1 << idx_holdable));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultProperties.java|(5473,174,<141,4>,<144,5>)
```
 public static int addScrollable(int props, boolean flag) {
        return flag ? props | ((1) << idx_scrollable)
                    : props & (~(1 << idx_scrollable));
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultProperties.java|(5653,162,<146,4>,<149,5>)
```
 public static int addIsHeld(int props, boolean flag) {
        return flag ? props | ((1) << idx_isheld)
                    : props & (~(1 << idx_isheld));
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(55653,377,<2083,23>,<2093,17>)
```
 if (character == separators[currentPart]) {
                    endOfPart = true;

                    if (currentPart != lastPart) {
                        i++;
                    }
                } else if (currentPart == lastPart) {
                    endOfPart = true;
                } else {
                    throw Error.error(ErrorCode.X_22007);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(60412,377,<2238,23>,<2248,17>)
```
 if (character == separators[currentPart]) {
                    endOfPart = true;

                    if (currentPart != lastPart) {
                        i++;
                    }
                } else if (currentPart == lastPart) {
                    endOfPart = true;
                } else {
                    throw Error.error(ErrorCode.X_22006);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Trigger.java|(0,4661,<1,0>,<128,2>)
```
 /* Copyright (c) 2001-2011, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.hsqldb;

// fredt@users 20030727 - signature altered to support update triggers
/*

Contents of row1[] and row2[] in each type of trigger.

AFTER INSERT
 - row1[] contains single String object = "Statement-level".

AFTER UPDATE
 - row1[] contains single String object = "Statement-level".

AFTER DELETE
 - row1[] contains single String object = "Statement-level".

BEFORE INSERT FOR EACH ROW
 - row2[] contains data about to be inserted and this can
be modified within the trigger such that modified data gets written to the
database.

AFTER INSERT FOR EACH ROW
 - row2[] contains data just inserted into the table.

BEFORE UPDATE FOR EACH ROW
 - row1[] contains currently stored data and not the data that is about to be
updated.

 - row2[] contains the data that is about to be updated.

AFTER UPDATE FOR EACH ROW
 - row1[] contains old stored data.
 - row2[] contains the new data.

BEFORE DELETE FOR EACH ROW
 - row1[] contains row data about to be deleted.

AFTER DELETE FOR EACH ROW
 - row1[] contains row data that has been deleted.

List compiled by Andrew Knight (quozzbat@users)
*/

/**
 * The interface an HSQLDB TRIGGER must implement. The user-supplied class that
 * implements this must have a default constructor.
 *
 * @author Peter Hudson (peterhudson@users dot sourceforge.net)
 * @version 1.9.0
 * @since 1.7.0
 */
public interface Trigger {

    // type of trigger
    int INSERT_AFTER      = 0;
    int DELETE_AFTER      = 1;
    int UPDATE_AFTER      = 2;
    int INSERT_AFTER_ROW  = 3;
    int DELETE_AFTER_ROW  = 4;
    int UPDATE_AFTER_ROW  = 5;
    int INSERT_BEFORE_ROW = 6;
    int DELETE_BEFORE_ROW = 7;
    int UPDATE_BEFORE_ROW = 8;

    /**
     * The method invoked upon each triggered action.
     *
     * <p> type contains the integer index id for trigger type, e.g.
     * TriggerDef.INSERT_AFTER
     *
     * <p> For all triggers defined as default FOR EACH STATEMENT both
     *  oldRow and newRow are null.
     *
     * <p> For triggers defined as FOR EACH ROW, the following will apply:
     *
     * <p> When UPDATE triggers are fired, oldRow contains the existing values
     * of the table row and newRow contains the new values.
     *
     * <p> For INSERT triggers, oldRow is null and newRow contains the table row
     * to be inserted. For DELETE triggers, newRow is null and oldRow contains
     * the table row to be deleted.
     *
     * <p> For error conditions, users can construct an HsqlException using one
     * of the static methods of org.hsqldb.error.Error with a predefined
     * SQL State from org.hsqldb.error.ErrorCode.
     *
     * @param type the type as one of the int values defined in the interface
     * @param trigName the name of the trigger
     * @param tabName the name of the table upon which the triggered action is
     *   occuring
     * @param oldRow the old row
     * @param newRow the new row
     * @throws HsqlException
     */
    void fire(int type, String trigName, String tabName, Object[] oldRow,
              Object[] newRow) throws HsqlException;
}

```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Trigger.java|(0,4661,<1,0>,<128,2>)
```
 /* Copyright (c) 2001-2011, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.hsqldb;

// fredt@users 20030727 - signature altered to support update triggers
/*

Contents of row1[] and row2[] in each type of trigger.

AFTER INSERT
 - row1[] contains single String object = "Statement-level".

AFTER UPDATE
 - row1[] contains single String object = "Statement-level".

AFTER DELETE
 - row1[] contains single String object = "Statement-level".

BEFORE INSERT FOR EACH ROW
 - row2[] contains data about to be inserted and this can
be modified within the trigger such that modified data gets written to the
database.

AFTER INSERT FOR EACH ROW
 - row2[] contains data just inserted into the table.

BEFORE UPDATE FOR EACH ROW
 - row1[] contains currently stored data and not the data that is about to be
updated.

 - row2[] contains the data that is about to be updated.

AFTER UPDATE FOR EACH ROW
 - row1[] contains old stored data.
 - row2[] contains the new data.

BEFORE DELETE FOR EACH ROW
 - row1[] contains row data about to be deleted.

AFTER DELETE FOR EACH ROW
 - row1[] contains row data that has been deleted.

List compiled by Andrew Knight (quozzbat@users)
*/

/**
 * The interface an HSQLDB TRIGGER must implement. The user-supplied class that
 * implements this must have a default constructor.
 *
 * @author Peter Hudson (peterhudson@users dot sourceforge.net)
 * @version 1.9.0
 * @since 1.7.0
 */
public interface Trigger {

    // type of trigger
    int INSERT_AFTER      = 0;
    int DELETE_AFTER      = 1;
    int UPDATE_AFTER      = 2;
    int INSERT_AFTER_ROW  = 3;
    int DELETE_AFTER_ROW  = 4;
    int UPDATE_AFTER_ROW  = 5;
    int INSERT_BEFORE_ROW = 6;
    int DELETE_BEFORE_ROW = 7;
    int UPDATE_BEFORE_ROW = 8;

    /**
     * The method invoked upon each triggered action.
     *
     * <p> type contains the integer index id for trigger type, e.g.
     * TriggerDef.INSERT_AFTER
     *
     * <p> For all triggers defined as default FOR EACH STATEMENT both
     *  oldRow and newRow are null.
     *
     * <p> For triggers defined as FOR EACH ROW, the following will apply:
     *
     * <p> When UPDATE triggers are fired, oldRow contains the existing values
     * of the table row and newRow contains the new values.
     *
     * <p> For INSERT triggers, oldRow is null and newRow contains the table row
     * to be inserted. For DELETE triggers, newRow is null and oldRow contains
     * the table row to be deleted.
     *
     * <p> For error conditions, users can construct an HsqlException using one
     * of the static methods of org.hsqldb.error.Error with a predefined
     * SQL State from org.hsqldb.error.ErrorCode.
     *
     * @param type the type as one of the int values defined in the interface
     * @param trigName the name of the trigger
     * @param tabName the name of the table upon which the triggered action is
     *   occuring
     * @param oldRow the old row
     * @param newRow the new row
     * @throws HsqlException
     */
    void fire(int type, String trigName, String tabName, Object[] oldRow,
              Object[] newRow) throws HsqlException;
}

```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(13014,246,<438,8>,<442,50>)
```
 String    alterCreate    = new String("");
        String    alterDrop      = new String("");
        String    ConstraintName = new String("");
        String    RefTableName   = new String("");
        String    foreignKeyName = new String("");
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(13065,246,<439,8>,<443,50>)
```
 String    alterDrop      = new String("");
        String    ConstraintName = new String("");
        String    RefTableName   = new String("");
        String    foreignKeyName = new String("");
        String    columnName     = new String("");
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(6888,617,<204,8>,<223,9>)
```
 String testValue;
        int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java|(8107,617,<249,8>,<268,9>)
```
 String testValue;
        int    index      = hashIndex.getHashIndex(key.hashCode());
        int    lookup     = hashIndex.hashTable[index];
        int    lastLookup = -1;

        for (; lookup >= 0;
                lastLookup = lookup,
                lookup = hashIndex.getNextLookup(lookup)) {
            testValue = (String) objectKeyTable[lookup];

            if (key.equals(testValue)) {
                if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }

                accessTable[lookup] = accessCount++;

                return testValue;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(27191,388,<973,8>,<991,9>)
```
 if (isFullSelect) {
            list.add(Tokens.T_SELECT);
        }

        if (isFullInsert) {
            list.add(Tokens.T_INSERT);
        }

        if (isFullUpdate) {
            list.add(Tokens.T_UPDATE);
        }

        if (isFullDelete) {
            list.add(Tokens.T_DELETE);
        }

        if (isFullReferences) {
            list.add(Tokens.T_REFERENCES);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(27269,390,<977,8>,<995,9>)
```
 if (isFullInsert) {
            list.add(Tokens.T_INSERT);
        }

        if (isFullUpdate) {
            list.add(Tokens.T_UPDATE);
        }

        if (isFullDelete) {
            list.add(Tokens.T_DELETE);
        }

        if (isFullReferences) {
            list.add(Tokens.T_REFERENCES);
        }

        if (isFullTrigger) {
            list.add(Tokens.T_TRIGGER);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/BitMapCachedObject.java|(2481,284,<69,8>,<79,27>)
```
 int   capacity = array.length;

        try {
            for (int i = 0; i < capacity; i++) {
                array[i] = in.readInt();
            }
        } catch (IOException e) {
            throw Error.error(ErrorCode.GENERAL_IO_ERROR, e);
        }

        hasChanged = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/IntArrayCachedObject.java|(2399,284,<67,8>,<77,27>)
```
 int capacity = values.length;

        try {
            for (int i = 0; i < capacity; i++) {
                values[i] = in.readInt();
            }
        } catch (IOException e) {
            throw Error.error(ErrorCode.GENERAL_IO_ERROR, e);
        }

        hasChanged = false;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java|(3132,806,<90,8>,<113,28>)
```
 String CompareString = "nextval(\'\"" + SeqName + "\"\'";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = "SERIAL";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String PostgreSQL_func = Funcs[Idx][PostgreSQL];
            int    iStartPos       = columnType.indexOf(PostgreSQL_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][HSQLDB];
                NewColumnType +=
                    columnType.substring(iStartPos
                                         + PostgreSQL_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/OracleTransferHelper.java|(5525,779,<159,8>,<181,28>)
```
 String CompareString = "nextval(\'\"" + SeqName + "\"\'";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = "SERIAL";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String ORACLE_func = Funcs[Idx][ORACLE];
            int    iStartPos   = columnType.indexOf(ORACLE_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);

                NewColumnType += Funcs[Idx][HSQLDB];
                NewColumnType += columnType.substring(iStartPos
                                                      + ORACLE_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntKeyHashMap.java|(2697,212,<83,4>,<93,5>)
```
 public void valuesToArray(Object[] array) {

        Iterator it = values().iterator();
        int      i  = 0;

        while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/OrderedIntKeyHashMap.java|(2924,212,<98,4>,<108,5>)
```
 public void valuesToArray(Object[] array) {

        Iterator it = values().iterator();
        int      i  = 0;

        while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HashMap.java|(2969,212,<96,4>,<106,5>)
```
 public void valuesToArray(Object[] array) {

        Iterator it = values().iterator();
        int      i  = 0;

        while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4963,383,<147,4>,<159,5>)
```
 public static ResultLob newLobSetCharsRequest(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(6026,385,<186,4>,<198,5>)
```
 public static ResultLob newLobGetCharsResponse(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.RESPONSE_GET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(7457,419,<237,4>,<249,5>)
```
 public static ResultLob newLobGetCharPatternPositionRequest(long id,
            char[] pattern, long offset) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = pattern;
        result.blockLength = pattern.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(18785,971,<734,8>,<751,69>)
```
 // comparison
        expressionTypeMap.put(Tokens.EQUALS, OpTypes.EQUAL);
        expressionTypeMap.put(Tokens.GREATER, OpTypes.GREATER);
        expressionTypeMap.put(Tokens.LESS, OpTypes.SMALLER);
        expressionTypeMap.put(Tokens.GREATER_EQUALS, OpTypes.GREATER_EQUAL);
        expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(18932,960,<737,8>,<753,63>)
```
 expressionTypeMap.put(Tokens.LESS, OpTypes.SMALLER);
        expressionTypeMap.put(Tokens.GREATER_EQUALS, OpTypes.GREATER_EQUAL);
        expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);
        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserBase.java|(19070,956,<739,8>,<755,67>)
```
 expressionTypeMap.put(Tokens.LESS_EQUALS, OpTypes.SMALLER_EQUAL);
        expressionTypeMap.put(Tokens.NOT_EQUALS, OpTypes.NOT_EQUAL);

        // aggregates
        expressionTypeMap.put(Tokens.COUNT, OpTypes.COUNT);
        expressionTypeMap.put(Tokens.MAX, OpTypes.MAX);
        expressionTypeMap.put(Tokens.MIN, OpTypes.MIN);
        expressionTypeMap.put(Tokens.SUM, OpTypes.SUM);
        expressionTypeMap.put(Tokens.AVG, OpTypes.AVG);
        expressionTypeMap.put(Tokens.EVERY, OpTypes.EVERY);
        expressionTypeMap.put(Tokens.ANY, OpTypes.SOME);
        expressionTypeMap.put(Tokens.SOME, OpTypes.SOME);
        expressionTypeMap.put(Tokens.STDDEV_POP, OpTypes.STDDEV_POP);
        expressionTypeMap.put(Tokens.STDDEV_SAMP, OpTypes.STDDEV_SAMP);
        expressionTypeMap.put(Tokens.VAR_POP, OpTypes.VAR_POP);
        expressionTypeMap.put(Tokens.VAR_SAMP, OpTypes.VAR_SAMP);
        expressionTypeMap.put(Tokens.ARRAY_AGG, OpTypes.ARRAY_AGG);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(17201,492,<538,24>,<547,25>)
```
 if ((TTable.Stmts.bFKForced)
                                && (!ConstraintName.startsWith("FK_"))) {
                            alterCreate +=
                                Dest.helper.formatIdentifier(
                                    "FK_" + ConstraintName) + " ";
                        } else {
                            alterCreate +=
                                Dest.helper.formatIdentifier(ConstraintName)
                                + " ";
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/util/TransferDb.java|(17985,488,<555,24>,<564,25>)
```
 if ((TTable.Stmts.bFKForced)
                                && (!ConstraintName.startsWith("FK_"))) {
                            alterDrop +=
                                Dest.helper.formatIdentifier(
                                    "FK_" + ConstraintName) + " ";
                        } else {
                            alterDrop +=
                                Dest.helper.formatIdentifier(ConstraintName)
                                + " ";
                        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSession.java|(23964,212,<665,16>,<667,78>)
```
 Table         table           = (Table) parameters[0];
                HsqlArrayList tempConstraints = (HsqlArrayList) parameters[1];
                StatementDMQL statement       = (StatementDMQL) parameters[2];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSchema.java|(44221,206,<1139,16>,<1141,71>)
```
 Table         table              = (Table) arguments[0];
                HsqlArrayList tempConstraints = (HsqlArrayList) arguments[1];
                StatementDMQL statement = (StatementDMQL) arguments[2];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(127680,1327,<2119,8>,<2148,47>)
```
 commandSet.put(T_ACTION, ACTION);
        commandSet.put(T_ADD, ADD);
        commandSet.put(T_ADMIN, ADMIN);
        commandSet.put(T_AFTER, AFTER);
        commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(127838,1355,<2123,8>,<2152,49>)
```
 commandSet.put(T_ALIAS, ALIAS);
        commandSet.put(T_ALWAYS, ALWAYS);
        commandSet.put(T_ASC, ASC);
        commandSet.put(T_AUTHENTICATION, AUTHENTICATION);
        commandSet.put(T_AUTOCOMMIT, AUTOCOMMIT);
        commandSet.put(T_BACKUP, BACKUP);
        commandSet.put(T_BEFORE, BEFORE);
        commandSet.put(T_BINARY_DOUBLE, BINARY_DOUBLE);
        commandSet.put(T_BINARY_FLOAT, BINARY_FLOAT);
        commandSet.put(T_BIT, BIT);
        commandSet.put(T_BYTE, BYTE);
        commandSet.put(T_BLOCKING, BLOCKING);
        commandSet.put(T_BODY, BODY);
        commandSet.put(T_CACHE, CACHE);
        commandSet.put(T_CACHED, CACHED);
        commandSet.put(T_CASCADE, CASCADE);
        commandSet.put(T_CATALOG, CATALOG);
        commandSet.put(T_CHARACTERISTICS, CHARACTERISTICS);
        commandSet.put(T_CHARACTERS, CHARACTERS);
        commandSet.put(T_CHECKPOINT, CHECKPOINT);
        commandSet.put(T_CITEXT, CITEXT);
        commandSet.put(T_CRYPT_KEY, CRYPT_KEY);
        commandSet.put(T_CLASS, CLASS);
        commandSet.put(T_CLUSTERED, CLUSTERED);
        commandSet.put(T_COLLATE, COLLATE);
        commandSet.put(T_COLLATION, COLLATION);
        commandSet.put(T_COMMENT, COMMENT);
        commandSet.put(T_COMMITTED, COMMITTED);
        commandSet.put(T_COMPACT, COMPACT);
        commandSet.put(T_COMPRESSED, COMPRESSED);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(129325,1282,<2155,8>,<2184,53>)
```
 commandSet.put(T_CONTAINS, CONTAINS);
        commandSet.put(T_CONTINUE, CONTINUE);
        commandSet.put(T_CONTROL, CONTROL);
        commandSet.put(T_CURDATE, CURDATE);
        commandSet.put(T_CURRVAL, CURRVAL);
        commandSet.put(T_CURTIME, CURTIME);
        commandSet.put(T_DATA, DATA);
        commandSet.put(T_DATABASE, DATABASE);
        commandSet.put(T_DEADLOCK, DEADLOCK);
        commandSet.put(T_DEFAULTS, DEFAULTS);
        commandSet.put(T_DEFRAG, DEFRAG);
        commandSet.put(T_DELAY, DELAY);
        commandSet.put(T_DESC, DESC);
        commandSet.put(T_DIAGNOSTICS, DIAGNOSTICS);
        commandSet.put(T_DIGEST, DIGEST);
        commandSet.put(T_DOMAIN, DOMAIN);
        commandSet.put(T_EVENT, EVENT);
        commandSet.put(T_EXCLUDING, EXCLUDING);
        commandSet.put(T_EXPLAIN, EXPLAIN);
        commandSet.put(T_FILE, FILE);
        commandSet.put(T_FILES, FILES);
        commandSet.put(T_FINAL, FINAL);
        commandSet.put(T_FIRST, FIRST);
        commandSet.put(T_FORMAT, FORMAT);
        commandSet.put(T_FOUND, FOUND);
        commandSet.put(T_G_FACTOR, G);
        commandSet.put(T_GC, GC);
        commandSet.put(T_GENERATED, GENERATED);
        commandSet.put(T_GRANTED, GRANTED);
        commandSet.put(T_GROUP_CONCAT, GROUP_CONCAT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130699,1401,<2187,8>,<2217,45>)
```
 commandSet.put(T_IGNORECASE, IGNORECASE);
        commandSet.put(T_IMMEDIATELY, IMMEDIATELY);
        commandSet.put(T_INCLUDING, INCLUDING);
        commandSet.put(T_INCREMENT, INCREMENT);
        commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(130897,1374,<2191,8>,<2221,43>)
```
 commandSet.put(T_INDEX, INDEX);
        commandSet.put(T_INDEXER, INDEXER);
        commandSet.put(T_INITIAL, INITIAL);
        commandSet.put(T_INPUT, INPUT);
        commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131065,1394,<2195,8>,<2225,49>)
```
 commandSet.put(T_INSTEAD, INSTEAD);
        commandSet.put(T_INTEGRITY, INTEGRITY);
        commandSet.put(T_IS_AUTOCOMMIT, IS_AUTOCOMMIT);
        commandSet.put(T_ISOLATION, ISOLATION);
        commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131261,1390,<2199,8>,<2229,53>)
```
 commandSet.put(T_IS_READONLY_DATABASE, IS_READONLY_DATABASE);
        commandSet.put(T_IS_READONLY_DATABASE_FILES,
                       IS_READONLY_DATABASE_FILES);
        commandSet.put(T_IS_READONLY_SESSION, IS_READONLY_SESSION);
        commandSet.put(T_JAVA, JAVA);
        commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131542,1275,<2204,8>,<2233,43>)
```
 commandSet.put(T_K_FACTOR, K);
        commandSet.put(T_KEY, KEY);
        commandSet.put(T_LAST, LAST);
        commandSet.put(T_LASTVAL, LASTVAL);
        commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131699,1274,<2208,8>,<2237,35>)
```
 commandSet.put(T_LENGTH, LENGTH);
        commandSet.put(T_LEVEL, LEVEL);
        commandSet.put(T_LIBRARY, LIBRARY);
        commandSet.put(T_LIMIT, LIMIT);
        commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(131865,1262,<2212,8>,<2241,41>)
```
 commandSet.put(T_LOB, LOB);
        commandSet.put(T_LOCK, LOCK);
        commandSet.put(T_LOCKS, LOCKS);
        commandSet.put(T_LONG, LONG);
        commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132017,1280,<2216,8>,<2245,41>)
```
 commandSet.put(T_LONGBLOB, LONGBLOB);
        commandSet.put(T_LONGTEXT, LONGTEXT);
        commandSet.put(T_LONGVAR, LONGVAR);
        commandSet.put(T_M_FACTOR, M);
        commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132192,1283,<2220,8>,<2249,49>)
```
 commandSet.put(T_MATCHED, MATCHED);
        commandSet.put(T_MAXROWS, MAXROWS);
        commandSet.put(T_MAXVALUE, MAXVALUE);
        commandSet.put(T_MEDIAN, MEDIAN);
        commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132368,1272,<2224,8>,<2253,45>)
```
 commandSet.put(T_MEDIUMBLOB, MEDIUMBLOB);
        commandSet.put(T_MEDIUMTEXT, MEDIUMTEXT);
        commandSet.put(T_MEMORY, MEMORY);
        commandSet.put(T_MESSAGE_TEXT, MESSAGE_TEXT);
        commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132564,1248,<2228,8>,<2257,43>)
```
 commandSet.put(T_MILLIS, MILLIS);
        commandSet.put(T_MINUS_EXCEPT, MINUS_EXCEPT);
        commandSet.put(T_MINVALUE, MINVALUE);
        commandSet.put(T_MORE, MORE);
        commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132744,1238,<2232,8>,<2261,37>)
```
 commandSet.put(T_MVCC, MVCC);
        commandSet.put(T_MVLOCKS, MVLOCKS);
        commandSet.put(T_NAME, NAME);
        commandSet.put(T_NEXT, NEXT);
        commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(132902,1264,<2236,8>,<2265,41>)
```
 commandSet.put(T_NEXTVAL, NEXTVAL);
        commandSet.put(T_NAN, NAN);
        commandSet.put(T_NIO, NIO);
        commandSet.put(T_NOW, NOW);
        commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133054,1292,<2240,8>,<2269,45>)
```
 commandSet.put(T_NULLS, NULLS);
        commandSet.put(T_NUMBER, NUMBER);
        commandSet.put(T_NVARCHAR2, NVARCHAR2);
        commandSet.put(T_NVL2, NVL2);
        commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133222,1296,<2244,8>,<2273,47>)
```
 commandSet.put(T_OBJECT, OBJECT);
        commandSet.put(T_OCTETS, OCTETS);
        commandSet.put(T_OFF, OFF);
        commandSet.put(T_OPTION, OPTION);
        commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133384,1300,<2248,8>,<2277,41>)
```
 commandSet.put(T_ORDINALITY, ORDINALITY);
        commandSet.put(T_OVERRIDING, OVERRIDING);
        commandSet.put(T_P_FACTOR, P);
        commandSet.put(T_PAD, PAD);
        commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133559,1315,<2252,8>,<2281,41>)
```
 commandSet.put(T_PARTIAL, PARTIAL);
        commandSet.put(T_PASSWORD, PASSWORD);
        commandSet.put(T_PLACING, PLACING);
        commandSet.put(T_PLAN, PLAN);
        commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133731,1313,<2256,8>,<2285,41>)
```
 commandSet.put(T_PRESERVE, PRESERVE);
        commandSet.put(T_PREVVAL, PREVVAL);
        commandSet.put(T_PRIVILEGES, PRIVILEGES);
        commandSet.put(T_PROPERTY, PROPERTY);
        commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(133917,1307,<2260,8>,<2289,49>)
```
 commandSet.put(T_RAW, RAW);
        commandSet.put(T_READ, READ);
        commandSet.put(T_READONLY, READONLY);
        commandSet.put(T_REFERENTIAL, REFERENTIAL);
        commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134089,1323,<2264,8>,<2293,45>)
```
 commandSet.put(T_REGULAR, REGULAR);
        commandSet.put(T_RENAME, RENAME);
        commandSet.put(T_REPEATABLE, REPEATABLE);
        commandSet.put(T_RESET, RESET);
        commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134265,1345,<2268,8>,<2297,51>)
```
 commandSet.put(T_RESTART, RESTART);
        commandSet.put(T_RESTRICT, RESTRICT);
        commandSet.put(T_RESULT, RESULT);
        commandSet.put(T_ROLE, ROLE);
        commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134435,1387,<2272,8>,<2301,61>)
```
 commandSet.put(T_ROUTINE, ROUTINE);
        commandSet.put(T_ROW_COUNT, ROW_COUNT);
        commandSet.put(T_ROWNUM, ROWNUM);
        commandSet.put(T_SCALE, SCALE);
        commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134609,1433,<2276,8>,<2305,47>)
```
 commandSet.put(T_SCHEMA, SCHEMA);
        commandSet.put(T_SCRIPT, SCRIPT);
        commandSet.put(T_SEQUENCE, SEQUENCE);
        commandSet.put(T_SEPARATOR, SEPARATOR);
        commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134787,1455,<2280,8>,<2309,47>)
```
 commandSet.put(T_SERIALIZABLE, SERIALIZABLE);
        commandSet.put(T_SERVER, SERVER);
        commandSet.put(T_SESSION, SESSION);
        commandSet.put(T_SETS, SETS);
        commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(134965,1483,<2284,8>,<2313,55>)
```
 commandSet.put(T_SHUTDOWN, SHUTDOWN);
        commandSet.put(T_SIMPLE, SIMPLE);
        commandSet.put(T_SIZE, SIZE);
        commandSet.put(T_SOURCE, SOURCE);
        commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(135133,1527,<2288,8>,<2317,51>)
```
 commandSet.put(T_SQL_BIGINT, SQL_BIGINT);
        commandSet.put(T_SQL_BINARY, SQL_BINARY);
        commandSet.put(T_SQL_BIT, SQL_BIT);
        commandSet.put(T_SQL_BLOB, SQL_BLOB);
        commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(135323,1587,<2292,8>,<2321,57>)
```
 commandSet.put(T_SQL_BOOLEAN, SQL_BOOLEAN);
        commandSet.put(T_SQL_CHAR, SQL_CHAR);
        commandSet.put(T_SQL_CLOB, SQL_CLOB);
        commandSet.put(T_SQL_DATALINK, SQL_DATALINK);
        commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(135521,1617,<2296,8>,<2325,53>)
```
 commandSet.put(T_SQL_DATE, SQL_DATE);
        commandSet.put(T_SQL_DECIMAL, SQL_DECIMAL);
        commandSet.put(T_SQL_DOUBLE, SQL_DOUBLE);
        commandSet.put(T_SQL_FLOAT, SQL_FLOAT);
        commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(135717,1605,<2300,8>,<2329,41>)
```
 commandSet.put(T_SQL_INTEGER, SQL_INTEGER);
        commandSet.put(T_SQL_LONGNVARCHAR, SQL_LONGNVARCHAR);
        commandSet.put(T_SQL_LONGVARBINARY, SQL_LONGVARBINARY);
        commandSet.put(T_SQL_LONGVARCHAR, SQL_LONGVARCHAR);
        commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(135955,1528,<2304,8>,<2333,47>)
```
 commandSet.put(T_SQL_NCHAR, SQL_NCHAR);
        commandSet.put(T_SQL_NCLOB, SQL_NCLOB);
        commandSet.put(T_SQL_NUMERIC, SQL_NUMERIC);
        commandSet.put(T_SQL_NVARCHAR, SQL_NVARCHAR);
        commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(136157,1526,<2308,8>,<2337,53>)
```
 commandSet.put(T_SQL_REAL, SQL_REAL);
        commandSet.put(T_SQL_ROWID, SQL_ROWID);
        commandSet.put(T_SQL_SMALLINT, SQL_SMALLINT);
        commandSet.put(T_SQL_SQLXML, SQL_SQLXML);
        commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(136355,1512,<2312,8>,<2341,35>)
```
 commandSet.put(T_SQL_TIME, SQL_TIME);
        commandSet.put(T_SQL_TIMESTAMP, SQL_TIMESTAMP);
        commandSet.put(T_SQL_TINYINT, SQL_TINYINT);
        commandSet.put(T_SQL_VARBINARY, SQL_VARBINARY);
        commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(136565,1566,<2316,8>,<2345,74>)
```
 commandSet.put(T_SQL_VARCHAR, SQL_VARCHAR);
        commandSet.put(T_SQL_TSI_DAY, SQL_TSI_DAY);
        commandSet.put(T_SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_SECOND);
        commandSet.put(T_SQL_TSI_MILLI_SECOND, SQL_TSI_MILLI_SECOND);
        commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(136807,1490,<2320,8>,<2349,39>)
```
 commandSet.put(T_SQL_TSI_HOUR, SQL_TSI_HOUR);
        commandSet.put(T_SQL_TSI_MINUTE, SQL_TSI_MINUTE);
        commandSet.put(T_SQL_TSI_MONTH, SQL_TSI_MONTH);
        commandSet.put(T_SQL_TSI_QUARTER, SQL_TSI_QUARTER);
        commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137035,1428,<2324,8>,<2353,43>)
```
 commandSet.put(T_SQL_TSI_SECOND, SQL_TSI_SECOND);
        commandSet.put(T_SQL_TSI_WEEK, SQL_TSI_WEEK);
        commandSet.put(T_SQL_TSI_YEAR, SQL_TSI_YEAR);
        commandSet.put(T_STATEMENT, STATEMENT);
        commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137249,1394,<2328,8>,<2359,37>)
```
 commandSet.put(T_STYLE, STYLE);
        commandSet.put(T_SYNTAX, SYNTAX);
        commandSet.put(T_T_FACTOR, T);
        commandSet.put(T_TDC, TDC);
        commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137406,1425,<2332,8>,<2363,39>)
```
 commandSet.put(T_TEMP, TEMP);
        commandSet.put(T_TEMPORARY, TEMPORARY);
        commandSet.put(T_TEXT, TEXT);
        commandSet.put(T_TYPES, TYPES);
        commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137570,1419,<2336,8>,<2367,41>)
```
 commandSet.put(T_TIMESTAMP_WITH_ZONE, TIMESTAMP_WITH_ZONE);
        commandSet.put(T_TIMESTAMPADD, TIMESTAMPADD);
        commandSet.put(T_TIMESTAMPDIFF, TIMESTAMPDIFF);
        commandSet.put(T_TINYBLOB, TINYBLOB);
        commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(137794,1373,<2340,8>,<2371,39>)
```
 commandSet.put(T_TINYTEXT, TINYTEXT);
        commandSet.put(T_TOP, TOP);
        commandSet.put(T_TRANSACTION, TRANSACTION);
        commandSet.put(T_TRANSACTION_ACTIVE, TRANSACTION_ACTIVE);
        commandSet.put(T_TRANSACTS_COMMITTED, TRANSACTIONS_COMMITTED);
        commandSet.put(T_TRANSACTS_ROLLED_BACK, TRANSACTIONS_ROLLED_BACK);
        commandSet.put(T_TTI, TTI);
        commandSet.put(T_TYPE, TYPE);
        commandSet.put(T_UNCOMMITTED, UNCOMMITTED);
        commandSet.put(T_USAGE, USAGE);
        commandSet.put(T_VIEW, VIEW);
        commandSet.put(T_VARCHAR2, VARCHAR2);
        commandSet.put(T_WORK, WORK);
        commandSet.put(T_WRAPPER, WRAPPER);
        commandSet.put(T_WRITE, WRITE);
        commandSet.put(T_WRITE_DELAY, WRITE_DELAY);
        commandSet.put(T_ZONE, ZONE);

        //
        commandSet.put(T_ACOS, ACOS);
        commandSet.put(T_ACTION_ID, ACTION_ID);
        commandSet.put(T_ADD_MONTHS, ADD_MONTHS);
        commandSet.put(T_ARRAY_SORT, ARRAY_SORT);
        commandSet.put(T_ASCII, ASCII);
        commandSet.put(T_ASIN, ASIN);
        commandSet.put(T_ATAN, ATAN);
        commandSet.put(T_ATAN2, ATAN2);
        commandSet.put(T_BITAND, BITAND);
        commandSet.put(T_BITANDNOT, BITANDNOT);
        commandSet.put(T_BITLENGTH, BITLENGTH);
        commandSet.put(T_BITNOT, BITNOT);
        commandSet.put(T_BITOR, BITOR);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(141485,1417,<2422,8>,<2451,43>)
```
 commandSet.put(T_OCTETLENGTH, OCTETLENGTH);
        commandSet.put(T_PI, PI);
        commandSet.put(T_POSITION_ARRAY, POSITION_ARRAY);
        commandSet.put(T_QUARTER, QUARTER);
        commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(141673,1433,<2426,8>,<2455,47>)
```
 commandSet.put(T_RADIANS, RADIANS);
        commandSet.put(T_RAND, RAND);
        commandSet.put(T_RAWTOHEX, RAWTOHEX);
        commandSet.put(T_REGEXP_MATCHES, REGEXP_MATCHES);
        commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(141859,1441,<2430,8>,<2459,39>)
```
 commandSet.put(T_REGEXP_SUBSTRING, REGEXP_SUBSTRING);
        commandSet.put(T_REGEXP_SUBSTRING_ARRAY, REGEXP_SUBSTRING_ARRAY);
        commandSet.put(T_REPLACE, REPLACE);
        commandSet.put(T_REVERSE, REVERSE);
        commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(142083,1425,<2434,8>,<2463,47>)
```
 commandSet.put(T_ROUND, ROUND);
        commandSet.put(T_ROUNDMAGIC, ROUNDMAGIC);
        commandSet.put(T_RPAD, RPAD);
        commandSet.put(T_RTRIM, RTRIM);
        commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(142251,1443,<2438,8>,<2467,37>)
```
 commandSet.put(T_SECONDS_MIDNIGHT, SECONDS_MIDNIGHT);
        commandSet.put(T_SESSION_ID, SESSION_ID);
        commandSet.put(T_SESSIONTIMEZONE, SESSIONTIMEZONE);
        commandSet.put(T_SIGN, SIGN);
        commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(142461,1513,<2442,8>,<2473,77>)
```
 commandSet.put(T_SIN, SIN);
        commandSet.put(T_SORT_ARRAY, SORT_ARRAY);
        commandSet.put(T_SOUNDEX, SOUNDEX);
        commandSet.put(T_SPACE, SPACE);
        commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
```
Location: |project://hsqldb-2.3.1/hsqldb/doc/verbatim/src/org/hsqldb/Tokens.java|(142631,1583,<2446,8>,<2477,63>)
```
 commandSet.put(T_SUBSTR, SUBSTR);
        commandSet.put(T_SYS_EXTRACT_UTC, SYS_EXTRACT_UTC);
        commandSet.put(T_SYSDATE, SYSDATE);
        commandSet.put(T_SYSTIMESTAMP, SYSTIMESTAMP);
        commandSet.put(T_TAN, TAN);
        commandSet.put(T_TO_CHAR, TO_CHAR);
        commandSet.put(T_TO_DATE, TO_DATE);
        commandSet.put(T_TO_DSINTERVAL, TO_DSINTERVAL);
        commandSet.put(T_TO_YMINTERVAL, TO_YMINTERVAL);
        commandSet.put(T_TO_NUMBER, TO_NUMBER);
        commandSet.put(T_TO_TIMESTAMP, TO_TIMESTAMP);
        commandSet.put(T_TO_TIMESTAMP_TZ, TO_TIMESTAMP_TZ);
        commandSet.put(T_TODAY, TODAY);
        commandSet.put(T_TRUNC, TRUNC);
        commandSet.put(T_UCASE, UCASE);
        commandSet.put(T_TRANSACTION_ID, TRANSACTION_ID);
        commandSet.put(T_TRANSACTION_SIZE, TRANSACTION_SIZE);
        commandSet.put(T_TZ_OFFSET, TZ_OFFSET);
        commandSet.put(T_UUID, UUID);
        commandSet.put(T_UNIX_MILLIS, UNIX_MILLIS);
        commandSet.put(T_UNIX_TIMESTAMP, UNIX_TIMESTAMP);
        commandSet.put(T_WEEK, WEEK);
        commandSet.put(T_WEEK_OF_YEAR, WEEK_OF_YEAR);

        //
        commandSet.put(T_ISOLATION_LEVEL, ISOLATION_LEVEL);
        commandSet.put(T_SESSION_ISOLATION_LEVEL, SESSION_ISOLATION_LEVEL);
        commandSet.put(T_DATABASE_ISOLATION_LEVEL, DATABASE_ISOLATION_LEVEL);
        commandSet.put(T_TRANSACTION_CONTROL, TRANSACTION_CONTROL);
        commandSet.put(T_TIMEZONE, TIMEZONE);
        commandSet.put(T_SESSION_TIMEZONE, SESSION_TIMEZONE);
        commandSet.put(T_DATABASE_TIMEZONE, DATABASE_TIMEZONE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(35871,403,<1024,12>,<1031,13>)
```
 Row      row            = navigator.getCurrentRow();
            Object[] data           = navigator.getCurrentChangedData();
            int[]    changedColumns = navigator.getCurrentChangedColumns();
            Table    currentTable   = ((Table) row.getTable());

            if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(43513,403,<1253,12>,<1260,13>)
```
 Row      row            = navigator.getCurrentRow();
            Object[] changedData    = navigator.getCurrentChangedData();
            int[]    changedColumns = navigator.getCurrentChangedColumns();
            Table    currentTable   = ((Table) row.getTable());

            if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(24967,325,<837,8>,<842,30>)
```
 fkConstraints     = fkCount == 0 ? Constraint.emptyArray
                                         : new Constraint[fkCount];
        fkCount           = 0;
        fkMainConstraints = mainCount == 0 ? Constraint.emptyArray
                                           : new Constraint[mainCount];
        mainCount         = 0;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(25131,334,<840,8>,<845,30>)
```
 fkMainConstraints = mainCount == 0 ? Constraint.emptyArray
                                           : new Constraint[mainCount];
        mainCount         = 0;
        checkConstraints  = checkCount == 0 ? Constraint.emptyArray
                                            : new Constraint[checkCount];
        checkCount        = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(4883,1218,<159,8>,<197,9>)
```
 if (isFullSelect) {
            selectColumnSet = null;
        } else if (right.selectColumnSet != null) {
            if (selectColumnSet == null) {
                selectColumnSet = new OrderedHashSet();
            }

            selectColumnSet.addAll(right.selectColumnSet);
        }

        if (isFullInsert) {
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (insertColumnSet == null) {
                insertColumnSet = new OrderedHashSet();
            }

            insertColumnSet.addAll(right.insertColumnSet);
        }

        if (isFullUpdate) {
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (updateColumnSet == null) {
                updateColumnSet = new OrderedHashSet();
            }

            updateColumnSet.addAll(right.updateColumnSet);
        }

        if (isFullReferences) {
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (referencesColumnSet == null) {
                referencesColumnSet = new OrderedHashSet();
            }

            referencesColumnSet.addAll(right.referencesColumnSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(5183,1225,<169,8>,<207,9>)
```
 if (isFullInsert) {
            insertColumnSet = null;
        } else if (right.insertColumnSet != null) {
            if (insertColumnSet == null) {
                insertColumnSet = new OrderedHashSet();
            }

            insertColumnSet.addAll(right.insertColumnSet);
        }

        if (isFullUpdate) {
            updateColumnSet = null;
        } else if (right.updateColumnSet != null) {
            if (updateColumnSet == null) {
                updateColumnSet = new OrderedHashSet();
            }

            updateColumnSet.addAll(right.updateColumnSet);
        }

        if (isFullReferences) {
            referencesColumnSet = null;
        } else if (right.referencesColumnSet != null) {
            if (referencesColumnSet == null) {
                referencesColumnSet = new OrderedHashSet();
            }

            referencesColumnSet.addAll(right.referencesColumnSet);
        }

        if (isFullTrigger) {
            triggerColumnSet = null;
        } else if (right.triggerColumnSet != null) {
            if (triggerColumnSet == null) {
                triggerColumnSet = new OrderedHashSet();
            }

            triggerColumnSet.addAll(right.triggerColumnSet);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(21582,542,<758,8>,<774,9>)
```
 if (isFullSelect) {
            sb.append(Tokens.T_SELECT);
            sb.append(',');
        } else if (selectColumnSet != null) {
            sb.append(Tokens.T_SELECT);
            getColumnList(table, selectColumnSet, sb);
            sb.append(',');
        }

        if (isFullInsert) {
            sb.append(Tokens.T_INSERT);
            sb.append(',');
        } else if (insertColumnSet != null) {
            sb.append(Tokens.T_INSERT);
            getColumnList(table, insertColumnSet, sb);
            sb.append(',');
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Right.java|(21858,542,<767,8>,<783,9>)
```
 if (isFullInsert) {
            sb.append(Tokens.T_INSERT);
            sb.append(',');
        } else if (insertColumnSet != null) {
            sb.append(Tokens.T_INSERT);
            getColumnList(table, insertColumnSet, sb);
            sb.append(',');
        }

        if (isFullUpdate) {
            sb.append(Tokens.T_UPDATE);
            sb.append(',');
        } else if (updateColumnSet != null) {
            sb.append(Tokens.T_UPDATE);
            getColumnList(table, updateColumnSet, sb);
            sb.append(',');
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(21906,370,<924,24>,<931,25>)
```
 if (Tokens.T_TRUE.equals(token.tokenString)) {
                            token.tokenString = Tokens.T_TRUE;
                            token.tokenType   = Tokens.X_VALUE;
                            token.tokenValue  = Boolean.TRUE;
                            token.dataType    = Type.SQL_BOOLEAN;

                            return false;
                        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(22395,373,<936,24>,<943,25>)
```
 if (Tokens.T_FALSE.equals(token.tokenString)) {
                            token.tokenString = Tokens.T_FALSE;
                            token.tokenType   = Tokens.X_VALUE;
                            token.tokenValue  = Boolean.FALSE;
                            token.dataType    = Type.SQL_BOOLEAN;

                            return false;
                        }
```


****************************************
******** Type 3 clone detection ********
****************************************
*****************************
** Clone percentage
** 3.273992469%
*****************************
** Number of clone classes:
** 214
*****************************
** Number of clones:
** 745
*****************************
** Size (SLOC) of largest clone: 
** 59
*****************************
** The largest clones:
** {|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)}
** The largest clones in code:
** 
** largest clone number: 1
** {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
**

*****************************
** The largest clone classes in SLOC:
** 127
*****************************
** The largest clone classes (loc):
** {[|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>),|project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)]}
*****************************
** The largest clone classes in code:
** 
** largest clone class number: 1
** // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
**
Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
**
// column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
**
final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
**
// column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
**
View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
**
// intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
**
// column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
**
PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
**
Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
**
// column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
**

*****************************
 
==============================================
====== Start of clone classes printing ======= 
======             Type: 3             ======= 
==============================================
=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(21554,331,<761,50>,<773,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(18180,346,<621,50>,<633,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(116434,242,<3119,16>,<3125,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_INTEGER;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(109224,234,<2907,16>,<2913,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(58635,383,<1798,39>,<1806,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_REGULAR).append(' ');
            sb.append(Tokens.T_NAMES).append(' ');
            sb.append(database.sqlRegularNames ? Tokens.T_TRUE
                                               : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(68882,169,<2050,8>,<2053,62>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET FILES ").append(Tokens.T_BACKUP);
        sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81355,302,<2750,16>,<2754,63>)
```
 sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(63936,331,<1914,36>,<1921,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_IGNORECASE).append(' ');
            sb.append(database.sqlIgnoreCase ? Tokens.T_TRUE
                                             : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54352,200,<1769,8>,<1771,68>)
```
 params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);
        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getInt(limit);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56811,200,<1835,8>,<1837,69>)
```
 params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(128622,540,<3124,12>,<3134,78>)
```
 addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // HSQLDB-specific
            addColumn(t, "START_WITH", CHARACTER_DATA);
            addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(91840,516,<2578,12>,<2586,76>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION
            // added for unique: TABLE_CAT
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMNS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53103,275,<1732,8>,<1736,68>)
```
 ResultMetaData meta     = updateLobLength.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_LENGTH.LOB_LENGTH] = ValuePool.getLong(length);
        params[UPDATE_LENGTH.LOB_ID]     = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(52243,213,<1709,12>,<1712,74>)
```
 ResultMetaData meta = deleteLobPartCall.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87230,334,<2092,8>,<2101,34>)
```
 final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38671,375,<1070,8>,<1079,38>)
```
 final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
        final int it_waiting     = 10;
        final int it_waited      = 11;
        final int it_statement   = 12;
        final int it_latch_count = 13;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(59855,211,<1824,8>,<1828,47>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TDC).append(' ');
        sb.append(Tokens.T_DELETE).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81355,302,<2750,16>,<2754,63>)
```
 sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(60414,309,<1836,8>,<1841,71>)
```
 sb.append(database.sqlEnforceTDCU ? Tokens.T_TRUE
                                          : Tokens.T_FALSE);
        list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
        sb.append(Tokens.T_TRANSLATE).append(' ').append(Tokens.T_TTI);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60569,300,<1950,8>,<1958,58>)
```
 params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningParts.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53870,219,<1753,8>,<1759,37>)
```
 params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);

        session.sessionContext.pushDynamicArguments(params);

        Result result = updateLobUsage.execute(session);

        session.sessionContext.pop();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(109224,234,<2907,16>,<2913,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(116434,242,<3119,16>,<3125,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_INTEGER;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149742,625,<4051,8>,<4064,78>)
```
 // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
        final int position_in_unique_constraint = 8;

        // Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(60569,300,<1950,8>,<1958,58>)
```
 params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getLong(limit);

        sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningParts.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54562,287,<1773,8>,<1780,56>)
```
 sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningBlocks.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
        int             size      = navigator.getSize();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(10409,330,<280,12>,<289,13>)
```
 Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(20937,265,<738,12>,<746,13>)
```
 if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(18180,346,<621,50>,<633,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2420,117,<67,8>,<70,36>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(6625,134,<263,38>,<268,9>)
```
 {
            int v = charArray[i];

            buffer[count++] = (byte) (v >>> 8);
            buffer[count++] = (byte) v;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(20937,265,<738,12>,<746,13>)
```
 if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(21554,331,<761,50>,<773,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16538,218,<507,12>,<510,61>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(65622,461,<2143,24>,<2153,76>)
```
 if (Boolean.FALSE.equals(isForEachRow)
                                || oldRowName != null) {
                            throw unexpectedToken();
                        }

                        readIfThis(Tokens.ROW);
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();

                        oldRowName = HsqlNameManager.getSimpleName(
                            token.tokenString, token.isDelimitedIdentifier);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(64222,374,<2111,24>,<2119,44>)
```
 if (Boolean.TRUE.equals(isForEachRow)
                                || oldTableName != null
                                || beforeOrAfterType == TriggerDef.BEFORE) {
                            throw unexpectedToken();
                        }

                        read();
                        readIfThis(Tokens.AS);
                        checkIsSimpleName();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(54511,177,<1800,8>,<1802,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[]{ type };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(129661,201,<4085,8>,<4090,57>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            sequence, copy
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(55635,295,<1351,8>,<1356,41>)
```
 if (columnIndexes == null || columnIndexes.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES,
                    columnIndexes, null);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(58192,287,<1406,8>,<1411,33>)
```
 if (columnNames == null || columnNames.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES, null,
                    columnNames);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(11566,269,<349,15>,<355,9>)
```
 if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw (Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager"));
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/DatabaseManager.java|(10471,267,<310,15>,<316,9>)
```
 if (type == DatabaseURL.S_RES) {
            databaseMap = resDatabaseMap;
        } else if (type == DatabaseURL.S_MEM) {
            databaseMap = memDatabaseMap;
        } else {
            throw Error.runtimeError(ErrorCode.U_S0500, "DatabaseManager");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(4484,421,<157,4>,<169,5>)
```
 public long position(SessionInterface session, BlobData pattern,
                         long start) {

        ResultLob resultOut = ResultLob.newLobGetCharPatternPositionRequest(id,
            pattern.getId(), start);
        Result resultIn = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        return ((ResultLob) resultIn).getOffset();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobDataID.java|(4028,264,<137,8>,<144,57>)
```
 ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);
        Result    resultIn  = session.execute(resultOut);

        if (resultIn.isError()) {
            throw resultIn.getException();
        }

        length = ((ResultLob) resultIn).getBlockLength();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(50673,476,<1341,8>,<1354,9>)
```
 if (t == null) {
            return null;
        }

        long millis = DateTimeType.normaliseTime(t.getSeconds()) * 1000;

        if (!parameterMetaData.columnTypes[--parameterIndex]
                .isDateTimeTypeWithZone()) {
            Calendar calendar = cal == null ? session.getCalendar()
                    : cal;

            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);
            millis = HsqlDateTime.getNormalisedTime(millis);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(48710,241,<1287,8>,<1297,32>)
```
 if (t == null) {
            return null;
        }

        long millis = t.getSeconds() * 1000;

        if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }

        return new Date(millis);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(31684,198,<1130,8>,<1136,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAccessor.java|(2402,336,<63,88>,<75,5>)
```
 {

        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);
        }

        return unresolvedSet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(28971,364,<1047,16>,<1055,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i] == null) {
                        continue;
                    }

                    unresolvedSet = nodes[i].resolveColumnReferences(session,
                            rangeGroup, rangeCount, rangeGroups,
                            unresolvedSet, acceptsSequences);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(32580,252,<1089,29>,<1097,13>)
```
 {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementDML.java|(39900,265,<1130,12>,<1135,13>)
```
 for (int i = 0; i < extraUpdateTables.size(); i++) {
                Table currentTable = (Table) extraUpdateTables.get(i);

                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,
                                          navigator);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(31684,198,<1130,8>,<1136,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAccessor.java|(2402,336,<63,88>,<75,5>)
```
 {

        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);
        }

        return unresolvedSet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(24647,228,<899,8>,<906,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(83996,291,<2676,12>,<2686,38>)
```
 if (token.tokenType == Tokens.BY) {
                read();
                readThis(Tokens.DEFAULT);
            } else {
                readThis(Tokens.ALWAYS);

                generatedAlways = true;
            }

            readThis(Tokens.AS);
            readThis(Tokens.IDENTITY);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserCommand.java|(50300,241,<1685,8>,<1695,9>)
```
 if (token.tokenType == Tokens.AND) {
            read();

            if (token.tokenType == Tokens.NO) {
                read();
            } else {
                chain = true;
            }

            readThis(Tokens.CHAIN);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionOp.java|(11128,204,<334,8>,<340,29>)
```
 if (getRightNode() != null) {
            sb.append(" arg_right=[");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionArrayAggregate.java|(4804,196,<154,8>,<160,29>)
```
 if (getLeftNode() != null) {
            sb.append(" arg=[");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }

        return sb.toString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67060,338,<1879,16>,<1883,73>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21611,248,<615,16>,<618,62>)
```
 row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
                row[column_name]      = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84091,289,<2383,16>,<2387,61>)
```
 row[domain_name]    = type.getName().name;
                row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(204174,188,<5479,16>,<5481,60>)
```
 row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84220,160,<2385,16>,<2387,61>)
```
 row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(91840,516,<2578,12>,<2586,76>)
```
 addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            // order: TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION
            // added for unique: TABLE_CAT
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMNS].name, false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(124396,400,<3377,12>,<3383,76>)
```
 addColumn(t, "DTD_IDENTIFIER", SQL_IDENTIFIER);
            addColumn(t, "DECLARED_DATA_TYPE", CHARACTER_DATA);
            addColumn(t, "DECLARED_NUMERIC_PRECISION", CARDINAL_NUMBER);
            addColumn(t, "DECLARED_NUMERIC_SCALE", CARDINAL_NUMBER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAINS].name, false, SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206296,363,<5540,12>,<5550,21>)
```
 addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(145105,349,<3916,12>,<3926,21>)
```
 addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JAR_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19773,306,<550,12>,<558,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269214,374,<7123,12>,<7133,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206296,363,<5540,12>,<5550,21>)
```
 addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(146322,263,<3962,12>,<3969,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JARS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(145105,349,<3916,12>,<3926,21>)
```
 addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JAR_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269214,374,<7123,12>,<7133,21>)
```
 addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(146322,263,<3962,12>,<3969,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JARS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(177014,366,<4733,12>,<4743,21>)
```
 addColumn(t, "IS_GRANTABLE", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_ROUTINE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,481,<5691,16>,<5702,69>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(195719,399,<5235,16>,<5246,17>)
```
 granteeObject = (Grantee) grantees.get(i);

                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(routine);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(routine);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(285776,404,<7551,16>,<7561,17>)
```
 Grantee granteeObject = (Grantee) grantees.get(i);
                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161799,270,<4367,20>,<4370,75>)
```
 row                   = t.getEmptyRowData();
                    row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,481,<5691,16>,<5702,69>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(190962,387,<5108,16>,<5117,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,481,<5691,16>,<5702,69>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(269097,468,<7121,12>,<7131,22>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);      // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[TRIGGER_TABLE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(210084,335,<5651,12>,<5657,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_TABLE_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(146322,263,<3962,12>,<3969,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JARS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(44329,366,<1219,12>,<1228,21>)
```
 // ------------------------------------------------------------
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_TEXTTABLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67272,186,<1882,16>,<1884,59>)
```
 row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(204174,188,<5479,16>,<5481,60>)
```
 row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126555,278,<3433,12>,<3438,59>)
```
 Object[] row = t.getEmptyRowData();

            row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,357,<610,16>,<617,61>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66936,388,<1875,16>,<1882,68>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263153,368,<6945,16>,<6952,63>)
```
 if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(176896,333,<4731,12>,<4737,36>)
```
 addColumn(t, "ROUTINE_NAME", SQL_IDENTIFIER);
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_ROUTINE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173490,582,<4647,12>,<4656,36>)
```
 addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(186399,364,<4980,12>,<4986,36>)
```
 addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180436,549,<4824,12>,<4833,36>)
```
 addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(183400,358,<4903,12>,<4909,36>)
```
 addColumn(t, "UDT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);     // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(204174,242,<5479,16>,<5482,53>)
```
 row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(173074,998,<4640,12>,<4656,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_COLUMN_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);       // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null

            // order: COLUMN_NAME, PRIVILEGE
            // for unique: GRANTEE, GRANTOR, TABLE_NAME, TABLE_SCHEMA, TABLE_CAT
            // false PK, as TABLE_SCHEMA and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_COLUMN_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185991,772,<4973,12>,<4986,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(239467,322,<6253,12>,<6259,36>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_FEATURES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(44329,343,<1219,12>,<1226,22>)
```
 // ------------------------------------------------------------
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_TEXTTABLES].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2,
            }, false);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(285776,404,<7551,16>,<7561,17>)
```
 Grantee granteeObject = (Grantee) grantees.get(i);
                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(195719,399,<5235,16>,<5246,17>)
```
 granteeObject = (Grantee) grantees.get(i);

                OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(routine);
                OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(routine);

                if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(86715,226,<2968,8>,<2976,9>)
```
 if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(136079,262,<4906,56>,<4919,5>)
```
 {

        if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }

        return e;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(7082,187,<233,8>,<237,54>)
```
 StringBuffer sb = new StringBuffer();

        sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_SESSION).append(' ');
        sb.append(Tokens.T_AUTHORIZATION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(10788,431,<345,16>,<355,17>)
```
 if (action.type == ACTION_INSERT) {
                    actiontype = action.type;
                } else if (action.type == ACTION_DELETE) {
                    if (actiontype == ACTION_INSERT) {

                        // ACTION_INSERT + ACTION_DELETE
                        actiontype = ACTION_INSERT_DELETE;
                    } else {
                        actiontype = action.type;
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RowAction.java|(16957,373,<558,16>,<566,17>)
```
 if (action.type == ACTION_DELETE) {
                    if (actionType == ACTION_INSERT) {
                        actionType = ACTION_INSERT_DELETE;
                    } else {
                        actionType = action.type;
                    }
                } else if (action.type == ACTION_INSERT) {
                    actionType = action.type;
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(80608,264,<2733,20>,<2737,75>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(
                        Tokens.T_ON);
                    sb.append(' ').append(Tokens.T_COLUMN).append(' ');
                    sb.append(
                        table.getName().getSchemaQualifiedStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,269,<2751,16>,<2754,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(59765,250,<1967,16>,<1972,17>)
```
 for (int i = 0; i < indexCond.length; i++) {
                    if (indexCond[i] != null) {
                        indexCond[i] =
                            indexCond[i].replaceColumnReferences(range, list);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87230,334,<2092,8>,<2101,34>)
```
 final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11728,198,<319,16>,<321,74>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(80571,194,<2732,20>,<2735,71>)
```
 sb.setLength(0);
                    sb.append(Tokens.T_COMMENT).append(' ').append(
                        Tokens.T_ON);
                    sb.append(' ').append(Tokens.T_COLUMN).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(58649,164,<1799,12>,<1801,50>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_REGULAR).append(' ');
            sb.append(Tokens.T_NAMES).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(63936,331,<1914,36>,<1921,9>)
```
 {
            sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_IGNORECASE).append(' ');
            sb.append(database.sqlIgnoreCase ? Tokens.T_TRUE
                                             : Tokens.T_FALSE);
            list.add(sb.toString());
            sb.setLength(0);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11056,224,<303,16>,<306,75>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/BitMapCachedObject.java|(3103,147,<93,8>,<99,23>)
```
 int   capacity = array.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(array[i]);
        }

        out.writeEnd();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/IntArrayCachedObject.java|(2935,193,<88,46>,<99,5>)
```
 {

        int capacity = values.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(values[i]);
        }

        out.writeEnd();

        hasChanged = false;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4679,205,<136,8>,<141,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(58649,164,<1799,12>,<1801,50>)
```
 sb.append("SET DATABASE ").append(Tokens.T_SQL).append(' ');
            sb.append(Tokens.T_REGULAR).append(' ');
            sb.append(Tokens.T_NAMES).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(13482,413,<477,8>,<493,9>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = directRightsMap.get(name);

        if (rights.hasNext()) {
            OrderedHashSet set = new OrderedHashSet();

            while (rights.hasNext()) {
                set.add(rights.next());
            }

            return set;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(10933,198,<374,8>,<380,54>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator it       = directRightsMap.get(name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16538,218,<507,12>,<510,61>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,269,<2751,16>,<2754,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57365,194,<1770,8>,<1772,57>)
```
 sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11728,198,<319,16>,<321,74>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11056,224,<303,16>,<306,75>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/User.java|(6081,177,<197,8>,<199,66>)
```
 sb.append(Tokens.T_SET).append(' ');
        sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);
        sb.append(' ').append('\'').append(password).append('\'');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5396,213,<197,12>,<200,59>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_TYPE).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(31471,262,<738,67>,<751,5>)
```
 {

        if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(columnIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return bd;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(27273,228,<689,8>,<697,9>)
```
 if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(parameterIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/IntArrayCachedObject.java|(2935,193,<88,46>,<99,5>)
```
 {

        int capacity = values.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(values[i]);
        }

        out.writeEnd();

        hasChanged = false;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/BitMapCachedObject.java|(3103,147,<93,8>,<99,23>)
```
 int   capacity = array.length;

        for (int i = 0; i < capacity; i++) {
            out.writeInt(array[i]);
        }

        out.writeEnd();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263153,368,<6945,16>,<6952,63>)
```
 if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87230,334,<2092,8>,<2101,34>)
```
 final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
        final int inullable  = 11;
        final int iremark    = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38671,375,<1070,8>,<1079,38>)
```
 final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
        final int it_waiting     = 10;
        final int it_waited      = 11;
        final int it_statement   = 12;
        final int it_latch_count = 13;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementSet.java|(10410,776,<327,54>,<353,5>)
```
 {

        for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }

        for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }

        for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/StatementExpression.java|(5390,196,<185,8>,<189,9>)
```
 for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54352,200,<1769,8>,<1771,68>)
```
 params[GET_LOB_PART.LOB_ID]       = ValuePool.getLong(lobID);
        params[GET_LOB_PART.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[GET_LOB_PART.BLOCK_LIMIT]  = ValuePool.getInt(limit);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56316,254,<1822,8>,<1827,19>)
```
 params[DIVIDE_BLOCK.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DIVIDE_BLOCK.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(divideLobPartCall, params,
                0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53103,275,<1732,8>,<1736,68>)
```
 ResultMetaData meta     = updateLobLength.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_LENGTH.LOB_LENGTH] = ValuePool.getLong(length);
        params[UPDATE_LENGTH.LOB_ID]     = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(52243,213,<1709,12>,<1712,74>)
```
 ResultMetaData meta = deleteLobPartCall.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56316,254,<1822,8>,<1827,19>)
```
 params[DIVIDE_BLOCK.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DIVIDE_BLOCK.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(divideLobPartCall, params,
                0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16538,218,<507,12>,<510,61>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,269,<2751,16>,<2754,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57365,194,<1770,8>,<1772,57>)
```
 sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11728,198,<319,16>,<321,74>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11056,224,<303,16>,<306,75>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3914,182,<124,8>,<132,68>)
```
 pstmt.setInt(2, 9);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3529,182,<108,8>,<116,68>)
```
 pstmt.setInt(1, 0);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2420,117,<67,8>,<70,36>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(3444,183,<110,4>,<117,5>)
```
 // methods that implement dataOutput
    public void writeShort(int v) {

        ensureRoom(2);

        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(42987,253,<1131,8>,<1138,9>)
```
 checkGetParameterIndex(parameterIndex);

        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(43284,230,<1040,8>,<1047,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50493,364,<1407,12>,<1417,21>)
```
 addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(240980,260,<6298,12>,<6304,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_IMPLEMENTATION_INFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(128852,440,<3129,12>,<3140,21>)
```
 addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,476,<3760,8>,<3769,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(127957,280,<4033,8>,<4039,33>)
```
 String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_TYPE, table, column, type
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(128490,427,<4046,44>,<4058,5>)
```
 {

        String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_NULL, table, column, b
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(121802,374,<3853,20>,<3860,75>)
```
 Object[] args = new Object[] {
                        StatementTypes.ALTER_COLUMN_DROP_DEFAULT, table,
                        column, columnIndex
                    };

                    return new StatementSchema(sql,
                                               StatementTypes.ALTER_TABLE,
                                               args, null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(128490,427,<4046,44>,<4058,5>)
```
 {

        String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_NULL, table, column, b
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(12109,281,<297,36>,<304,17>)
```
 {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result5 += rsmd.getColumnLabel(i + 1) + ":"
                                   + rs.getString(i + 1) + ":";
                    }

                    result5 += "\n";
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2969,177,<83,12>,<86,13>)
```
 for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(7767,305,<160,16>,<169,44>)
```
 for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + ":";
                    }

                    result0 += "\n";
                }

                rs.close();
                System.out.println(result0);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(9504,219,<278,12>,<283,13>)
```
 uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(i, new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestHashStructures.java|(8947,232,<262,12>,<267,13>)
```
 uMap.put(new Integer(i), new Integer(intValue));
            hMap.put(new Integer(i), new Integer(intValue));

            if (uMap.size() != hMap.size()) {
                throw new Exception("HashMap size mismatch");
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14202,205,<464,12>,<466,76>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_PASSWORD).append(' ');
            sb.append(Tokens.T_CHECK).append(' ').append(Tokens.T_FUNCTION);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(32111,288,<1139,28>,<1143,76>)
```
 sb.append(Tokens.T_USAGE);
                            sb.append(' ').append(Tokens.T_ON).append(' ');
                            sb.append(Tokens.T_SEQUENCE).append(' ');
                            sb.append(
                                hsqlname.getSchemaQualifiedStatementName());
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(23196,1237,<578,4>,<611,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>FLOAT</code> parameter
     * as a <code>float</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setFloat
     */
    public synchronized float getFloat(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? (float) 0.0
                         : ((Number) o).floatValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25563,206,<735,12>,<738,41>)
```
 row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(135199,373,<3649,12>,<3656,66>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
            row[object_name]                = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23828,331,<686,16>,<693,56>)
```
 if (column.getName().comment == null) {
                    continue;
                }

                row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
                row[name]        = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(135199,373,<3649,12>,<3656,66>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
            row[object_name]                = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263153,368,<6945,16>,<6952,63>)
```
 if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(71008,326,<1994,16>,<2000,40>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,317,<1347,12>,<1354,54>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
            row[table_name]    = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,357,<2376,16>,<2383,58>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
                row[domain_name]    = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23828,331,<686,16>,<693,56>)
```
 if (column.getName().comment == null) {
                    continue;
                }

                row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
                row[name]        = table.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(135199,373,<3649,12>,<3656,66>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
            row[object_name]                = type.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263153,368,<6945,16>,<6952,63>)
```
 if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
                row[trigger_name]     = trigger.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(185991,772,<4973,12>,<4986,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_USAGE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);        // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);        // not null
            addColumn(t, "OBJECT_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "OBJECT_NAME", SQL_IDENTIFIER);    // not null
            addColumn(t, "OBJECT_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);        // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_USAGE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(180021,964,<4817,12>,<4833,36>)
```
 t = createBlankTable(sysTableHsqlNames[ROLE_TABLE_GRANTS]);

            addColumn(t, "GRANTOR", SQL_IDENTIFIER);           // not null
            addColumn(t, "GRANTEE", SQL_IDENTIFIER);           // not null
            addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);        // not null
            addColumn(t, "PRIVILEGE_TYPE", CHARACTER_DATA);    // not null
            addColumn(t, "IS_GRANTABLE", YES_OR_NO);           // not null
            addColumn(t, "WITH_HIERARCHY", YES_OR_NO);

            // order:  TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
            // added for unique:  GRANTEE, GRANTOR,
            // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82163,423,<2324,12>,<2331,36>)
```
 addColumn(t, "TABLE_CATALOG", SQL_IDENTIFIER);
            addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263153,304,<6945,16>,<6951,69>)
```
 if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,262,<1347,12>,<1353,60>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,295,<610,16>,<616,67>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161799,270,<4367,20>,<4370,75>)
```
 row                   = t.getEmptyRowData();
                    row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,298,<2376,16>,<2382,64>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23828,274,<686,16>,<692,62>)
```
 if (column.getName().comment == null) {
                    continue;
                }

                row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(240980,260,<6298,12>,<6304,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_IMPLEMENTATION_INFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84150,230,<2384,16>,<2387,61>)
```
 row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84150,281,<2384,16>,<2389,49>)
```
 row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BinaryType.java|(4591,279,<118,34>,<132,5>)
```
 {

        if (precision == 0) {
            return getNameString();
        }

        StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(precision);
        sb.append(')');

        return sb.toString();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/BlobType.java|(3427,207,<99,8>,<107,9>)
```
 StringBuffer sb = new StringBuffer(16);

        sb.append(getNameString());
        sb.append('(');
        sb.append(factor);

        if (multiplier != null) {
            sb.append(multiplier);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,262,<1347,12>,<1353,60>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,295,<610,16>,<616,67>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(190962,387,<5108,16>,<5117,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,298,<2376,16>,<2382,64>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23828,274,<686,16>,<692,62>)
```
 if (column.getName().comment == null) {
                    continue;
                }

                row              = t.getEmptyRowData();
                row[catalog]     = database.getCatalogName().name;
                row[schema]      = table.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60067,359,<1693,12>,<1701,67>)
```
 if (!session.getGrantee().isAccessible(charset)) {
                continue;
            }

            Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(190962,387,<5108,16>,<5117,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(53399,198,<1496,16>,<1500,49>)
```
 row[grantee]      = role.getName().getNameString();
                row[role_name]    = roleName;
                row[is_grantable] = Tokens.T_YES;

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(122538,213,<3332,16>,<3336,50>)
```
 data[domain_name]        = domain.getName().name;
                data[is_deferrable]      = Tokens.T_NO;
                data[initially_deferred] = Tokens.T_NO;

                t.insertSys(session, store, data);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(206296,363,<5540,12>,<5550,21>)
```
 addColumn(t, "SEQUENCE_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROUTINE_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(145105,349,<3916,12>,<3926,21>)
```
 addColumn(t, "JAR_NAME", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JAR_JAR_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19773,306,<550,12>,<558,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21611,248,<615,16>,<618,62>)
```
 row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
                row[column_name]      = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25563,206,<735,12>,<738,41>)
```
 row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67123,275,<1880,16>,<1883,73>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(6303,464,<206,8>,<217,47>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }

        Object removedObj = elementData[index];
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(5245,415,<167,8>,<176,9>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(146322,263,<3962,12>,<3969,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[JARS].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(177068,312,<4735,12>,<4743,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ROLE_ROUTINE_GRANTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(120929,299,<3284,12>,<3292,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAIN_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(17405,280,<594,12>,<602,13>)
```
 if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(21554,331,<761,50>,<773,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(18180,346,<621,50>,<633,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongValueHashMap.java|(2248,239,<61,8>,<70,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return longValueTable[lookup];
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntValueHashMap.java|(2289,238,<62,8>,<71,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return intValueTable[lookup];
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(20937,265,<738,12>,<746,13>)
```
 if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(21554,331,<761,50>,<773,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                return false;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerCommon.java|(18180,346,<621,50>,<633,9>)
```
 {
            HsqlName name = nameList[i];

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            Session holder = (Session) tableWriteLocks.get(name);

            if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5396,213,<197,12>,<200,59>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_TYPE).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149742,625,<4051,8>,<4064,78>)
```
 // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
        final int position_in_unique_constraint = 8;

        // Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5068,205,<150,8>,<155,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4679,205,<136,8>,<141,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(20796,1193,<510,4>,<542,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
     * as an <code>int</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setInt
     */
    public synchronized int getInt(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(19573,1217,<475,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
     * as a <code>short</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setShort
     */
    public synchronized short getShort(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(21995,1195,<544,4>,<576,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
     * as a <code>long</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setLong
     */
    public synchronized long getLong(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(31684,198,<1130,8>,<1136,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(24647,228,<899,8>,<906,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(28971,364,<1047,16>,<1055,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i] == null) {
                        continue;
                    }

                    unresolvedSet = nodes[i].resolveColumnReferences(session,
                            rangeGroup, rangeCount, rangeGroups,
                            unresolvedSet, acceptsSequences);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(58388,128,<1560,8>,<1562,9>)
```
 for (int i = 0; i < ba2.length; i++) {
            assertEquals("Byte " + i + " wrong (2)", expectedBytes[i], ba2[i]);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcTypes.java|(58143,128,<1555,8>,<1557,9>)
```
 for (int i = 0; i < ba1.length; i++) {
            assertEquals("Byte " + i + " wrong (1)", expectedBytes[i], ba1[i]);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53870,219,<1753,8>,<1759,37>)
```
 params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);

        session.sessionContext.pushDynamicArguments(params);

        Result result = updateLobUsage.execute(session);

        session.sessionContext.pop();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(54562,287,<1773,8>,<1780,56>)
```
 sysLobSession.sessionContext.pushDynamicArguments(params);

        Result result = getSpanningBlocks.execute(sysLobSession);

        sysLobSession.sessionContext.pop();

        RowSetNavigator navigator = result.getNavigator();
        int             size      = navigator.getSize();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56664,347,<1832,8>,<1837,69>)
```
 ResultMetaData meta     = createLobPartCall.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);
        params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(52243,213,<1709,12>,<1712,74>)
```
 ResultMetaData meta = deleteLobPartCall.getParametersMetaData();
            Object         params[] = new Object[meta.getColumnCount()];

            params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53658,272,<1749,8>,<1753,68>)
```
 ResultMetaData meta     = updateLobUsage.getParametersMetaData();
        Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_USAGE.BLOCK_COUNT] = ValuePool.getInt(delta);
        params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(119074,241,<3196,16>,<3202,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(97661,860,<2579,16>,<2599,52>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                /*
                                if (nodes[1] != null) {
                                    if (nodes[1].dataType == null) {
                 nodes[1].dataType = Type.SQL_VARCHAR_DEFAULT;
                                    }

                                    if (!nodes[1].dataType.isCharacterType()) {
                                        throw Error.error(ErrorCode.X_42563);
                                    }
                                }
                 */
                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                // fixed maximum as format is a variable
                dataType = Type.SQL_DECIMAL_DEFAULT;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50493,364,<1407,12>,<1417,21>)
```
 addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(19773,306,<550,12>,<558,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_COLUMN_SEQUENCE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(120929,299,<3284,12>,<3292,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAIN_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(128852,440,<3129,12>,<3140,21>)
```
 addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(64066,311,<1788,12>,<1796,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129523,697,<3148,8>,<3164,32>)
```
 final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,721,<3760,8>,<3774,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
        final int numeric_precision_radix  = 15;
        final int numeric_scale            = 16;
        final int datetime_precision       = 17;
        final int interval_type            = 18;
        final int interval_precision       = 19;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82425,303,<2329,12>,<2337,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50493,364,<1407,12>,<1417,21>)
```
 addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(120929,299,<3284,12>,<3292,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAIN_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(128852,440,<3129,12>,<3140,21>)
```
 addColumn(t, "NEXT_VALUE", CHARACTER_DATA);

            // order SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME
            // false PK, as CATALOG may be null
            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SEQUENCES].name, false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(64066,311,<1788,12>,<1796,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(178840,175,<4358,40>,<4364,9>)
```
 {
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(177822,139,<4330,16>,<4332,55>)
```
 parameterValues[i - 1] = is;
                streamLengths[i - 1]   = streamLength;
                parameterSet[i - 1]    = Boolean.FALSE;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(127132,272,<4006,8>,<4012,33>)
```
 Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_TYPE_IDENTITY, table, column, type,
            sequence
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(115327,227,<3659,8>,<3664,33>)
```
 Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(128490,427,<4046,44>,<4058,5>)
```
 {

        String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_NULL, table, column, b
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57307,252,<1768,8>,<1772,57>)
```
 list.add(sb.toString());
        sb.setLength(0);
        sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(71876,282,<2129,32>,<2135,13>)
```
 {
                sb.append("SET FILES ").append(Tokens.T_SPACE).append(' ');
                sb.append(propFileSpaces ? Tokens.T_TRUE
                                         : Tokens.T_FALSE);
                list.add(sb.toString());
                sb.setLength(0);
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(104901,286,<2769,16>,<2777,43>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }

                if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42561);
                }

                dataType = Type.SQL_DOUBLE;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(47684,249,<1290,16>,<1297,22>)
```
 if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_BIGINT;

                break;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(119074,241,<3196,16>,<3202,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(48774,287,<1324,16>,<1332,44>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_INTEGER;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(97661,860,<2579,16>,<2599,52>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_VARCHAR_DEFAULT;
                }

                /*
                                if (nodes[1] != null) {
                                    if (nodes[1].dataType == null) {
                 nodes[1].dataType = Type.SQL_VARCHAR_DEFAULT;
                                    }

                                    if (!nodes[1].dataType.isCharacterType()) {
                                        throw Error.error(ErrorCode.X_42563);
                                    }
                                }
                 */
                if (!nodes[0].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                // fixed maximum as format is a variable
                dataType = Type.SQL_DECIMAL_DEFAULT;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(177822,139,<4330,16>,<4332,55>)
```
 parameterValues[i - 1] = is;
                streamLengths[i - 1]   = streamLength;
                parameterSet[i - 1]    = Boolean.FALSE;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java|(178840,175,<4358,40>,<4364,9>)
```
 {
            parameterValues[i - 1] = o;
            streamLengths[i - 1]   = streamLength;
            parameterSet[i - 1]    = Boolean.FALSE;

            return;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(8006,234,<215,12>,<220,42>)
```
 assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(3827,238,<102,12>,<106,49>)
```
 assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
            assertEquals(40, rs.getInt(1));
            assertEquals("forty", rs.getString(3));
            assertEquals("str", rs.getString(4));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(3444,183,<110,4>,<117,5>)
```
 // methods that implement dataOutput
    public void writeShort(int v) {

        ensureRoom(2);

        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2728,158,<78,52>,<86,5>)
```
 {

        int count = 0;

        tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(3796,116,<126,8>,<128,35>)
```
 buffer[count++] = (byte) (v >>> 16);
        buffer[count++] = (byte) (v >>> 8);
        buffer[count++] = (byte) v;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java|(6625,134,<263,38>,<268,9>)
```
 {
            int v = charArray[i];

            buffer[count++] = (byte) (v >>> 8);
            buffer[count++] = (byte) v;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(15768,403,<527,12>,<539,9>)
```
 {
            session.actionTimestamp = getNextGlobalChangeTimestamp();

            if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(22704,308,<758,12>,<766,13>)
```
 if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(20099,412,<561,8>,<573,29>)
```
 final int table_cat        = 0;
        final int table_schem      = 1;
        final int table_name       = 2;
        final int column_name      = 3;
        final int sequence_catalog = 4;
        final int sequence_schema  = 5;
        final int sequence_name    = 6;

        //
        // intermediate holders
        int            columnCount;
        Iterator       tables;
        Table          table;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/IntValueHashMap.java|(2289,238,<62,8>,<71,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return intValueTable[lookup];
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/LongValueHashMap.java|(2248,239,<61,8>,<70,9>)
```
 if (key == null) {
            throw new NoSuchElementException();
        }

        int hash   = key.hashCode();
        int lookup = getLookup(key, hash);

        if (lookup != -1) {
            return longValueTable[lookup];
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203215,231,<5451,8>,<5459,43>)
```
 final int routine_schema   = 4;
        final int routine_name     = 5;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258652,220,<6805,8>,<6813,34>)
```
 final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25563,206,<735,12>,<738,41>)
```
 row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50385,342,<1405,12>,<1411,43>)
```
 addColumn(t, "GRANTEE", SQL_IDENTIFIER);
            addColumn(t, "ROLE_NAME", SQL_IDENTIFIER);
            addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82222,364,<2325,12>,<2331,36>)
```
 addColumn(t, "TABLE_SCHEMA", SQL_IDENTIFIER);
            addColumn(t, "TABLE_NAME", SQL_IDENTIFIER);     // not null
            addColumn(t, "COLUMN_NAME", SQL_IDENTIFIER);    // not null

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2420,117,<67,8>,<70,36>)
```
 tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/DataOutputStream.java|(2728,158,<78,52>,<86,5>)
```
 {

        int count = 0;

        tempBuffer[count++] = (byte) (v >>> 8);
        tempBuffer[count++] = (byte) v;

        write(tempBuffer, 0, count);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestNitin.java|(2739,289,<71,12>,<81,49>)
```
 try {
                if (br != null) {
                    br.close();
                }
            } catch (java.io.IOException ioe) {}

            try {
                if (s != null) {
                    s.close();
                }
            } catch (java.sql.SQLException se) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBench.java|(27679,354,<844,16>,<858,17>)
```
 if (pstmt1 != null) {
                    pstmt1.close();
                }

                if (pstmt2 != null) {
                    pstmt2.close();
                }

                if (pstmt3 != null) {
                    pstmt3.close();
                }

                if (pstmt4 != null) {
                    pstmt4.close();
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161799,270,<4367,20>,<4370,75>)
```
 row                   = t.getEmptyRowData();
                    row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(211412,481,<5691,16>,<5702,69>)
```
 if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(70945,389,<1993,16>,<2000,40>)
```
 row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(5245,415,<167,8>,<176,9>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/lib/HsqlArrayList.java|(6303,464,<206,8>,<217,47>)
```
 if (index >= elementCount) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " >= "
                                                + elementCount);
        }

        if (index < 0) {
            throw new IndexOutOfBoundsException("Index out of bounds: "
                                                + index + " < 0");
        }

        Object removedObj = elementData[index];
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66758,753,<1869,16>,<1885,52>)
```
 HsqlName name = (HsqlName) references.get(i);

                if (name.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(name)) {
                    continue;
                }

                row                     = t.getEmptyRowData();
                row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
                row[specific_name]      = name.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(263094,363,<6943,16>,<6951,69>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[trigger_catalog]  = database.getCatalogName().name;
                row[trigger_schema]   = trigger.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(12109,281,<297,36>,<304,17>)
```
 {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result5 += rsmd.getColumnLabel(i + 1) + ":"
                                   + rs.getString(i + 1) + ":";
                    }

                    result5 += "\n";
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2969,177,<83,12>,<86,13>)
```
 for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(87162,332,<2090,8>,<2099,34>)
```
 final int ischem     = 1;
        final int iname      = 2;
        final int icol_name  = 3;
        final int icol_type  = 4;
        final int idata_type = 5;
        final int itype_name = 6;
        final int iprec      = 7;
        final int ilength    = 8;
        final int iscale     = 9;
        final int iradix     = 10;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(92509,780,<2595,8>,<2610,50>)
```
 // column number mappings
        final int table_cat                  = 0;
        final int table_schem                = 1;
        final int table_name                 = 2;
        final int column_name                = 3;
        final int ordinal_position           = 4;
        final int column_default             = 5;
        final int is_nullable                = 6;
        final int data_type                  = 7;
        final int character_maximum_length   = 8;
        final int character_octet_length     = 9;
        final int numeric_precision          = 10;
        final int numeric_precision_radix    = 11;
        final int numeric_scale              = 12;
        final int datetime_precision         = 13;
        final int interval_type              = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(239467,322,<6253,12>,<6259,36>)
```
 addColumn(t, "IS_SUPPORTED", YES_OR_NO);
            addColumn(t, "IS_VERIFIED_BY", CHARACTER_DATA);
            addColumn(t, "COMMENTS", CHARACTER_DATA);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_FEATURES].name, false,
                SchemaObject.INDEX);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(71008,326,<1994,16>,<2000,40>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(149662,529,<4047,8>,<4059,52>)
```
 // Intermediate holders
        Iterator tables;
        Object[] row;

        // column number mappings
        final int constraint_catalog            = 0;
        final int constraint_schema             = 1;
        final int constraint_name               = 2;
        final int table_catalog                 = 3;
        final int table_schema                  = 4;
        final int table_name                    = 5;
        final int column_name                   = 6;
        final int ordinal_position              = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,392,<698,8>,<709,38>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48118,356,<1327,8>,<1337,36>)
```
 // intermediate holders
        Iterator  tables;
        Table     table;
        Object[]  row;
        final int table_catalog = 0;
        final int table_schema  = 1;
        final int table_name    = 2;
        final int cardinality   = 3;
        final int space_id      = 4;
        final int alloc_space   = 5;
        final int used_space    = 6;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(251693,391,<6611,8>,<6622,41>)
```
 Constraint   constraint;
        String       cat;
        String       schem;
        Object[]     row;

        // column number mappings
        final int constraint_catalog = 0;
        final int constraint_schema  = 1;
        final int constraint_name    = 2;
        final int constraint_type    = 3;
        final int table_catalog      = 4;
        final int table_schema       = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(38485,405,<1065,8>,<1075,37>)
```
 // column number mappings
        final int isid           = 0;
        final int ict            = 1;
        final int iuname         = 2;
        final int iis_admin      = 3;
        final int iautocmt       = 4;
        final int ireadonly      = 5;
        final int ilast_id       = 6;
        final int it_schema      = 7;
        final int it_tx          = 8;
        final int it_size        = 9;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(307359,344,<8067,8>,<8078,36>)
```
 View     view;
        Table    table;
        Object[] row;
        Iterator iterator;

        // Column number mappings
        final int view_catalog  = 0;
        final int view_schema   = 1;
        final int view_name     = 2;
        final int table_catalog = 3;
        final int table_schema  = 4;
        final int table_name    = 5;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(258423,449,<6799,8>,<6813,34>)
```
 // column number mappings
        final int trigger_catalog = 0;
        final int trigger_schema  = 1;
        final int trigger_name    = 2;
        final int table_catalog   = 3;
        final int table_schema    = 4;
        final int table_name      = 5;
        final int column_name     = 6;

        //
        Iterator it;
        Object[] row;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(83183,415,<1993,8>,<2004,36>)
```
 PersistentStore store = t.getRowStore(session);

        // column number mappings
        final int icat          = 0;
        final int ischem        = 1;
        final int ipname        = 2;
        final int iinput_parms  = 3;
        final int ioutput_parms = 4;
        final int iresult_sets  = 5;
        final int iremark       = 6;
        final int iptype        = 7;
        final int isn           = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82748,582,<2340,8>,<2360,47>)
```
 // column number mappings
        final int domain_catalog = 0;
        final int domain_schema  = 1;
        final int domain_name    = 2;
        final int table_catalog  = 3;
        final int table_schema   = 4;
        final int table_name     = 5;
        final int column_name    = 6;

        // intermediate holders
        int      columnCount;
        Iterator tables;
        Table    table;
        Object[] row;
        Type     type;
        HsqlName tableName;

        // Initialization
        tables = allTables();

        Grantee grantee = session.getGrantee();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(136079,262,<4906,56>,<4919,5>)
```
 {

        if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }

        return e;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDQL.java|(86715,226,<2968,8>,<2976,9>)
```
 if (token.tokenType == Tokens.LEFTBRACKET) {
            read();

            Expression e1 = XreadNumericValueExpression();

            readThis(Tokens.RIGHTBRACKET);

            e = new ExpressionAccessor(e, e1);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81355,302,<2750,16>,<2754,63>)
```
 sb.setLength(0);
                sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129423,736,<3146,8>,<3162,26>)
```
 final int sequence_name              = 2;
        final int data_type                  = 3;
        final int numeric_precision          = 4;
        final int numeric_precision_radix    = 5;
        final int numeric_scale              = 6;
        final int maximum_value              = 7;
        final int minimum_value              = 8;
        final int increment                  = 9;
        final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(12109,281,<297,36>,<304,17>)
```
 {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result5 += rsmd.getColumnLabel(i + 1) + ":"
                                   + rs.getString(i + 1) + ":";
                    }

                    result5 += "\n";
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestMerge.java|(2969,177,<83,12>,<86,13>)
```
 for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + ":"
                          + rs.getString(i + 1) + ":";
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(7767,305,<160,16>,<169,44>)
```
 for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + ":";
                    }

                    result0 += "\n";
                }

                rs.close();
                System.out.println(result0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestSql.java|(8825,336,<196,16>,<207,44>)
```
 result1 = "";

                for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result1 += rs.getString(i + 1) + ":";
                    }

                    result1 += "\n";
                }

                rs.close();
                System.out.println(result1);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(14006,463,<498,71>,<519,5>)
```
 {

        HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator rights = grantedRightsMap.get(name);

        if (rights.hasNext()) {
            OrderedHashSet set = new OrderedHashSet();

            while (rights.hasNext()) {
                set.add(rights.next());
            }

            return set;
        }

        return Right.emptySet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/Grantee.java|(10933,198,<374,8>,<380,54>)
```
 HsqlName name = object.getName();

        if (object instanceof Routine) {
            name = ((Routine) object).getSpecificName();
        }

        Iterator it       = directRightsMap.get(name);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(43284,230,<1040,8>,<1047,9>)
```
 checkColumn(columnIndex);

        Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];
        Object o          = getColumnInType(columnIndex, sourceType);

        if (o == null) {
            return null;
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(42987,253,<1131,8>,<1138,9>)
```
 checkGetParameterIndex(parameterIndex);

        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];
        Object o          = getColumnInType(parameterIndex, sourceType);

        if (o == null) {
            return null;
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16538,218,<507,12>,<510,61>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,269,<2751,16>,<2754,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57365,194,<1770,8>,<1772,57>)
```
 sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11728,198,<319,16>,<321,74>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11056,224,<303,16>,<306,75>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5396,213,<197,12>,<200,59>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_TYPE).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(20796,1193,<510,4>,<542,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
     * as an <code>int</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setInt
     */
    public synchronized int getInt(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(19573,1217,<475,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
     * as a <code>short</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setShort
     */
    public synchronized short getShort(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(21995,1195,<544,4>,<576,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
     * as a <code>long</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setLong
     */
    public synchronized long getLong(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(18374,1193,<441,4>,<473,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
     * as a <code>byte</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setByte
     */
    public synchronized byte getByte(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(23196,1237,<578,4>,<611,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>FLOAT</code> parameter
     * as a <code>float</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setFloat
     */
    public synchronized float getFloat(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? (float) 0.0
                         : ((Number) o).floatValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(17188,190,<524,8>,<527,43>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestCacheSize.java|(23343,230,<708,8>,<712,39>)
```
 StopWatch        sw        = new StopWatch();
        java.util.Random randomgen = new java.util.Random();
        int              i         = 0;
        boolean          slow      = false;
        int              count     = 0;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(48774,287,<1324,16>,<1332,44>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_INTEGER;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionSQL.java|(47684,225,<1290,16>,<1295,43>)
```
 if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

                dataType = Type.SQL_BIGINT;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAccessor.java|(2402,336,<63,88>,<75,5>)
```
 {

        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);
        }

        return unresolvedSet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(24647,228,<899,8>,<906,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(28971,364,<1047,16>,<1055,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i] == null) {
                        continue;
                    }

                    unresolvedSet = nodes[i].resolveColumnReferences(session,
                            rangeGroup, rangeCount, rangeGroups,
                            unresolvedSet, acceptsSequences);
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(20645,197,<725,8>,<731,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceColumnReferences(range, list);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(14891,199,<448,32>,<452,9>)
```
 {
            sb.append(' ').append(Tokens.T_ON).append(' ');
            sb.append(Tokens.T_COMMIT).append(' ').append(Tokens.T_PRESERVE);
            sb.append(' ').append(Tokens.T_ROWS);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Table.java|(16538,218,<507,12>,<510,61>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');
            sb.append(getName().getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_READ).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/SchemaManager.java|(81388,269,<2751,16>,<2754,63>)
```
 sb.append(Tokens.T_COMMENT).append(' ').append(Tokens.T_ON);
                sb.append(' ').append(Tokens.T_TABLE).append(' ');
                sb.append(table.getName().getSchemaQualifiedStatementName());
                sb.append(' ').append(Tokens.T_IS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/Logger.java|(57365,194,<1770,8>,<1772,57>)
```
 sb.append("SET DATABASE ").append(Tokens.T_DEFAULT).append(' ');
        sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_MEMORY);
        sb.append(' ').append(Tokens.T_ROWS).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/rights/UserManager.java|(14659,188,<475,12>,<477,53>)
```
 sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);
            sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');
            sb.append(Tokens.T_FUNCTION).append(' ');
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11728,198,<319,16>,<321,74>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(transitions[OLD_TABLE].getName().statementName);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TriggerDef.java|(11056,224,<303,16>,<306,75>)
```
 sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);
                sb.append(' ').append(Tokens.T_AS).append(' ');
                sb.append(
                    rangeVars[OLD_ROW].getTableAlias().getStatementName());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/types/UserTypeModifier.java|(5396,213,<197,12>,<200,59>)
```
 sb.append(Tokens.T_CREATE).append(' ').append(
                Tokens.T_TYPE).append(' ');
            sb.append(name.getSchemaQualifiedStatementName());
            sb.append(' ').append(Tokens.T_AS).append(' ');
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMVCC.java|(22704,308,<758,12>,<766,13>)
```
 if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java|(15768,403,<527,12>,<539,9>)
```
 {
            session.actionTimestamp = getNextGlobalChangeTimestamp();

            if (!session.isTransaction) {
                session.transactionTimestamp = session.actionTimestamp;
                session.isTransaction        = true;

                liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);

                transactionCount++;
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5068,205,<150,8>,<155,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4679,205,<136,8>,<141,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(111691,249,<2978,20>,<2982,21>)
```
 if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(115193,438,<3082,34>,<3094,13>)
```
 {
                for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
                }

                dataType = Type.SQL_VARCHAR_DEFAULT;

                break;
            }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(85634,236,<2247,16>,<2253,17>)
```
 if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }

                if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/FunctionCustom.java|(119074,241,<3196,16>,<3202,17>)
```
 if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }

                if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(58258,210,<1872,8>,<1874,72>)
```
 params[ALLOC_PART.PART_OFFSET]  = ValuePool.getLong(partOffset);
        params[ALLOC_PART.PART_LENGTH]  = ValuePool.getLong(dataLength);
        params[ALLOC_PART.PART_BYTES]   = ValuePool.getLong(byteLength);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(56316,254,<1822,8>,<1827,19>)
```
 params[DIVIDE_BLOCK.BLOCK_OFFSET] = ValuePool.getInt(offset);
        params[DIVIDE_BLOCK.LOB_ID]       = ValuePool.getLong(lobID);

        Result result =
            sysLobSession.executeCompiledStatement(divideLobPartCall, params,
                0);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(53732,198,<1750,8>,<1753,68>)
```
 Object         params[] = new Object[meta.getColumnCount()];

        params[UPDATE_USAGE.BLOCK_COUNT] = ValuePool.getInt(delta);
        params[UPDATE_USAGE.LOB_ID]      = ValuePool.getLong(lobID);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46505,672,<1135,8>,<1152,78>)
```
 // column number mappings
        final int ipk_table_cat   = 0;
        final int ipk_table_schem = 1;
        final int ipk_table_name  = 2;
        final int ipk_column_name = 3;
        final int ifk_table_cat   = 4;
        final int ifk_table_schem = 5;
        final int ifk_table_name  = 6;
        final int ifk_column_name = 7;
        final int ikey_seq        = 8;
        final int iupdate_rule    = 9;
        final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(169256,507,<4534,8>,<4546,28>)
```
 // column number mappings
        final int constraint_catalog        = 0;
        final int constraint_schema         = 1;
        final int constraint_name           = 2;
        final int unique_constraint_catalog = 3;
        final int unique_constraint_schema  = 4;
        final int unique_constraint_name    = 5;
        final int match_option              = 6;
        final int update_rule               = 7;
        final int delete_rule               = 8;

        //
        Iterator     tables;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(139257,476,<3760,8>,<3769,48>)
```
 final int data_type                = 5;
        final int character_maximum_length = 6;
        final int character_octet_length   = 7;
        final int character_set_catalog    = 8;
        final int character_set_schema     = 9;
        final int character_set_name       = 10;
        final int collation_catalog        = 11;
        final int collation_schema         = 12;
        final int collation_name           = 13;
        final int numeric_precision        = 14;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(28354,590,<698,8>,<714,39>)
```
 Object[]       row;
        HsqlProperties p;

        // Column number mappings
        final int iscope          = 0;
        final int icolumn_name    = 1;
        final int idata_type      = 2;
        final int itype_name      = 3;
        final int icolumn_size    = 4;
        final int ibuffer_length  = 5;
        final int idecimal_digits = 6;
        final int ipseudo_column  = 7;
        final int itable_cat      = 8;
        final int itable_schem    = 9;
        final int itable_name     = 10;
        final int inullable       = 11;
        final int iinKey          = 12;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(320214,464,<8427,8>,<8436,49>)
```
 Object[]  row;
        final int table_catalog              = 0;
        final int table_schema               = 1;
        final int table_name                 = 2;
        final int view_definition            = 3;
        final int check_option               = 4;
        final int is_updatable               = 5;
        final int insertable_into            = 6;
        final int is_trigger_updatable       = 7;
        final int is_trigger_deletable       = 8;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(20976,211,<673,12>,<679,72>)
```
 Object[] data = getLobHeader(lobID);

            if (data == null) {
                throw Error.error(ErrorCode.X_0F502);
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/persist/LobManager.java|(47824,235,<1548,12>,<1554,72>)
```
 Object[] data = getLobHeader(lobID);

            if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }

            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(40640,203,<1129,16>,<1135,17>)
```
 for (int j = 0; j < array.length; j++) {
                    if (j > 0) {
                        sb.append(',');
                    }

                    sb.append(array[j].getId());
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(10146,204,<321,16>,<327,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }

                    sb.append(nodes[i].getSQL());
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(27273,228,<689,8>,<697,9>)
```
 if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(parameterIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java|(31471,262,<738,67>,<751,5>)
```
 {

        if (scale < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }

        BigDecimal bd = getBigDecimal(columnIndex);

        if (bd != null) {
            bd = bd.setScale(scale, BigDecimal.ROUND_DOWN);
        }

        return bd;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(64545,344,<2119,8>,<2130,9>)
```
 if (readIfThis(Tokens.SET)) {
            readThis(Tokens.MESSAGE_TEXT);
            readThis(Tokens.EQUALS);

            message = XreadSimpleValueSpecificationOrNull();

            if (message == null) {
                throw unexpectedToken();
            }

            resolveOuterReferencesAndTypes(routine, context, message);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(65349,446,<2147,41>,<2162,9>)
```
 {
            sqlState = parseSQLStateValue();

            if (readIfThis(Tokens.SET)) {
                readThis(Tokens.MESSAGE_TEXT);
                readThis(Tokens.EQUALS);

                message = XreadSimpleValueSpecificationOrNull();

                if (message == null) {
                    throw unexpectedToken();
                }

                resolveOuterReferencesAndTypes(routine, context, message);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(65349,446,<2147,41>,<2162,9>)
```
 {
            sqlState = parseSQLStateValue();

            if (readIfThis(Tokens.SET)) {
                readThis(Tokens.MESSAGE_TEXT);
                readThis(Tokens.EQUALS);

                message = XreadSimpleValueSpecificationOrNull();

                if (message == null) {
                    throw unexpectedToken();
                }

                resolveOuterReferencesAndTypes(routine, context, message);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(64545,344,<2119,8>,<2130,9>)
```
 if (readIfThis(Tokens.SET)) {
            readThis(Tokens.MESSAGE_TEXT);
            readThis(Tokens.EQUALS);

            message = XreadSimpleValueSpecificationOrNull();

            if (message == null) {
                throw unexpectedToken();
            }

            resolveOuterReferencesAndTypes(routine, context, message);
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(127996,374,<4034,8>,<4042,57>)
```
 Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_TYPE, table, column, type
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(128490,427,<4046,44>,<4058,5>)
```
 {

        String   sql  = getLastPart();
        Object[] args = new Object[] {
            StatementTypes.ALTER_COLUMN_NULL, table, column, b
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

        return new StatementSchema(sql, StatementTypes.ALTER_TABLE, args,
                                   null, writeLockNames);
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserRoutine.java|(18913,246,<578,8>,<582,58>)
```
 Object[] args = new Object[]{ routine };
        String   sql  = getLastPart();
        StatementSchema cs = new StatementSchema(sql,
            StatementTypes.ALTER_ROUTINE, args, null,
            database.schemaManager.getCatalogNameArray());
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(59464,208,<1960,8>,<1964,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[] {
            name, routines
        };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(114214,296,<3631,8>,<3638,57>)
```
 Object[] args = new Object[] {
            name, newName
        };
        HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();

        return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ParserDDL.java|(59464,208,<1960,8>,<1964,76>)
```
 String     sql            = getLastPart();
        Object[]   args           = new Object[] {
            name, routines
        };
        HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(8006,234,<215,12>,<220,42>)
```
 assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));

            assertTrue("Not enough rows fetched", rs.next());
            assertEquals(3, rs.getInt(2));
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestOdbcService.java|(4747,232,<127,12>,<131,53>)
```
 assertTrue("No rows fetched", rs.next());
            assertEquals("str", rs.getString(4));
            assertEquals(15, rs.getInt(1));
            assertEquals(3, rs.getInt(2));
            assertEquals("fifteen", rs.getString(3));
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25522,175,<932,8>,<936,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(rangeVariables, set);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25048,159,<916,8>,<920,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(31684,198,<1130,8>,<1136,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/ExpressionAccessor.java|(2402,336,<63,88>,<75,5>)
```
 {

        for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            unresolvedSet = nodes[i].resolveColumnReferences(session,
                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);
        }

        return unresolvedSet;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/RangeVariable.java|(59765,250,<1967,16>,<1972,17>)
```
 for (int i = 0; i < indexCond.length; i++) {
                    if (indexCond[i] != null) {
                        indexCond[i] =
                            indexCond[i].replaceColumnReferences(range, list);
                    }
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(24647,228,<899,8>,<906,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] == null) {
                continue;
            }

            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,
                    length);
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(28971,364,<1047,16>,<1055,17>)
```
 for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i] == null) {
                        continue;
                    }

                    unresolvedSet = nodes[i].resolveColumnReferences(session,
                            rangeGroup, rangeCount, rangeGroups,
                            unresolvedSet, acceptsSequences);
                }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4963,383,<147,4>,<159,5>)
```
 public static ResultLob newLobSetCharsRequest(long id, long offset,
            char[] chars) {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
        result.blockLength = chars.length;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(58192,287,<1406,8>,<1411,33>)
```
 if (columnNames == null || columnNames.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES, null,
                    columnNames);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java|(55635,295,<1351,8>,<1356,41>)
```
 if (columnIndexes == null || columnIndexes.length == 0) {
            throw JDBCUtil.invalidArgument("columnIndexes");
        }
        fetchResult(sql, StatementTypes.RETURN_COUNT,
                    ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES,
                    columnIndexes, null);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25048,159,<916,8>,<920,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(set);
            }
        }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Expression.java|(25522,175,<932,8>,<936,9>)
```
 for (int i = 0; i < nodes.length; i++) {
            if (nodes[i] != null) {
                set = nodes[i].collectRangeVariables(rangeVariables, set);
            }
        }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(59675,295,<1681,8>,<1688,34>)
```
 final int form_of_use             = 4;
        final int default_collate_catalog = 5;
        final int default_collate_schema  = 6;
        final int default_collate_name    = 7;

        //
        Iterator it = database.schemaManager.databaseObjectIterator(
            SchemaObject.CHARSET);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(285140,260,<7532,8>,<7539,77>)
```
 final int udt_schema     = 3;
        final int udt_name       = 4;
        final int privilege_type = 5;
        final int is_grantable   = 6;

        //
        Iterator objects =
            database.schemaManager.databaseObjectIterator(SchemaObject.TYPE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(135199,306,<3649,12>,<3655,72>)
```
 if (!session.getGrantee().isAccessible(type)) {
                continue;
            }

            row                             = t.getEmptyRowData();
            row[object_catalog]             = database.getCatalogName().name;
            row[object_schema]              = type.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,262,<1347,12>,<1353,60>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,295,<610,16>,<616,67>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,298,<2376,16>,<2382,64>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84091,289,<2383,16>,<2387,61>)
```
 row[domain_name]    = type.getName().name;
                row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(50493,364,<1407,12>,<1417,21>)
```
 addColumn(t, "IS_GRANTABLE", SQL_IDENTIFIER);

            HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[ADMINISTRABLE_ROLE_AUTHORIZATIONS].name,
                false, SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(120929,299,<3284,12>,<3292,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[DOMAIN_CONSTRAINTS].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(64066,311,<1788,12>,<1796,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[CHECK_CONSTRAINT_ROUTINE_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5
            }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191572,184,<5121,16>,<5123,60>)
```
 row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.parent.schema.name;
                row[table_name]       = refName.parent.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67272,186,<1882,16>,<1884,59>)
```
 row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
                row[specific_schema]    = name.schema.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(84150,281,<2384,16>,<2389,49>)
```
 row[table_catalog]  = database.getCatalogName().name;
                row[table_schema]   = tableName.schema.name;
                row[table_name]     = tableName.name;
                row[column_name]    = column.getNameString();

                t.insertSys(session, store, row);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(82425,303,<2329,12>,<2337,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[COLUMN_DOMAIN_USAGE].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[] {
                0, 1, 2, 3, 4, 5, 6
            }, false);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(16695,252,<461,12>,<467,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SYSTEM_CACHEINFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, true);

            return t;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(240980,260,<6298,12>,<6304,21>)
```
 HsqlName name = HsqlNameManager.newInfoSchemaObjectName(
                sysTableHsqlNames[SQL_IMPLEMENTATION_INFO].name, false,
                SchemaObject.INDEX);

            t.createPrimaryKeyConstraint(name, new int[]{ 0 }, false);

            return t;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21611,248,<615,16>,<618,62>)
```
 row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
                row[table_name]       = table.getName().name;
                row[column_name]      = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(67123,275,<1880,16>,<1883,73>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = constraint.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;
                row[specific_catalog]   = database.getCatalogName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(191644,166,<5122,16>,<5124,53>)
```
 row[table_schema]     = refName.parent.schema.name;
                row[table_name]       = refName.parent.name;
                row[column_name]      = refName.name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(226241,3302,<5965,30>,<6032,13>)
```
 {

                // common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = "INTERVAL";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = "ARRAY";
                }

                row[dtd_identifier]     = type.getDefinition();
                row[declared_data_type] = row[data_type];

                // end common block
            }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126847,2860,<3440,12>,<3497,59>)
```
 // common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = "INTERVAL";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = "ARRAY";
            }

            row[dtd_identifier]     = type.getDefinition();
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(60171,255,<1697,12>,<1701,67>)
```
 Object[] data = t.getEmptyRowData();

            data[character_set_catalog]   = database.getCatalogName().name;
            data[character_set_schema]    = charset.getSchemaName().name;
            data[character_set_name]      = charset.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(286578,266,<7570,20>,<7573,64>)
```
 row[grantee]        = right.getGrantee().getName().name;
                    row[udt_catalog]    = database.getCatalogName().name;
                    row[udt_schema]     = object.getSchemaName().name;
                    row[udt_name]       = object.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(137455,340,<3710,16>,<3714,71>)
```
 row[object_catalog] = database.getCatalogName().name;
                row[object_schema]              = routine.getSchemaName().name;
                row[object_name]                = routine.getName().name;
                row[object_type]                = "ROUTINE";
                row[collection_type_identifier] = type.getDefinition();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(71008,326,<1994,16>,<2000,40>)
```
 row[constraint_catalog] = database.getCatalogName().name;
                row[constraint_schema]  = table.getSchemaName().name;
                row[constraint_name]    = constraint.getName().name;

                try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(203667,749,<5466,16>,<5482,53>)
```
 HsqlName refName = (HsqlName) set.get(i);

                if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }

                if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
                row[routine_catalog]  = database.getCatalogName().name;
                row[routine_schema]   = refName.schema.name;
                row[routine_name]     = refName.name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(48679,262,<1347,12>,<1353,60>)
```
 if (!isAccessibleTable(session, table)) {
                continue;
            }

            row                = t.getEmptyRowData();
            row[table_catalog] = database.getCatalogName().name;
            row[table_schema]  = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(21439,295,<610,16>,<616,67>)
```
 if (!columnList.contains(column.getName())) {
                    continue;
                }

                row                   = t.getEmptyRowData();
                row[table_cat]        = database.getCatalogName().name;
                row[table_schem]      = table.getSchemaName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(190962,387,<5108,16>,<5117,71>)
```
 if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }

                row = t.getEmptyRowData();

                //
                row[specific_catalog] = database.getCatalogName().name;
                row[specific_schema]  = routine.getSchemaName().name;
                row[specific_name]    = routine.getSpecificName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(83776,298,<2376,16>,<2382,64>)
```
 if (!grantee.isFullyAccessibleByRole(type.getName())) {
                    continue;
                }

                row                 = t.getEmptyRowData();
                row[domain_catalog] = database.getCatalogName().name;
                row[domain_schema]  = type.getSchemaName().name;
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25511,258,<734,12>,<738,41>)
```
 row              = t.getEmptyRowData();
            row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(161864,272,<4368,20>,<4371,66>)
```
 row[specific_cat]     = database.getCatalogName().name;
                    row[specific_schem]   = routine.getSchemaName().name;
                    row[specific_name]    = routine.getSpecificName().name;
                    row[parameter_name]   = column.getName().name;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(99859,243,<2754,16>,<2758,17>)
```
 if (type.isDistinctType()) {
                    row[udt_catalog] = database.getCatalogName().name;
                    row[udt_schema]  = type.getSchemaName().name;
                    row[udt_name]    = type.getName().name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(126604,229,<3435,12>,<3438,59>)
```
 row[domain_catalog] = database.getCatalogName().name;
            row[domain_schema]  = type.getSchemaName().name;
            row[domain_name]    = type.getName().name;
            row[data_type]      = type.getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(170958,273,<4580,70>,<4585,17>)
```
 {
                    row[unique_constraint_catalog] =
                        database.getCatalogName().name;
                    row[unique_constraint_schema] = uniqueName.schema.name;
                    row[unique_constraint_name]   = uniqueName.name;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(130807,263,<3184,12>,<3187,79>)
```
 row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(212124,356,<5706,16>,<5713,44>)
```
 row[routine_name]     = routine.getName().name;
                row[table_catalog]    = database.getCatalogName().name;
                row[table_schema]     = refName.schema.name;
                row[table_name]       = refName.name;

                try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(25563,206,<735,12>,<738,41>)
```
 row[catalog]     = database.getCatalogName().name;
            row[schema]      = object.getSchemaName().name;
            row[name]        = object.getName().name;
            row[type]        = "ROUTINE";
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3914,182,<124,8>,<132,68>)
```
 pstmt.setInt(2, 9);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(4051,200,<130,8>,<137,68>)
```
 pstmt = conn.prepareStatement(sql);
        rs    = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(129823,494,<3154,8>,<3167,35>)
```
 final int cycle_option               = 10;
        final int declared_data_type         = 11;
        final int declared_numeric_precision = 12;
        final int declared_numeric_scale     = 13;
        final int start_with                 = 14;
        final int next_value                 = 15;

        //
        Iterator       it;
        Object[]       row;
        NumberSequence sequence;

        it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(46929,248,<1146,8>,<1152,78>)
```
 final int idelete_rule    = 10;
        final int ifk_name        = 11;
        final int ipk_name        = 12;
        final int ideferrability  = 13;

        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(3529,182,<108,8>,<116,68>)
```
 pstmt.setInt(1, 0);

        rs = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(4051,200,<130,8>,<137,68>)
```
 pstmt = conn.prepareStatement(sql);
        rs    = pstmt.executeQuery();

        rs.next();

        actualCount = rs.getInt(1);

        assertEquals("\"" + sql + "\"", expectedCount, actualCount);
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(20796,1193,<510,4>,<542,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
     * as an <code>int</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setInt
     */
    public synchronized int getInt(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(19573,1217,<475,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
     * as a <code>short</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setShort
     */
    public synchronized short getShort(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(18374,1193,<441,4>,<473,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
     * as a <code>byte</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setByte
     */
    public synchronized byte getByte(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(37904,258,<1489,56>,<1496,17>)
```
 {
                    token.tokenString = Tokens.T_NOT_EQUALS;
                    token.tokenType   = Tokens.NOT_EQUALS;
                    currentPosition   += 2;
                    token.isDelimiter = true;

                    return;
                }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/Scanner.java|(36976,284,<1462,60>,<1469,21>)
```
 {
                        token.tokenString = Tokens.T_LEFTBRACKET;
                        token.tokenType   = Tokens.LEFTBRACKET;
                        currentPosition   += 3;
                        token.isDelimiter = true;

                        return;
                    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(5068,205,<150,8>,<155,35>)
```
 ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_CHARS;
        result.lobID       = id;
        result.blockOffset = offset;
        result.charBlock   = chars;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(19573,1217,<475,4>,<508,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
     * as a <code>short</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setShort
     */
    public synchronized short getShort(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_SMALLINT);

        return o == null ? 0
                         : ((Number) o).shortValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(21995,1195,<544,4>,<576,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
     * as a <code>long</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setLong
     */
    public synchronized long getLong(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(18374,1193,<441,4>,<473,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
     * as a <code>byte</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setByte
     */
    public synchronized byte getByte(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(20796,1193,<510,4>,<542,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
     * as an <code>int</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setInt
     */
    public synchronized int getInt(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_INTEGER);

        return o == null ? 0
                         : ((Number) o).intValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(21995,1195,<544,4>,<576,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
     * as a <code>long</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setLong
     */
    public synchronized long getLong(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_BIGINT);

        return o == null ? 0
                         : ((Number) o).longValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(18374,1193,<441,4>,<473,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
     * as a <code>byte</code> in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     * and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     * is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setByte
     */
    public synchronized byte getByte(int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.TINYINT);

        return o == null ? 0
                         : ((Number) o).byteValue();
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java|(24439,1235,<613,4>,<646,5>)
```
 /**
     * <!-- start generic documentation -->
     *
     * Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
     * in the Java programming language.
     *
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class="ReleaseSpecificDocumentation">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB supports this feature. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param parameterIndex the first parameter is 1, the second is 2,
     *        and so on
     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result
     *         is <code>0</code>.
     * @exception SQLException JDBC 4.1[if the parameterIndex is not valid;]
     * if a database access error occurs or
     * this method is called on a closed <code>CallableStatement</code>
     * @see #setDouble
     */
    public synchronized double getDouble(
            int parameterIndex) throws SQLException {

        Object o = getColumnInType(parameterIndex, Type.SQL_DOUBLE);

        return o == null ? 0.0
                         : ((Number) o).doubleValue();
    }
```

=-=-=-=-=-= Clone Class =-=-=-=-=-=-=
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(8392,175,<267,8>,<271,36>)
```
 ResultLob result = new ResultLob();

        result.lobID       = lobID;
        result.subType     = LobResultTypes.REQUEST_CREATE_BYTES;
        result.blockLength = length;
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(4668,289,<134,26>,<145,5>)
```
 {

        ResultLob result = new ResultLob();

        result.subType     = LobResultTypes.REQUEST_SET_BYTES;
        result.lobID       = id;
        result.blockOffset = offset;
        result.byteBlock   = block;
        result.blockLength = block.length;

        return result;
    }
```
Location: |project://hsqldb-2.3.1/hsqldb/src/org/hsqldb/result/ResultLob.java|(3656,222,<97,4>,<105,5>)
```
 public static ResultLob newLobGetLengthRequest(long id) {

        ResultLob result = new ResultLob();

        result.subType = LobResultTypes.REQUEST_GET_LENGTH;
        result.lobID   = id;

        return result;
    }
```

